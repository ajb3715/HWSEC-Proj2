
simpleserial-base-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f8  080046f8  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  080046f8  080046f8  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f8  080046f8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f8  080046f8  000056f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004700  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000060  08004760  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000414  08004760  00006414  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .comment      00000026  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ebf  00000000  00000000  000060ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d90  00000000  00000000  0001df6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00004b0a  00000000  00000000  00023cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000898  00000000  00000000  00028808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000868  00000000  00000000  000290a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6bc  00000000  00000000  00029908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002ce3  00000000  00000000  00034fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001200  00000000  00000000  00037ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00038ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  00038fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line_str 00000097  00000000  00000000  00039020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000039ed  00000000  00000000  000390b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 00000271  00000000  00000000  0003caa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4804      	ldr	r0, [pc, #16]	@ (800019c <deregister_tm_clones+0x14>)
 800018a:	4b05      	ldr	r3, [pc, #20]	@ (80001a0 <deregister_tm_clones+0x18>)
 800018c:	b510      	push	{r4, lr}
 800018e:	4283      	cmp	r3, r0
 8000190:	d003      	beq.n	800019a <deregister_tm_clones+0x12>
 8000192:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d000      	beq.n	800019a <deregister_tm_clones+0x12>
 8000198:	4798      	blx	r3
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000060 	.word	0x20000060
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4806      	ldr	r0, [pc, #24]	@ (80001c4 <register_tm_clones+0x1c>)
 80001aa:	4907      	ldr	r1, [pc, #28]	@ (80001c8 <register_tm_clones+0x20>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	108b      	asrs	r3, r1, #2
 80001b0:	0fc9      	lsrs	r1, r1, #31
 80001b2:	18c9      	adds	r1, r1, r3
 80001b4:	b510      	push	{r4, lr}
 80001b6:	1049      	asrs	r1, r1, #1
 80001b8:	d003      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001ba:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <register_tm_clones+0x24>)
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d000      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001c0:	4798      	blx	r3
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c07      	ldr	r4, [pc, #28]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d109      	bne.n	80001ee <__do_global_dtors_aux+0x1e>
 80001da:	f7ff ffd5 	bl	8000188 <deregister_tm_clones>
 80001de:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <__do_global_dtors_aux+0x24>)
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x28>)
 80001e6:	e000      	b.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e8:	bf00      	nop
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800428c 	.word	0x0800428c

080001fc <frame_dummy>:
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <frame_dummy+0x18>)
 80001fe:	b510      	push	{r4, lr}
 8000200:	2b00      	cmp	r3, #0
 8000202:	d003      	beq.n	800020c <frame_dummy+0x10>
 8000204:	4904      	ldr	r1, [pc, #16]	@ (8000218 <frame_dummy+0x1c>)
 8000206:	4805      	ldr	r0, [pc, #20]	@ (800021c <frame_dummy+0x20>)
 8000208:	e000      	b.n	800020c <frame_dummy+0x10>
 800020a:	bf00      	nop
 800020c:	f7ff ffcc 	bl	80001a8 <register_tm_clones>
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800428c 	.word	0x0800428c

08000220 <__udivsi3>:
 8000220:	2200      	movs	r2, #0
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d374      	bcc.n	8000312 <__udivsi3+0xf2>
 8000228:	0903      	lsrs	r3, r0, #4
 800022a:	428b      	cmp	r3, r1
 800022c:	d35f      	bcc.n	80002ee <__udivsi3+0xce>
 800022e:	0a03      	lsrs	r3, r0, #8
 8000230:	428b      	cmp	r3, r1
 8000232:	d344      	bcc.n	80002be <__udivsi3+0x9e>
 8000234:	0b03      	lsrs	r3, r0, #12
 8000236:	428b      	cmp	r3, r1
 8000238:	d328      	bcc.n	800028c <__udivsi3+0x6c>
 800023a:	0c03      	lsrs	r3, r0, #16
 800023c:	428b      	cmp	r3, r1
 800023e:	d30d      	bcc.n	800025c <__udivsi3+0x3c>
 8000240:	22ff      	movs	r2, #255	@ 0xff
 8000242:	0209      	lsls	r1, r1, #8
 8000244:	ba12      	rev	r2, r2
 8000246:	0c03      	lsrs	r3, r0, #16
 8000248:	428b      	cmp	r3, r1
 800024a:	d302      	bcc.n	8000252 <__udivsi3+0x32>
 800024c:	1212      	asrs	r2, r2, #8
 800024e:	0209      	lsls	r1, r1, #8
 8000250:	d065      	beq.n	800031e <__udivsi3+0xfe>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d319      	bcc.n	800028c <__udivsi3+0x6c>
 8000258:	e000      	b.n	800025c <__udivsi3+0x3c>
 800025a:	0a09      	lsrs	r1, r1, #8
 800025c:	0bc3      	lsrs	r3, r0, #15
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x46>
 8000262:	03cb      	lsls	r3, r1, #15
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0b83      	lsrs	r3, r0, #14
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x52>
 800026e:	038b      	lsls	r3, r1, #14
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	0b43      	lsrs	r3, r0, #13
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__udivsi3+0x5e>
 800027a:	034b      	lsls	r3, r1, #13
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	0b03      	lsrs	r3, r0, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d301      	bcc.n	800028a <__udivsi3+0x6a>
 8000286:	030b      	lsls	r3, r1, #12
 8000288:	1ac0      	subs	r0, r0, r3
 800028a:	4152      	adcs	r2, r2
 800028c:	0ac3      	lsrs	r3, r0, #11
 800028e:	428b      	cmp	r3, r1
 8000290:	d301      	bcc.n	8000296 <__udivsi3+0x76>
 8000292:	02cb      	lsls	r3, r1, #11
 8000294:	1ac0      	subs	r0, r0, r3
 8000296:	4152      	adcs	r2, r2
 8000298:	0a83      	lsrs	r3, r0, #10
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__udivsi3+0x82>
 800029e:	028b      	lsls	r3, r1, #10
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	0a43      	lsrs	r3, r0, #9
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d301      	bcc.n	80002ae <__udivsi3+0x8e>
 80002aa:	024b      	lsls	r3, r1, #9
 80002ac:	1ac0      	subs	r0, r0, r3
 80002ae:	4152      	adcs	r2, r2
 80002b0:	0a03      	lsrs	r3, r0, #8
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d301      	bcc.n	80002ba <__udivsi3+0x9a>
 80002b6:	020b      	lsls	r3, r1, #8
 80002b8:	1ac0      	subs	r0, r0, r3
 80002ba:	4152      	adcs	r2, r2
 80002bc:	d2cd      	bcs.n	800025a <__udivsi3+0x3a>
 80002be:	09c3      	lsrs	r3, r0, #7
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xa8>
 80002c4:	01cb      	lsls	r3, r1, #7
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0983      	lsrs	r3, r0, #6
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__udivsi3+0xb4>
 80002d0:	018b      	lsls	r3, r1, #6
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0943      	lsrs	r3, r0, #5
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__udivsi3+0xc0>
 80002dc:	014b      	lsls	r3, r1, #5
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0903      	lsrs	r3, r0, #4
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__udivsi3+0xcc>
 80002e8:	010b      	lsls	r3, r1, #4
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	08c3      	lsrs	r3, r0, #3
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__udivsi3+0xd8>
 80002f4:	00cb      	lsls	r3, r1, #3
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0883      	lsrs	r3, r0, #2
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__udivsi3+0xe4>
 8000300:	008b      	lsls	r3, r1, #2
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0843      	lsrs	r3, r0, #1
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__udivsi3+0xf0>
 800030c:	004b      	lsls	r3, r1, #1
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	1a41      	subs	r1, r0, r1
 8000314:	d200      	bcs.n	8000318 <__udivsi3+0xf8>
 8000316:	4601      	mov	r1, r0
 8000318:	4152      	adcs	r2, r2
 800031a:	4610      	mov	r0, r2
 800031c:	4770      	bx	lr
 800031e:	e7ff      	b.n	8000320 <__udivsi3+0x100>
 8000320:	b501      	push	{r0, lr}
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f806 	bl	8000334 <__aeabi_idiv0>
 8000328:	bd02      	pop	{r1, pc}
 800032a:	46c0      	nop			@ (mov r8, r8)

0800032c <__aeabi_uidivmod>:
 800032c:	2900      	cmp	r1, #0
 800032e:	d0f7      	beq.n	8000320 <__udivsi3+0x100>
 8000330:	e776      	b.n	8000220 <__udivsi3>
 8000332:	4770      	bx	lr

08000334 <__aeabi_idiv0>:
 8000334:	4770      	bx	lr
 8000336:	46c0      	nop			@ (mov r8, r8)

08000338 <srand>:
 8000338:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <srand+0x48>)
 800033a:	b570      	push	{r4, r5, r6, lr}
 800033c:	681c      	ldr	r4, [r3, #0]
 800033e:	0005      	movs	r5, r0
 8000340:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <srand+0x16>
 8000346:	2200      	movs	r2, #0
 8000348:	611d      	str	r5, [r3, #16]
 800034a:	615a      	str	r2, [r3, #20]
 800034c:	bd70      	pop	{r4, r5, r6, pc}
 800034e:	2018      	movs	r0, #24
 8000350:	f000 f928 	bl	80005a4 <malloc>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	6320      	str	r0, [r4, #48]	@ 0x30
 8000358:	d00c      	beq.n	8000374 <srand+0x3c>
 800035a:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <srand+0x4c>)
 800035c:	2100      	movs	r1, #0
 800035e:	6002      	str	r2, [r0, #0]
 8000360:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <srand+0x50>)
 8000362:	6042      	str	r2, [r0, #4]
 8000364:	4a09      	ldr	r2, [pc, #36]	@ (800038c <srand+0x54>)
 8000366:	6082      	str	r2, [r0, #8]
 8000368:	220b      	movs	r2, #11
 800036a:	8182      	strh	r2, [r0, #12]
 800036c:	2001      	movs	r0, #1
 800036e:	6118      	str	r0, [r3, #16]
 8000370:	6159      	str	r1, [r3, #20]
 8000372:	e7e8      	b.n	8000346 <srand+0xe>
 8000374:	2200      	movs	r2, #0
 8000376:	2146      	movs	r1, #70	@ 0x46
 8000378:	4b05      	ldr	r3, [pc, #20]	@ (8000390 <srand+0x58>)
 800037a:	4806      	ldr	r0, [pc, #24]	@ (8000394 <srand+0x5c>)
 800037c:	f000 f850 	bl	8000420 <__assert_func>
 8000380:	20000004 	.word	0x20000004
 8000384:	abcd330e 	.word	0xabcd330e
 8000388:	e66d1234 	.word	0xe66d1234
 800038c:	0005deec 	.word	0x0005deec
 8000390:	08004638 	.word	0x08004638
 8000394:	08004650 	.word	0x08004650

08000398 <rand>:
 8000398:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <rand+0x64>)
 800039a:	b570      	push	{r4, r5, r6, lr}
 800039c:	681d      	ldr	r5, [r3, #0]
 800039e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80003a0:	2c00      	cmp	r4, #0
 80003a2:	d00e      	beq.n	80003c2 <rand+0x2a>
 80003a4:	6920      	ldr	r0, [r4, #16]
 80003a6:	6961      	ldr	r1, [r4, #20]
 80003a8:	4a15      	ldr	r2, [pc, #84]	@ (8000400 <rand+0x68>)
 80003aa:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <rand+0x6c>)
 80003ac:	f001 fec2 	bl	8002134 <__aeabi_lmul>
 80003b0:	2201      	movs	r2, #1
 80003b2:	2300      	movs	r3, #0
 80003b4:	1812      	adds	r2, r2, r0
 80003b6:	414b      	adcs	r3, r1
 80003b8:	0058      	lsls	r0, r3, #1
 80003ba:	0840      	lsrs	r0, r0, #1
 80003bc:	6122      	str	r2, [r4, #16]
 80003be:	6163      	str	r3, [r4, #20]
 80003c0:	bd70      	pop	{r4, r5, r6, pc}
 80003c2:	2018      	movs	r0, #24
 80003c4:	f000 f8ee 	bl	80005a4 <malloc>
 80003c8:	1e04      	subs	r4, r0, #0
 80003ca:	6328      	str	r0, [r5, #48]	@ 0x30
 80003cc:	d00f      	beq.n	80003ee <rand+0x56>
 80003ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <rand+0x70>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	6003      	str	r3, [r0, #0]
 80003d4:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <rand+0x74>)
 80003d6:	6043      	str	r3, [r0, #4]
 80003d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <rand+0x78>)
 80003da:	6083      	str	r3, [r0, #8]
 80003dc:	230b      	movs	r3, #11
 80003de:	8183      	strh	r3, [r0, #12]
 80003e0:	2300      	movs	r3, #0
 80003e2:	6102      	str	r2, [r0, #16]
 80003e4:	6143      	str	r3, [r0, #20]
 80003e6:	4807      	ldr	r0, [pc, #28]	@ (8000404 <rand+0x6c>)
 80003e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <rand+0x7c>)
 80003ea:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <rand+0x6c>)
 80003ec:	e7e6      	b.n	80003bc <rand+0x24>
 80003ee:	2200      	movs	r2, #0
 80003f0:	2152      	movs	r1, #82	@ 0x52
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <rand+0x80>)
 80003f4:	4809      	ldr	r0, [pc, #36]	@ (800041c <rand+0x84>)
 80003f6:	f000 f813 	bl	8000420 <__assert_func>
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	20000004 	.word	0x20000004
 8000400:	4c957f2d 	.word	0x4c957f2d
 8000404:	5851f42d 	.word	0x5851f42d
 8000408:	abcd330e 	.word	0xabcd330e
 800040c:	e66d1234 	.word	0xe66d1234
 8000410:	0005deec 	.word	0x0005deec
 8000414:	4c957f2e 	.word	0x4c957f2e
 8000418:	08004638 	.word	0x08004638
 800041c:	08004650 	.word	0x08004650

08000420 <__assert_func>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	0014      	movs	r4, r2
 8000424:	001a      	movs	r2, r3
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <__assert_func+0x30>)
 8000428:	0006      	movs	r6, r0
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	b084      	sub	sp, #16
 800042e:	68d8      	ldr	r0, [r3, #12]
 8000430:	2c00      	cmp	r4, #0
 8000432:	d00a      	beq.n	800044a <__assert_func+0x2a>
 8000434:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <__assert_func+0x34>)
 8000436:	4d08      	ldr	r5, [pc, #32]	@ (8000458 <__assert_func+0x38>)
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	9100      	str	r1, [sp, #0]
 800043c:	0033      	movs	r3, r6
 800043e:	0029      	movs	r1, r5
 8000440:	9402      	str	r4, [sp, #8]
 8000442:	f000 f8cf 	bl	80005e4 <fiprintf>
 8000446:	f000 f835 	bl	80004b4 <abort>
 800044a:	4b04      	ldr	r3, [pc, #16]	@ (800045c <__assert_func+0x3c>)
 800044c:	001c      	movs	r4, r3
 800044e:	e7f2      	b.n	8000436 <__assert_func+0x16>
 8000450:	20000004 	.word	0x20000004
 8000454:	0800467c 	.word	0x0800467c
 8000458:	0800468c 	.word	0x0800468c
 800045c:	08004688 	.word	0x08004688

08000460 <__assert>:
 8000460:	0013      	movs	r3, r2
 8000462:	b510      	push	{r4, lr}
 8000464:	2200      	movs	r2, #0
 8000466:	f7ff ffdb 	bl	8000420 <__assert_func>
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <__libc_init_array+0x38>)
 8000470:	4d0d      	ldr	r5, [pc, #52]	@ (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b5e      	subs	r6, r3, r5
 8000474:	10b6      	asrs	r6, r6, #2
 8000476:	42ab      	cmp	r3, r5
 8000478:	d005      	beq.n	8000486 <__libc_init_array+0x1a>
 800047a:	2400      	movs	r4, #0
 800047c:	cd08      	ldmia	r5!, {r3}
 800047e:	3401      	adds	r4, #1
 8000480:	4798      	blx	r3
 8000482:	42a6      	cmp	r6, r4
 8000484:	d8fa      	bhi.n	800047c <__libc_init_array+0x10>
 8000486:	f003 ff01 	bl	800428c <_init>
 800048a:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <__libc_init_array+0x40>)
 800048c:	4d08      	ldr	r5, [pc, #32]	@ (80004b0 <__libc_init_array+0x44>)
 800048e:	1b5e      	subs	r6, r3, r5
 8000490:	10b6      	asrs	r6, r6, #2
 8000492:	42ab      	cmp	r3, r5
 8000494:	d005      	beq.n	80004a2 <__libc_init_array+0x36>
 8000496:	2400      	movs	r4, #0
 8000498:	cd08      	ldmia	r5!, {r3}
 800049a:	3401      	adds	r4, #1
 800049c:	4798      	blx	r3
 800049e:	42a6      	cmp	r6, r4
 80004a0:	d8fa      	bhi.n	8000498 <__libc_init_array+0x2c>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	080046f8 	.word	0x080046f8
 80004a8:	080046f8 	.word	0x080046f8
 80004ac:	080046fc 	.word	0x080046fc
 80004b0:	080046f8 	.word	0x080046f8

080004b4 <abort>:
 80004b4:	2006      	movs	r0, #6
 80004b6:	b510      	push	{r4, lr}
 80004b8:	f000 fcf8 	bl	8000eac <raise>
 80004bc:	2001      	movs	r0, #1
 80004be:	f001 febd 	bl	800223c <_exit>
 80004c2:	46c0      	nop			@ (mov r8, r8)

080004c4 <time>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	2501      	movs	r5, #1
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <time+0x34>)
 80004ca:	b084      	sub	sp, #16
 80004cc:	426d      	negs	r5, r5
 80004ce:	4669      	mov	r1, sp
 80004d0:	0006      	movs	r6, r0
 80004d2:	2200      	movs	r2, #0
 80004d4:	6818      	ldr	r0, [r3, #0]
 80004d6:	9500      	str	r5, [sp, #0]
 80004d8:	9501      	str	r5, [sp, #4]
 80004da:	f000 fab9 	bl	8000a50 <_gettimeofday_r>
 80004de:	0029      	movs	r1, r5
 80004e0:	2800      	cmp	r0, #0
 80004e2:	db01      	blt.n	80004e8 <time+0x24>
 80004e4:	9d00      	ldr	r5, [sp, #0]
 80004e6:	9901      	ldr	r1, [sp, #4]
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d001      	beq.n	80004f0 <time+0x2c>
 80004ec:	6035      	str	r5, [r6, #0]
 80004ee:	6071      	str	r1, [r6, #4]
 80004f0:	0028      	movs	r0, r5
 80004f2:	b004      	add	sp, #16
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	20000004 	.word	0x20000004

080004fc <memset>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	0005      	movs	r5, r0
 8000500:	0783      	lsls	r3, r0, #30
 8000502:	d049      	beq.n	8000598 <memset+0x9c>
 8000504:	1e54      	subs	r4, r2, #1
 8000506:	2a00      	cmp	r2, #0
 8000508:	d045      	beq.n	8000596 <memset+0x9a>
 800050a:	0003      	movs	r3, r0
 800050c:	2603      	movs	r6, #3
 800050e:	b2ca      	uxtb	r2, r1
 8000510:	e002      	b.n	8000518 <memset+0x1c>
 8000512:	3501      	adds	r5, #1
 8000514:	3c01      	subs	r4, #1
 8000516:	d33e      	bcc.n	8000596 <memset+0x9a>
 8000518:	3301      	adds	r3, #1
 800051a:	702a      	strb	r2, [r5, #0]
 800051c:	4233      	tst	r3, r6
 800051e:	d1f8      	bne.n	8000512 <memset+0x16>
 8000520:	2c03      	cmp	r4, #3
 8000522:	d930      	bls.n	8000586 <memset+0x8a>
 8000524:	22ff      	movs	r2, #255	@ 0xff
 8000526:	400a      	ands	r2, r1
 8000528:	0215      	lsls	r5, r2, #8
 800052a:	18ad      	adds	r5, r5, r2
 800052c:	042a      	lsls	r2, r5, #16
 800052e:	18ad      	adds	r5, r5, r2
 8000530:	2c0f      	cmp	r4, #15
 8000532:	d934      	bls.n	800059e <memset+0xa2>
 8000534:	0027      	movs	r7, r4
 8000536:	3f10      	subs	r7, #16
 8000538:	093f      	lsrs	r7, r7, #4
 800053a:	013e      	lsls	r6, r7, #4
 800053c:	46b4      	mov	ip, r6
 800053e:	001e      	movs	r6, r3
 8000540:	001a      	movs	r2, r3
 8000542:	3610      	adds	r6, #16
 8000544:	4466      	add	r6, ip
 8000546:	6015      	str	r5, [r2, #0]
 8000548:	6055      	str	r5, [r2, #4]
 800054a:	6095      	str	r5, [r2, #8]
 800054c:	60d5      	str	r5, [r2, #12]
 800054e:	3210      	adds	r2, #16
 8000550:	4296      	cmp	r6, r2
 8000552:	d1f8      	bne.n	8000546 <memset+0x4a>
 8000554:	3701      	adds	r7, #1
 8000556:	013f      	lsls	r7, r7, #4
 8000558:	19db      	adds	r3, r3, r7
 800055a:	270f      	movs	r7, #15
 800055c:	220c      	movs	r2, #12
 800055e:	4027      	ands	r7, r4
 8000560:	4022      	ands	r2, r4
 8000562:	003c      	movs	r4, r7
 8000564:	2a00      	cmp	r2, #0
 8000566:	d00e      	beq.n	8000586 <memset+0x8a>
 8000568:	1f3e      	subs	r6, r7, #4
 800056a:	08b6      	lsrs	r6, r6, #2
 800056c:	00b4      	lsls	r4, r6, #2
 800056e:	46a4      	mov	ip, r4
 8000570:	001a      	movs	r2, r3
 8000572:	1d1c      	adds	r4, r3, #4
 8000574:	4464      	add	r4, ip
 8000576:	c220      	stmia	r2!, {r5}
 8000578:	42a2      	cmp	r2, r4
 800057a:	d1fc      	bne.n	8000576 <memset+0x7a>
 800057c:	2403      	movs	r4, #3
 800057e:	3601      	adds	r6, #1
 8000580:	00b6      	lsls	r6, r6, #2
 8000582:	199b      	adds	r3, r3, r6
 8000584:	403c      	ands	r4, r7
 8000586:	2c00      	cmp	r4, #0
 8000588:	d005      	beq.n	8000596 <memset+0x9a>
 800058a:	b2c9      	uxtb	r1, r1
 800058c:	191c      	adds	r4, r3, r4
 800058e:	7019      	strb	r1, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	429c      	cmp	r4, r3
 8000594:	d1fb      	bne.n	800058e <memset+0x92>
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000598:	0003      	movs	r3, r0
 800059a:	0014      	movs	r4, r2
 800059c:	e7c0      	b.n	8000520 <memset+0x24>
 800059e:	0027      	movs	r7, r4
 80005a0:	e7e2      	b.n	8000568 <memset+0x6c>
 80005a2:	46c0      	nop			@ (mov r8, r8)

080005a4 <malloc>:
 80005a4:	b510      	push	{r4, lr}
 80005a6:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <malloc+0x10>)
 80005a8:	0001      	movs	r1, r0
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	f000 ff42 	bl	8001434 <_malloc_r>
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	20000004 	.word	0x20000004

080005b8 <free>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	4b03      	ldr	r3, [pc, #12]	@ (80005c8 <free+0x10>)
 80005bc:	0001      	movs	r1, r0
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	f000 ffc0 	bl	8001544 <_free_r>
 80005c4:	bd10      	pop	{r4, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	20000004 	.word	0x20000004

080005cc <_fiprintf_r>:
 80005cc:	b40c      	push	{r2, r3}
 80005ce:	b500      	push	{lr}
 80005d0:	b083      	sub	sp, #12
 80005d2:	ab04      	add	r3, sp, #16
 80005d4:	cb04      	ldmia	r3!, {r2}
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	f000 f896 	bl	8000708 <_vfiprintf_r>
 80005dc:	b003      	add	sp, #12
 80005de:	bc08      	pop	{r3}
 80005e0:	b002      	add	sp, #8
 80005e2:	4718      	bx	r3

080005e4 <fiprintf>:
 80005e4:	b40e      	push	{r1, r2, r3}
 80005e6:	b500      	push	{lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	ab03      	add	r3, sp, #12
 80005ec:	0001      	movs	r1, r0
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <fiprintf+0x20>)
 80005f0:	cb04      	ldmia	r3!, {r2}
 80005f2:	6800      	ldr	r0, [r0, #0]
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	f000 f887 	bl	8000708 <_vfiprintf_r>
 80005fa:	b002      	add	sp, #8
 80005fc:	bc08      	pop	{r3}
 80005fe:	b003      	add	sp, #12
 8000600:	4718      	bx	r3
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000004 	.word	0x20000004

08000608 <memcpy>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	0005      	movs	r5, r0
 800060c:	2a0f      	cmp	r2, #15
 800060e:	d931      	bls.n	8000674 <memcpy+0x6c>
 8000610:	2703      	movs	r7, #3
 8000612:	003e      	movs	r6, r7
 8000614:	430d      	orrs	r5, r1
 8000616:	000c      	movs	r4, r1
 8000618:	0003      	movs	r3, r0
 800061a:	402e      	ands	r6, r5
 800061c:	422f      	tst	r7, r5
 800061e:	d134      	bne.n	800068a <memcpy+0x82>
 8000620:	0015      	movs	r5, r2
 8000622:	3d10      	subs	r5, #16
 8000624:	092d      	lsrs	r5, r5, #4
 8000626:	46ac      	mov	ip, r5
 8000628:	012f      	lsls	r7, r5, #4
 800062a:	183f      	adds	r7, r7, r0
 800062c:	6865      	ldr	r5, [r4, #4]
 800062e:	605d      	str	r5, [r3, #4]
 8000630:	68a5      	ldr	r5, [r4, #8]
 8000632:	609d      	str	r5, [r3, #8]
 8000634:	68e5      	ldr	r5, [r4, #12]
 8000636:	60dd      	str	r5, [r3, #12]
 8000638:	6825      	ldr	r5, [r4, #0]
 800063a:	3410      	adds	r4, #16
 800063c:	601d      	str	r5, [r3, #0]
 800063e:	001d      	movs	r5, r3
 8000640:	3310      	adds	r3, #16
 8000642:	42bd      	cmp	r5, r7
 8000644:	d1f2      	bne.n	800062c <memcpy+0x24>
 8000646:	4665      	mov	r5, ip
 8000648:	230f      	movs	r3, #15
 800064a:	240c      	movs	r4, #12
 800064c:	3501      	adds	r5, #1
 800064e:	012d      	lsls	r5, r5, #4
 8000650:	1949      	adds	r1, r1, r5
 8000652:	4013      	ands	r3, r2
 8000654:	1945      	adds	r5, r0, r5
 8000656:	4214      	tst	r4, r2
 8000658:	d01a      	beq.n	8000690 <memcpy+0x88>
 800065a:	3b04      	subs	r3, #4
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	3301      	adds	r3, #1
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	598c      	ldr	r4, [r1, r6]
 8000664:	51ac      	str	r4, [r5, r6]
 8000666:	3604      	adds	r6, #4
 8000668:	429e      	cmp	r6, r3
 800066a:	d1fa      	bne.n	8000662 <memcpy+0x5a>
 800066c:	2303      	movs	r3, #3
 800066e:	19ad      	adds	r5, r5, r6
 8000670:	1989      	adds	r1, r1, r6
 8000672:	401a      	ands	r2, r3
 8000674:	1e56      	subs	r6, r2, #1
 8000676:	2a00      	cmp	r2, #0
 8000678:	d006      	beq.n	8000688 <memcpy+0x80>
 800067a:	2300      	movs	r3, #0
 800067c:	5ccc      	ldrb	r4, [r1, r3]
 800067e:	001a      	movs	r2, r3
 8000680:	54ec      	strb	r4, [r5, r3]
 8000682:	3301      	adds	r3, #1
 8000684:	4296      	cmp	r6, r2
 8000686:	d1f9      	bne.n	800067c <memcpy+0x74>
 8000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068a:	0005      	movs	r5, r0
 800068c:	1e56      	subs	r6, r2, #1
 800068e:	e7f4      	b.n	800067a <memcpy+0x72>
 8000690:	001a      	movs	r2, r3
 8000692:	e7ef      	b.n	8000674 <memcpy+0x6c>

08000694 <__sfputc_r>:
 8000694:	6893      	ldr	r3, [r2, #8]
 8000696:	b510      	push	{r4, lr}
 8000698:	3b01      	subs	r3, #1
 800069a:	6093      	str	r3, [r2, #8]
 800069c:	2b00      	cmp	r3, #0
 800069e:	da04      	bge.n	80006aa <__sfputc_r+0x16>
 80006a0:	6994      	ldr	r4, [r2, #24]
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	db07      	blt.n	80006b6 <__sfputc_r+0x22>
 80006a6:	290a      	cmp	r1, #10
 80006a8:	d005      	beq.n	80006b6 <__sfputc_r+0x22>
 80006aa:	6813      	ldr	r3, [r2, #0]
 80006ac:	1c58      	adds	r0, r3, #1
 80006ae:	6010      	str	r0, [r2, #0]
 80006b0:	0008      	movs	r0, r1
 80006b2:	7019      	strb	r1, [r3, #0]
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	f000 f971 	bl	800099c <__swbuf_r>
 80006ba:	e7fb      	b.n	80006b4 <__sfputc_r+0x20>

080006bc <__sfputs_r>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	0006      	movs	r6, r0
 80006c0:	000f      	movs	r7, r1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00d      	beq.n	80006e2 <__sfputs_r+0x26>
 80006c6:	0014      	movs	r4, r2
 80006c8:	18d5      	adds	r5, r2, r3
 80006ca:	e002      	b.n	80006d2 <__sfputs_r+0x16>
 80006cc:	3401      	adds	r4, #1
 80006ce:	42ac      	cmp	r4, r5
 80006d0:	d007      	beq.n	80006e2 <__sfputs_r+0x26>
 80006d2:	003a      	movs	r2, r7
 80006d4:	0030      	movs	r0, r6
 80006d6:	7821      	ldrb	r1, [r4, #0]
 80006d8:	f7ff ffdc 	bl	8000694 <__sfputc_r>
 80006dc:	1c43      	adds	r3, r0, #1
 80006de:	d1f5      	bne.n	80006cc <__sfputs_r+0x10>
 80006e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006e2:	2000      	movs	r0, #0
 80006e4:	e7fc      	b.n	80006e0 <__sfputs_r+0x24>
 80006e6:	46c0      	nop			@ (mov r8, r8)

080006e8 <__sprint_r>:
 80006e8:	b510      	push	{r4, lr}
 80006ea:	0014      	movs	r4, r2
 80006ec:	6892      	ldr	r2, [r2, #8]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	d005      	beq.n	8000700 <__sprint_r+0x18>
 80006f4:	0022      	movs	r2, r4
 80006f6:	f000 f9bf 	bl	8000a78 <__sfvwrite_r>
 80006fa:	2200      	movs	r2, #0
 80006fc:	0003      	movs	r3, r0
 80006fe:	60a2      	str	r2, [r4, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	0018      	movs	r0, r3
 8000704:	6062      	str	r2, [r4, #4]
 8000706:	bd10      	pop	{r4, pc}

08000708 <_vfiprintf_r>:
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	464e      	mov	r6, r9
 800070c:	4645      	mov	r5, r8
 800070e:	46de      	mov	lr, fp
 8000710:	4657      	mov	r7, sl
 8000712:	b5e0      	push	{r5, r6, r7, lr}
 8000714:	4681      	mov	r9, r0
 8000716:	4688      	mov	r8, r1
 8000718:	0014      	movs	r4, r2
 800071a:	001e      	movs	r6, r3
 800071c:	b09f      	sub	sp, #124	@ 0x7c
 800071e:	2800      	cmp	r0, #0
 8000720:	d003      	beq.n	800072a <_vfiprintf_r+0x22>
 8000722:	6a03      	ldr	r3, [r0, #32]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <_vfiprintf_r+0x22>
 8000728:	e11f      	b.n	800096a <_vfiprintf_r+0x262>
 800072a:	4643      	mov	r3, r8
 800072c:	899b      	ldrh	r3, [r3, #12]
 800072e:	071b      	lsls	r3, r3, #28
 8000730:	d400      	bmi.n	8000734 <_vfiprintf_r+0x2c>
 8000732:	e08f      	b.n	8000854 <_vfiprintf_r+0x14c>
 8000734:	4643      	mov	r3, r8
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d100      	bne.n	800073e <_vfiprintf_r+0x36>
 800073c:	e08a      	b.n	8000854 <_vfiprintf_r+0x14c>
 800073e:	2300      	movs	r3, #0
 8000740:	ad06      	add	r5, sp, #24
 8000742:	616b      	str	r3, [r5, #20]
 8000744:	3320      	adds	r3, #32
 8000746:	766b      	strb	r3, [r5, #25]
 8000748:	3310      	adds	r3, #16
 800074a:	76ab      	strb	r3, [r5, #26]
 800074c:	4653      	mov	r3, sl
 800074e:	46a3      	mov	fp, r4
 8000750:	4f87      	ldr	r7, [pc, #540]	@ (8000970 <_vfiprintf_r+0x268>)
 8000752:	9605      	str	r6, [sp, #20]
 8000754:	9303      	str	r3, [sp, #12]
 8000756:	465b      	mov	r3, fp
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d100      	bne.n	8000760 <_vfiprintf_r+0x58>
 800075e:	e09b      	b.n	8000898 <_vfiprintf_r+0x190>
 8000760:	465c      	mov	r4, fp
 8000762:	e003      	b.n	800076c <_vfiprintf_r+0x64>
 8000764:	7863      	ldrb	r3, [r4, #1]
 8000766:	3401      	adds	r4, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d07d      	beq.n	8000868 <_vfiprintf_r+0x160>
 800076c:	2b25      	cmp	r3, #37	@ 0x25
 800076e:	d1f9      	bne.n	8000764 <_vfiprintf_r+0x5c>
 8000770:	465b      	mov	r3, fp
 8000772:	1ae3      	subs	r3, r4, r3
 8000774:	469a      	mov	sl, r3
 8000776:	455c      	cmp	r4, fp
 8000778:	d17b      	bne.n	8000872 <_vfiprintf_r+0x16a>
 800077a:	7823      	ldrb	r3, [r4, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d100      	bne.n	8000782 <_vfiprintf_r+0x7a>
 8000780:	e08a      	b.n	8000898 <_vfiprintf_r+0x190>
 8000782:	2301      	movs	r3, #1
 8000784:	2200      	movs	r2, #0
 8000786:	425b      	negs	r3, r3
 8000788:	9206      	str	r2, [sp, #24]
 800078a:	9307      	str	r3, [sp, #28]
 800078c:	2200      	movs	r2, #0
 800078e:	2300      	movs	r3, #0
 8000790:	9208      	str	r2, [sp, #32]
 8000792:	9309      	str	r3, [sp, #36]	@ 0x24
 8000794:	2300      	movs	r3, #0
 8000796:	3243      	adds	r2, #67	@ 0x43
 8000798:	54ab      	strb	r3, [r5, r2]
 800079a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800079c:	3301      	adds	r3, #1
 800079e:	469b      	mov	fp, r3
 80007a0:	3401      	adds	r4, #1
 80007a2:	e006      	b.n	80007b2 <_vfiprintf_r+0xaa>
 80007a4:	465a      	mov	r2, fp
 80007a6:	1bc0      	subs	r0, r0, r7
 80007a8:	4082      	lsls	r2, r0
 80007aa:	001c      	movs	r4, r3
 80007ac:	6829      	ldr	r1, [r5, #0]
 80007ae:	430a      	orrs	r2, r1
 80007b0:	602a      	str	r2, [r5, #0]
 80007b2:	2205      	movs	r2, #5
 80007b4:	0038      	movs	r0, r7
 80007b6:	7821      	ldrb	r1, [r4, #0]
 80007b8:	f001 fa9c 	bl	8001cf4 <memchr>
 80007bc:	1c63      	adds	r3, r4, #1
 80007be:	001e      	movs	r6, r3
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d1ef      	bne.n	80007a4 <_vfiprintf_r+0x9c>
 80007c4:	682a      	ldr	r2, [r5, #0]
 80007c6:	06d1      	lsls	r1, r2, #27
 80007c8:	d502      	bpl.n	80007d0 <_vfiprintf_r+0xc8>
 80007ca:	2143      	movs	r1, #67	@ 0x43
 80007cc:	3020      	adds	r0, #32
 80007ce:	5468      	strb	r0, [r5, r1]
 80007d0:	0711      	lsls	r1, r2, #28
 80007d2:	d502      	bpl.n	80007da <_vfiprintf_r+0xd2>
 80007d4:	2143      	movs	r1, #67	@ 0x43
 80007d6:	202b      	movs	r0, #43	@ 0x2b
 80007d8:	5468      	strb	r0, [r5, r1]
 80007da:	7821      	ldrb	r1, [r4, #0]
 80007dc:	292a      	cmp	r1, #42	@ 0x2a
 80007de:	d167      	bne.n	80008b0 <_vfiprintf_r+0x1a8>
 80007e0:	9b05      	ldr	r3, [sp, #20]
 80007e2:	1d19      	adds	r1, r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	9105      	str	r1, [sp, #20]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	da00      	bge.n	80007ee <_vfiprintf_r+0xe6>
 80007ec:	e098      	b.n	8000920 <_vfiprintf_r+0x218>
 80007ee:	60eb      	str	r3, [r5, #12]
 80007f0:	7861      	ldrb	r1, [r4, #1]
 80007f2:	292e      	cmp	r1, #46	@ 0x2e
 80007f4:	d100      	bne.n	80007f8 <_vfiprintf_r+0xf0>
 80007f6:	e072      	b.n	80008de <_vfiprintf_r+0x1d6>
 80007f8:	4c5e      	ldr	r4, [pc, #376]	@ (8000974 <_vfiprintf_r+0x26c>)
 80007fa:	2203      	movs	r2, #3
 80007fc:	0020      	movs	r0, r4
 80007fe:	f001 fa79 	bl	8001cf4 <memchr>
 8000802:	2800      	cmp	r0, #0
 8000804:	d006      	beq.n	8000814 <_vfiprintf_r+0x10c>
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	1b00      	subs	r0, r0, r4
 800080a:	4083      	lsls	r3, r0
 800080c:	682a      	ldr	r2, [r5, #0]
 800080e:	3601      	adds	r6, #1
 8000810:	4313      	orrs	r3, r2
 8000812:	602b      	str	r3, [r5, #0]
 8000814:	7831      	ldrb	r1, [r6, #0]
 8000816:	1c73      	adds	r3, r6, #1
 8000818:	2206      	movs	r2, #6
 800081a:	4857      	ldr	r0, [pc, #348]	@ (8000978 <_vfiprintf_r+0x270>)
 800081c:	469b      	mov	fp, r3
 800081e:	7629      	strb	r1, [r5, #24]
 8000820:	f001 fa68 	bl	8001cf4 <memchr>
 8000824:	2800      	cmp	r0, #0
 8000826:	d100      	bne.n	800082a <_vfiprintf_r+0x122>
 8000828:	e080      	b.n	800092c <_vfiprintf_r+0x224>
 800082a:	4b54      	ldr	r3, [pc, #336]	@ (800097c <_vfiprintf_r+0x274>)
 800082c:	2b00      	cmp	r3, #0
 800082e:	d067      	beq.n	8000900 <_vfiprintf_r+0x1f8>
 8000830:	aa05      	add	r2, sp, #20
 8000832:	9200      	str	r2, [sp, #0]
 8000834:	0029      	movs	r1, r5
 8000836:	4642      	mov	r2, r8
 8000838:	4648      	mov	r0, r9
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <_vfiprintf_r+0x278>)
 800083c:	e000      	b.n	8000840 <_vfiprintf_r+0x138>
 800083e:	bf00      	nop
 8000840:	9003      	str	r0, [sp, #12]
 8000842:	9b03      	ldr	r3, [sp, #12]
 8000844:	3301      	adds	r3, #1
 8000846:	d027      	beq.n	8000898 <_vfiprintf_r+0x190>
 8000848:	9a03      	ldr	r2, [sp, #12]
 800084a:	696b      	ldr	r3, [r5, #20]
 800084c:	4694      	mov	ip, r2
 800084e:	4463      	add	r3, ip
 8000850:	616b      	str	r3, [r5, #20]
 8000852:	e780      	b.n	8000756 <_vfiprintf_r+0x4e>
 8000854:	4641      	mov	r1, r8
 8000856:	4648      	mov	r0, r9
 8000858:	f000 ff4a 	bl	80016f0 <__swsetup_r>
 800085c:	2800      	cmp	r0, #0
 800085e:	d100      	bne.n	8000862 <_vfiprintf_r+0x15a>
 8000860:	e76d      	b.n	800073e <_vfiprintf_r+0x36>
 8000862:	2001      	movs	r0, #1
 8000864:	4240      	negs	r0, r0
 8000866:	e01c      	b.n	80008a2 <_vfiprintf_r+0x19a>
 8000868:	465b      	mov	r3, fp
 800086a:	1ae3      	subs	r3, r4, r3
 800086c:	469a      	mov	sl, r3
 800086e:	455c      	cmp	r4, fp
 8000870:	d012      	beq.n	8000898 <_vfiprintf_r+0x190>
 8000872:	003b      	movs	r3, r7
 8000874:	2600      	movs	r6, #0
 8000876:	4647      	mov	r7, r8
 8000878:	46a0      	mov	r8, r4
 800087a:	464c      	mov	r4, r9
 800087c:	4699      	mov	r9, r3
 800087e:	e002      	b.n	8000886 <_vfiprintf_r+0x17e>
 8000880:	3601      	adds	r6, #1
 8000882:	45b2      	cmp	sl, r6
 8000884:	d943      	bls.n	800090e <_vfiprintf_r+0x206>
 8000886:	465b      	mov	r3, fp
 8000888:	003a      	movs	r2, r7
 800088a:	0020      	movs	r0, r4
 800088c:	5d99      	ldrb	r1, [r3, r6]
 800088e:	f7ff ff01 	bl	8000694 <__sfputc_r>
 8000892:	3001      	adds	r0, #1
 8000894:	d1f4      	bne.n	8000880 <_vfiprintf_r+0x178>
 8000896:	46b8      	mov	r8, r7
 8000898:	4643      	mov	r3, r8
 800089a:	899b      	ldrh	r3, [r3, #12]
 800089c:	065b      	lsls	r3, r3, #25
 800089e:	d4e0      	bmi.n	8000862 <_vfiprintf_r+0x15a>
 80008a0:	6968      	ldr	r0, [r5, #20]
 80008a2:	b01f      	add	sp, #124	@ 0x7c
 80008a4:	bcf0      	pop	{r4, r5, r6, r7}
 80008a6:	46bb      	mov	fp, r7
 80008a8:	46b2      	mov	sl, r6
 80008aa:	46a9      	mov	r9, r5
 80008ac:	46a0      	mov	r8, r4
 80008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b0:	0008      	movs	r0, r1
 80008b2:	3830      	subs	r0, #48	@ 0x30
 80008b4:	0026      	movs	r6, r4
 80008b6:	2809      	cmp	r0, #9
 80008b8:	d89b      	bhi.n	80007f2 <_vfiprintf_r+0xea>
 80008ba:	68ea      	ldr	r2, [r5, #12]
 80008bc:	0014      	movs	r4, r2
 80008be:	e000      	b.n	80008c2 <_vfiprintf_r+0x1ba>
 80008c0:	3301      	adds	r3, #1
 80008c2:	00a2      	lsls	r2, r4, #2
 80008c4:	1912      	adds	r2, r2, r4
 80008c6:	7819      	ldrb	r1, [r3, #0]
 80008c8:	0052      	lsls	r2, r2, #1
 80008ca:	1814      	adds	r4, r2, r0
 80008cc:	0008      	movs	r0, r1
 80008ce:	3830      	subs	r0, #48	@ 0x30
 80008d0:	2809      	cmp	r0, #9
 80008d2:	d9f5      	bls.n	80008c0 <_vfiprintf_r+0x1b8>
 80008d4:	001e      	movs	r6, r3
 80008d6:	60ec      	str	r4, [r5, #12]
 80008d8:	292e      	cmp	r1, #46	@ 0x2e
 80008da:	d000      	beq.n	80008de <_vfiprintf_r+0x1d6>
 80008dc:	e78c      	b.n	80007f8 <_vfiprintf_r+0xf0>
 80008de:	7871      	ldrb	r1, [r6, #1]
 80008e0:	292a      	cmp	r1, #42	@ 0x2a
 80008e2:	d12d      	bne.n	8000940 <_vfiprintf_r+0x238>
 80008e4:	9b05      	ldr	r3, [sp, #20]
 80008e6:	1cb0      	adds	r0, r6, #2
 80008e8:	1d1a      	adds	r2, r3, #4
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	9205      	str	r2, [sp, #20]
 80008ee:	606b      	str	r3, [r5, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	da02      	bge.n	80008fa <_vfiprintf_r+0x1f2>
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	606b      	str	r3, [r5, #4]
 80008fa:	78b1      	ldrb	r1, [r6, #2]
 80008fc:	0006      	movs	r6, r0
 80008fe:	e77b      	b.n	80007f8 <_vfiprintf_r+0xf0>
 8000900:	2207      	movs	r2, #7
 8000902:	9b05      	ldr	r3, [sp, #20]
 8000904:	3307      	adds	r3, #7
 8000906:	4393      	bics	r3, r2
 8000908:	3308      	adds	r3, #8
 800090a:	9305      	str	r3, [sp, #20]
 800090c:	e79c      	b.n	8000848 <_vfiprintf_r+0x140>
 800090e:	464b      	mov	r3, r9
 8000910:	696a      	ldr	r2, [r5, #20]
 8000912:	46a1      	mov	r9, r4
 8000914:	4452      	add	r2, sl
 8000916:	4644      	mov	r4, r8
 8000918:	616a      	str	r2, [r5, #20]
 800091a:	46b8      	mov	r8, r7
 800091c:	001f      	movs	r7, r3
 800091e:	e72c      	b.n	800077a <_vfiprintf_r+0x72>
 8000920:	425b      	negs	r3, r3
 8000922:	60eb      	str	r3, [r5, #12]
 8000924:	2302      	movs	r3, #2
 8000926:	431a      	orrs	r2, r3
 8000928:	602a      	str	r2, [r5, #0]
 800092a:	e761      	b.n	80007f0 <_vfiprintf_r+0xe8>
 800092c:	aa05      	add	r2, sp, #20
 800092e:	9200      	str	r2, [sp, #0]
 8000930:	0029      	movs	r1, r5
 8000932:	4642      	mov	r2, r8
 8000934:	4648      	mov	r0, r9
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <_vfiprintf_r+0x278>)
 8000938:	f001 f820 	bl	800197c <_printf_i>
 800093c:	9003      	str	r0, [sp, #12]
 800093e:	e780      	b.n	8000842 <_vfiprintf_r+0x13a>
 8000940:	0008      	movs	r0, r1
 8000942:	2300      	movs	r3, #0
 8000944:	3830      	subs	r0, #48	@ 0x30
 8000946:	3601      	adds	r6, #1
 8000948:	606b      	str	r3, [r5, #4]
 800094a:	2809      	cmp	r0, #9
 800094c:	d900      	bls.n	8000950 <_vfiprintf_r+0x248>
 800094e:	e753      	b.n	80007f8 <_vfiprintf_r+0xf0>
 8000950:	001a      	movs	r2, r3
 8000952:	0093      	lsls	r3, r2, #2
 8000954:	189b      	adds	r3, r3, r2
 8000956:	7871      	ldrb	r1, [r6, #1]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	181a      	adds	r2, r3, r0
 800095c:	0008      	movs	r0, r1
 800095e:	3830      	subs	r0, #48	@ 0x30
 8000960:	3601      	adds	r6, #1
 8000962:	2809      	cmp	r0, #9
 8000964:	d9f5      	bls.n	8000952 <_vfiprintf_r+0x24a>
 8000966:	606a      	str	r2, [r5, #4]
 8000968:	e746      	b.n	80007f8 <_vfiprintf_r+0xf0>
 800096a:	f000 fc3d 	bl	80011e8 <__sinit>
 800096e:	e6dc      	b.n	800072a <_vfiprintf_r+0x22>
 8000970:	080046bc 	.word	0x080046bc
 8000974:	080046c4 	.word	0x080046c4
 8000978:	080046c8 	.word	0x080046c8
 800097c:	00000000 	.word	0x00000000
 8000980:	080006bd 	.word	0x080006bd

08000984 <vfiprintf>:
 8000984:	b510      	push	{r4, lr}
 8000986:	0004      	movs	r4, r0
 8000988:	0013      	movs	r3, r2
 800098a:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <vfiprintf+0x14>)
 800098c:	6810      	ldr	r0, [r2, #0]
 800098e:	000a      	movs	r2, r1
 8000990:	0021      	movs	r1, r4
 8000992:	f7ff feb9 	bl	8000708 <_vfiprintf_r>
 8000996:	bd10      	pop	{r4, pc}
 8000998:	20000004 	.word	0x20000004

0800099c <__swbuf_r>:
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099e:	0005      	movs	r5, r0
 80009a0:	000e      	movs	r6, r1
 80009a2:	0014      	movs	r4, r2
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d002      	beq.n	80009ae <__swbuf_r+0x12>
 80009a8:	6a03      	ldr	r3, [r0, #32]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d041      	beq.n	8000a32 <__swbuf_r+0x96>
 80009ae:	69a3      	ldr	r3, [r4, #24]
 80009b0:	60a3      	str	r3, [r4, #8]
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	071b      	lsls	r3, r3, #28
 80009b6:	d51b      	bpl.n	80009f0 <__swbuf_r+0x54>
 80009b8:	6923      	ldr	r3, [r4, #16]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d018      	beq.n	80009f0 <__swbuf_r+0x54>
 80009be:	22ff      	movs	r2, #255	@ 0xff
 80009c0:	b2f7      	uxtb	r7, r6
 80009c2:	6961      	ldr	r1, [r4, #20]
 80009c4:	4016      	ands	r6, r2
 80009c6:	6822      	ldr	r2, [r4, #0]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	4299      	cmp	r1, r3
 80009cc:	dd1f      	ble.n	8000a0e <__swbuf_r+0x72>
 80009ce:	3301      	adds	r3, #1
 80009d0:	68a1      	ldr	r1, [r4, #8]
 80009d2:	3901      	subs	r1, #1
 80009d4:	60a1      	str	r1, [r4, #8]
 80009d6:	1c51      	adds	r1, r2, #1
 80009d8:	6021      	str	r1, [r4, #0]
 80009da:	7017      	strb	r7, [r2, #0]
 80009dc:	6962      	ldr	r2, [r4, #20]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d01e      	beq.n	8000a20 <__swbuf_r+0x84>
 80009e2:	89a3      	ldrh	r3, [r4, #12]
 80009e4:	07db      	lsls	r3, r3, #31
 80009e6:	d501      	bpl.n	80009ec <__swbuf_r+0x50>
 80009e8:	2e0a      	cmp	r6, #10
 80009ea:	d019      	beq.n	8000a20 <__swbuf_r+0x84>
 80009ec:	0030      	movs	r0, r6
 80009ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009f0:	0021      	movs	r1, r4
 80009f2:	0028      	movs	r0, r5
 80009f4:	f000 fe7c 	bl	80016f0 <__swsetup_r>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d117      	bne.n	8000a2c <__swbuf_r+0x90>
 80009fc:	22ff      	movs	r2, #255	@ 0xff
 80009fe:	6923      	ldr	r3, [r4, #16]
 8000a00:	b2f7      	uxtb	r7, r6
 8000a02:	6961      	ldr	r1, [r4, #20]
 8000a04:	4016      	ands	r6, r2
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4299      	cmp	r1, r3
 8000a0c:	dcdf      	bgt.n	80009ce <__swbuf_r+0x32>
 8000a0e:	0021      	movs	r1, r4
 8000a10:	0028      	movs	r0, r5
 8000a12:	f000 fca7 	bl	8001364 <_fflush_r>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	d108      	bne.n	8000a2c <__swbuf_r+0x90>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	6822      	ldr	r2, [r4, #0]
 8000a1e:	e7d7      	b.n	80009d0 <__swbuf_r+0x34>
 8000a20:	0021      	movs	r1, r4
 8000a22:	0028      	movs	r0, r5
 8000a24:	f000 fc9e 	bl	8001364 <_fflush_r>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d0df      	beq.n	80009ec <__swbuf_r+0x50>
 8000a2c:	2601      	movs	r6, #1
 8000a2e:	4276      	negs	r6, r6
 8000a30:	e7dc      	b.n	80009ec <__swbuf_r+0x50>
 8000a32:	f000 fbd9 	bl	80011e8 <__sinit>
 8000a36:	e7ba      	b.n	80009ae <__swbuf_r+0x12>

08000a38 <__swbuf>:
 8000a38:	0003      	movs	r3, r0
 8000a3a:	b510      	push	{r4, lr}
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	4903      	ldr	r1, [pc, #12]	@ (8000a4c <__swbuf+0x14>)
 8000a40:	6808      	ldr	r0, [r1, #0]
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff ffaa 	bl	800099c <__swbuf_r>
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	20000004 	.word	0x20000004

08000a50 <_gettimeofday_r>:
 8000a50:	2300      	movs	r3, #0
 8000a52:	b570      	push	{r4, r5, r6, lr}
 8000a54:	4d07      	ldr	r5, [pc, #28]	@ (8000a74 <_gettimeofday_r+0x24>)
 8000a56:	0004      	movs	r4, r0
 8000a58:	0008      	movs	r0, r1
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	602b      	str	r3, [r5, #0]
 8000a5e:	f001 fbaf 	bl	80021c0 <_gettimeofday>
 8000a62:	1c43      	adds	r3, r0, #1
 8000a64:	d000      	beq.n	8000a68 <_gettimeofday_r+0x18>
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0fb      	beq.n	8000a66 <_gettimeofday_r+0x16>
 8000a6e:	6023      	str	r3, [r4, #0]
 8000a70:	e7f9      	b.n	8000a66 <_gettimeofday_r+0x16>
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	2000040c 	.word	0x2000040c

08000a78 <__sfvwrite_r>:
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	464e      	mov	r6, r9
 8000a7c:	46de      	mov	lr, fp
 8000a7e:	4657      	mov	r7, sl
 8000a80:	4645      	mov	r5, r8
 8000a82:	b5e0      	push	{r5, r6, r7, lr}
 8000a84:	6893      	ldr	r3, [r2, #8]
 8000a86:	b083      	sub	sp, #12
 8000a88:	000c      	movs	r4, r1
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	9000      	str	r0, [sp, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d05f      	beq.n	8000b52 <__sfvwrite_r+0xda>
 8000a92:	230c      	movs	r3, #12
 8000a94:	5eca      	ldrsh	r2, [r1, r3]
 8000a96:	0713      	lsls	r3, r2, #28
 8000a98:	d563      	bpl.n	8000b62 <__sfvwrite_r+0xea>
 8000a9a:	690b      	ldr	r3, [r1, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d060      	beq.n	8000b62 <__sfvwrite_r+0xea>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	681f      	ldr	r7, [r3, #0]
 8000aa4:	0793      	lsls	r3, r2, #30
 8000aa6:	d523      	bpl.n	8000af0 <__sfvwrite_r+0x78>
 8000aa8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000aaa:	2600      	movs	r6, #0
 8000aac:	469a      	mov	sl, r3
 8000aae:	4bb3      	ldr	r3, [pc, #716]	@ (8000d7c <__sfvwrite_r+0x304>)
 8000ab0:	2500      	movs	r5, #0
 8000ab2:	4698      	mov	r8, r3
 8000ab4:	6a21      	ldr	r1, [r4, #32]
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d016      	beq.n	8000ae8 <__sfvwrite_r+0x70>
 8000aba:	002b      	movs	r3, r5
 8000abc:	4545      	cmp	r5, r8
 8000abe:	d900      	bls.n	8000ac2 <__sfvwrite_r+0x4a>
 8000ac0:	4bae      	ldr	r3, [pc, #696]	@ (8000d7c <__sfvwrite_r+0x304>)
 8000ac2:	0032      	movs	r2, r6
 8000ac4:	9800      	ldr	r0, [sp, #0]
 8000ac6:	47d0      	blx	sl
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	dd59      	ble.n	8000b80 <__sfvwrite_r+0x108>
 8000acc:	464b      	mov	r3, r9
 8000ace:	464a      	mov	r2, r9
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	1836      	adds	r6, r6, r0
 8000ad4:	1a1b      	subs	r3, r3, r0
 8000ad6:	1a2d      	subs	r5, r5, r0
 8000ad8:	6093      	str	r3, [r2, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d039      	beq.n	8000b52 <__sfvwrite_r+0xda>
 8000ade:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000ae0:	6a21      	ldr	r1, [r4, #32]
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d1e8      	bne.n	8000aba <__sfvwrite_r+0x42>
 8000ae8:	683e      	ldr	r6, [r7, #0]
 8000aea:	687d      	ldr	r5, [r7, #4]
 8000aec:	3708      	adds	r7, #8
 8000aee:	e7e2      	b.n	8000ab6 <__sfvwrite_r+0x3e>
 8000af0:	07d3      	lsls	r3, r2, #31
 8000af2:	d562      	bpl.n	8000bba <__sfvwrite_r+0x142>
 8000af4:	2300      	movs	r3, #0
 8000af6:	46b8      	mov	r8, r7
 8000af8:	2000      	movs	r0, #0
 8000afa:	469a      	mov	sl, r3
 8000afc:	2600      	movs	r6, #0
 8000afe:	001f      	movs	r7, r3
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d045      	beq.n	8000b90 <__sfvwrite_r+0x118>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d04c      	beq.n	8000ba2 <__sfvwrite_r+0x12a>
 8000b08:	003b      	movs	r3, r7
 8000b0a:	46b3      	mov	fp, r6
 8000b0c:	429e      	cmp	r6, r3
 8000b0e:	d900      	bls.n	8000b12 <__sfvwrite_r+0x9a>
 8000b10:	469b      	mov	fp, r3
 8000b12:	6820      	ldr	r0, [r4, #0]
 8000b14:	6922      	ldr	r2, [r4, #16]
 8000b16:	68a5      	ldr	r5, [r4, #8]
 8000b18:	6963      	ldr	r3, [r4, #20]
 8000b1a:	4290      	cmp	r0, r2
 8000b1c:	d903      	bls.n	8000b26 <__sfvwrite_r+0xae>
 8000b1e:	18ed      	adds	r5, r5, r3
 8000b20:	45ab      	cmp	fp, r5
 8000b22:	dd00      	ble.n	8000b26 <__sfvwrite_r+0xae>
 8000b24:	e0fe      	b.n	8000d24 <__sfvwrite_r+0x2ac>
 8000b26:	455b      	cmp	r3, fp
 8000b28:	dd00      	ble.n	8000b2c <__sfvwrite_r+0xb4>
 8000b2a:	e0ee      	b.n	8000d0a <__sfvwrite_r+0x292>
 8000b2c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000b2e:	4652      	mov	r2, sl
 8000b30:	6a21      	ldr	r1, [r4, #32]
 8000b32:	9800      	ldr	r0, [sp, #0]
 8000b34:	47a8      	blx	r5
 8000b36:	1e05      	subs	r5, r0, #0
 8000b38:	dd22      	ble.n	8000b80 <__sfvwrite_r+0x108>
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	1b7f      	subs	r7, r7, r5
 8000b3e:	d019      	beq.n	8000b74 <__sfvwrite_r+0xfc>
 8000b40:	464b      	mov	r3, r9
 8000b42:	464a      	mov	r2, r9
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	44aa      	add	sl, r5
 8000b48:	1b5b      	subs	r3, r3, r5
 8000b4a:	1b76      	subs	r6, r6, r5
 8000b4c:	6093      	str	r3, [r2, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1d6      	bne.n	8000b00 <__sfvwrite_r+0x88>
 8000b52:	2000      	movs	r0, #0
 8000b54:	b003      	add	sp, #12
 8000b56:	bcf0      	pop	{r4, r5, r6, r7}
 8000b58:	46bb      	mov	fp, r7
 8000b5a:	46b2      	mov	sl, r6
 8000b5c:	46a9      	mov	r9, r5
 8000b5e:	46a0      	mov	r8, r4
 8000b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b62:	0021      	movs	r1, r4
 8000b64:	9800      	ldr	r0, [sp, #0]
 8000b66:	f000 fdc3 	bl	80016f0 <__swsetup_r>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d10d      	bne.n	8000b8a <__sfvwrite_r+0x112>
 8000b6e:	230c      	movs	r3, #12
 8000b70:	5ee2      	ldrsh	r2, [r4, r3]
 8000b72:	e795      	b.n	8000aa0 <__sfvwrite_r+0x28>
 8000b74:	0021      	movs	r1, r4
 8000b76:	9800      	ldr	r0, [sp, #0]
 8000b78:	f000 fbf4 	bl	8001364 <_fflush_r>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d0df      	beq.n	8000b40 <__sfvwrite_r+0xc8>
 8000b80:	220c      	movs	r2, #12
 8000b82:	5ea3      	ldrsh	r3, [r4, r2]
 8000b84:	2240      	movs	r2, #64	@ 0x40
 8000b86:	4313      	orrs	r3, r2
 8000b88:	81a3      	strh	r3, [r4, #12]
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	4240      	negs	r0, r0
 8000b8e:	e7e1      	b.n	8000b54 <__sfvwrite_r+0xdc>
 8000b90:	2208      	movs	r2, #8
 8000b92:	4643      	mov	r3, r8
 8000b94:	4694      	mov	ip, r2
 8000b96:	685e      	ldr	r6, [r3, #4]
 8000b98:	44e0      	add	r8, ip
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d0f8      	beq.n	8000b90 <__sfvwrite_r+0x118>
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	469a      	mov	sl, r3
 8000ba2:	0032      	movs	r2, r6
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	4650      	mov	r0, sl
 8000ba8:	f001 f8a4 	bl	8001cf4 <memchr>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d100      	bne.n	8000bb2 <__sfvwrite_r+0x13a>
 8000bb0:	e0db      	b.n	8000d6a <__sfvwrite_r+0x2f2>
 8000bb2:	4653      	mov	r3, sl
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	1ac7      	subs	r7, r0, r3
 8000bb8:	e7a6      	b.n	8000b08 <__sfvwrite_r+0x90>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	469a      	mov	sl, r3
 8000bc0:	0089      	lsls	r1, r1, #2
 8000bc2:	468b      	mov	fp, r1
 8000bc4:	4656      	mov	r6, sl
 8000bc6:	4655      	mov	r5, sl
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	68a3      	ldr	r3, [r4, #8]
 8000bcc:	4684      	mov	ip, r0
 8000bce:	4698      	mov	r8, r3
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d05c      	beq.n	8000c8e <__sfvwrite_r+0x216>
 8000bd4:	4659      	mov	r1, fp
 8000bd6:	420a      	tst	r2, r1
 8000bd8:	d05d      	beq.n	8000c96 <__sfvwrite_r+0x21e>
 8000bda:	469a      	mov	sl, r3
 8000bdc:	42ab      	cmp	r3, r5
 8000bde:	d900      	bls.n	8000be2 <__sfvwrite_r+0x16a>
 8000be0:	e090      	b.n	8000d04 <__sfvwrite_r+0x28c>
 8000be2:	2390      	movs	r3, #144	@ 0x90
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	421a      	tst	r2, r3
 8000be8:	d032      	beq.n	8000c50 <__sfvwrite_r+0x1d8>
 8000bea:	6921      	ldr	r1, [r4, #16]
 8000bec:	1a43      	subs	r3, r0, r1
 8000bee:	6960      	ldr	r0, [r4, #20]
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	0043      	lsls	r3, r0, #1
 8000bf4:	181b      	adds	r3, r3, r0
 8000bf6:	0fd8      	lsrs	r0, r3, #31
 8000bf8:	18c3      	adds	r3, r0, r3
 8000bfa:	1058      	asrs	r0, r3, #1
 8000bfc:	9b01      	ldr	r3, [sp, #4]
 8000bfe:	4682      	mov	sl, r0
 8000c00:	3301      	adds	r3, #1
 8000c02:	195b      	adds	r3, r3, r5
 8000c04:	4283      	cmp	r3, r0
 8000c06:	d901      	bls.n	8000c0c <__sfvwrite_r+0x194>
 8000c08:	469a      	mov	sl, r3
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	0552      	lsls	r2, r2, #21
 8000c0e:	d400      	bmi.n	8000c12 <__sfvwrite_r+0x19a>
 8000c10:	e097      	b.n	8000d42 <__sfvwrite_r+0x2ca>
 8000c12:	0001      	movs	r1, r0
 8000c14:	9800      	ldr	r0, [sp, #0]
 8000c16:	f000 fc0d 	bl	8001434 <_malloc_r>
 8000c1a:	4680      	mov	r8, r0
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d100      	bne.n	8000c22 <__sfvwrite_r+0x1aa>
 8000c20:	e0a6      	b.n	8000d70 <__sfvwrite_r+0x2f8>
 8000c22:	9a01      	ldr	r2, [sp, #4]
 8000c24:	6921      	ldr	r1, [r4, #16]
 8000c26:	f7ff fcef 	bl	8000608 <memcpy>
 8000c2a:	89a3      	ldrh	r3, [r4, #12]
 8000c2c:	4a54      	ldr	r2, [pc, #336]	@ (8000d80 <__sfvwrite_r+0x308>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2280      	movs	r2, #128	@ 0x80
 8000c32:	4313      	orrs	r3, r2
 8000c34:	81a3      	strh	r3, [r4, #12]
 8000c36:	4643      	mov	r3, r8
 8000c38:	6123      	str	r3, [r4, #16]
 8000c3a:	9b01      	ldr	r3, [sp, #4]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4442      	add	r2, r8
 8000c40:	4694      	mov	ip, r2
 8000c42:	6022      	str	r2, [r4, #0]
 8000c44:	4652      	mov	r2, sl
 8000c46:	46a8      	mov	r8, r5
 8000c48:	46aa      	mov	sl, r5
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	6162      	str	r2, [r4, #20]
 8000c4e:	60a3      	str	r3, [r4, #8]
 8000c50:	4652      	mov	r2, sl
 8000c52:	0031      	movs	r1, r6
 8000c54:	4660      	mov	r0, ip
 8000c56:	f000 fcd1 	bl	80015fc <memmove>
 8000c5a:	4642      	mov	r2, r8
 8000c5c:	46a8      	mov	r8, r5
 8000c5e:	2500      	movs	r5, #0
 8000c60:	68a3      	ldr	r3, [r4, #8]
 8000c62:	6820      	ldr	r0, [r4, #0]
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	4450      	add	r0, sl
 8000c68:	60a3      	str	r3, [r4, #8]
 8000c6a:	6020      	str	r0, [r4, #0]
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	4642      	mov	r2, r8
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4446      	add	r6, r8
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	464a      	mov	r2, r9
 8000c78:	6093      	str	r3, [r2, #8]
 8000c7a:	d100      	bne.n	8000c7e <__sfvwrite_r+0x206>
 8000c7c:	e769      	b.n	8000b52 <__sfvwrite_r+0xda>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	5ee2      	ldrsh	r2, [r4, r3]
 8000c82:	6820      	ldr	r0, [r4, #0]
 8000c84:	68a3      	ldr	r3, [r4, #8]
 8000c86:	4684      	mov	ip, r0
 8000c88:	4698      	mov	r8, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d1a2      	bne.n	8000bd4 <__sfvwrite_r+0x15c>
 8000c8e:	683e      	ldr	r6, [r7, #0]
 8000c90:	687d      	ldr	r5, [r7, #4]
 8000c92:	3708      	adds	r7, #8
 8000c94:	e79a      	b.n	8000bcc <__sfvwrite_r+0x154>
 8000c96:	6922      	ldr	r2, [r4, #16]
 8000c98:	4282      	cmp	r2, r0
 8000c9a:	d31b      	bcc.n	8000cd4 <__sfvwrite_r+0x25c>
 8000c9c:	6962      	ldr	r2, [r4, #20]
 8000c9e:	4690      	mov	r8, r2
 8000ca0:	42aa      	cmp	r2, r5
 8000ca2:	d817      	bhi.n	8000cd4 <__sfvwrite_r+0x25c>
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	061b      	lsls	r3, r3, #24
 8000caa:	429d      	cmp	r5, r3
 8000cac:	d300      	bcc.n	8000cb0 <__sfvwrite_r+0x238>
 8000cae:	4835      	ldr	r0, [pc, #212]	@ (8000d84 <__sfvwrite_r+0x30c>)
 8000cb0:	4641      	mov	r1, r8
 8000cb2:	f001 f955 	bl	8001f60 <__divsi3>
 8000cb6:	4643      	mov	r3, r8
 8000cb8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000cba:	4343      	muls	r3, r0
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	6a21      	ldr	r1, [r4, #32]
 8000cc0:	0032      	movs	r2, r6
 8000cc2:	9800      	ldr	r0, [sp, #0]
 8000cc4:	47c0      	blx	r8
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	dc00      	bgt.n	8000ccc <__sfvwrite_r+0x254>
 8000cca:	e759      	b.n	8000b80 <__sfvwrite_r+0x108>
 8000ccc:	4680      	mov	r8, r0
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1aed      	subs	r5, r5, r3
 8000cd2:	e7cb      	b.n	8000c6c <__sfvwrite_r+0x1f4>
 8000cd4:	4698      	mov	r8, r3
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	d900      	bls.n	8000cdc <__sfvwrite_r+0x264>
 8000cda:	46a8      	mov	r8, r5
 8000cdc:	4642      	mov	r2, r8
 8000cde:	0031      	movs	r1, r6
 8000ce0:	f000 fc8c 	bl	80015fc <memmove>
 8000ce4:	4642      	mov	r2, r8
 8000ce6:	68a3      	ldr	r3, [r4, #8]
 8000ce8:	6820      	ldr	r0, [r4, #0]
 8000cea:	1a9b      	subs	r3, r3, r2
 8000cec:	4440      	add	r0, r8
 8000cee:	60a3      	str	r3, [r4, #8]
 8000cf0:	6020      	str	r0, [r4, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1eb      	bne.n	8000cce <__sfvwrite_r+0x256>
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	9800      	ldr	r0, [sp, #0]
 8000cfa:	f000 fb33 	bl	8001364 <_fflush_r>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d0e5      	beq.n	8000cce <__sfvwrite_r+0x256>
 8000d02:	e73d      	b.n	8000b80 <__sfvwrite_r+0x108>
 8000d04:	46a8      	mov	r8, r5
 8000d06:	46aa      	mov	sl, r5
 8000d08:	e7a2      	b.n	8000c50 <__sfvwrite_r+0x1d8>
 8000d0a:	465a      	mov	r2, fp
 8000d0c:	4651      	mov	r1, sl
 8000d0e:	f000 fc75 	bl	80015fc <memmove>
 8000d12:	465a      	mov	r2, fp
 8000d14:	68a3      	ldr	r3, [r4, #8]
 8000d16:	465d      	mov	r5, fp
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	60a3      	str	r3, [r4, #8]
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	445b      	add	r3, fp
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	e70a      	b.n	8000b3a <__sfvwrite_r+0xc2>
 8000d24:	4651      	mov	r1, sl
 8000d26:	002a      	movs	r2, r5
 8000d28:	f000 fc68 	bl	80015fc <memmove>
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	0021      	movs	r1, r4
 8000d30:	195b      	adds	r3, r3, r5
 8000d32:	9800      	ldr	r0, [sp, #0]
 8000d34:	6023      	str	r3, [r4, #0]
 8000d36:	f000 fb15 	bl	8001364 <_fflush_r>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d100      	bne.n	8000d40 <__sfvwrite_r+0x2c8>
 8000d3e:	e6fc      	b.n	8000b3a <__sfvwrite_r+0xc2>
 8000d40:	e71e      	b.n	8000b80 <__sfvwrite_r+0x108>
 8000d42:	0002      	movs	r2, r0
 8000d44:	9800      	ldr	r0, [sp, #0]
 8000d46:	f000 fd39 	bl	80017bc <_realloc_r>
 8000d4a:	4680      	mov	r8, r0
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d000      	beq.n	8000d52 <__sfvwrite_r+0x2da>
 8000d50:	e771      	b.n	8000c36 <__sfvwrite_r+0x1be>
 8000d52:	9d00      	ldr	r5, [sp, #0]
 8000d54:	6921      	ldr	r1, [r4, #16]
 8000d56:	0028      	movs	r0, r5
 8000d58:	f000 fbf4 	bl	8001544 <_free_r>
 8000d5c:	2280      	movs	r2, #128	@ 0x80
 8000d5e:	89a3      	ldrh	r3, [r4, #12]
 8000d60:	4393      	bics	r3, r2
 8000d62:	3a74      	subs	r2, #116	@ 0x74
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	602a      	str	r2, [r5, #0]
 8000d68:	e70c      	b.n	8000b84 <__sfvwrite_r+0x10c>
 8000d6a:	1c73      	adds	r3, r6, #1
 8000d6c:	001f      	movs	r7, r3
 8000d6e:	e6cc      	b.n	8000b0a <__sfvwrite_r+0x92>
 8000d70:	9a00      	ldr	r2, [sp, #0]
 8000d72:	330c      	adds	r3, #12
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	220c      	movs	r2, #12
 8000d78:	5ea3      	ldrsh	r3, [r4, r2]
 8000d7a:	e703      	b.n	8000b84 <__sfvwrite_r+0x10c>
 8000d7c:	7ffffc00 	.word	0x7ffffc00
 8000d80:	fffffb7f 	.word	0xfffffb7f
 8000d84:	7fffffff 	.word	0x7fffffff

08000d88 <_init_signal_r>:
 8000d88:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000d8a:	b510      	push	{r4, lr}
 8000d8c:	0004      	movs	r4, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <_init_signal_r+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2180      	movs	r1, #128	@ 0x80
 8000d98:	f000 fb4c 	bl	8001434 <_malloc_r>
 8000d9c:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d006      	beq.n	8000db0 <_init_signal_r+0x28>
 8000da2:	0002      	movs	r2, r0
 8000da4:	2300      	movs	r3, #0
 8000da6:	3280      	adds	r2, #128	@ 0x80
 8000da8:	c008      	stmia	r0!, {r3}
 8000daa:	4290      	cmp	r0, r2
 8000dac:	d1fc      	bne.n	8000da8 <_init_signal_r+0x20>
 8000dae:	e7f0      	b.n	8000d92 <_init_signal_r+0xa>
 8000db0:	2001      	movs	r0, #1
 8000db2:	4240      	negs	r0, r0
 8000db4:	e7ee      	b.n	8000d94 <_init_signal_r+0xc>
 8000db6:	46c0      	nop			@ (mov r8, r8)

08000db8 <_signal_r>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	0005      	movs	r5, r0
 8000dbc:	000c      	movs	r4, r1
 8000dbe:	0016      	movs	r6, r2
 8000dc0:	291f      	cmp	r1, #31
 8000dc2:	d807      	bhi.n	8000dd4 <_signal_r+0x1c>
 8000dc4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d009      	beq.n	8000dde <_signal_r+0x26>
 8000dca:	00a4      	lsls	r4, r4, #2
 8000dcc:	1904      	adds	r4, r0, r4
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	6026      	str	r6, [r4, #0]
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	2316      	movs	r3, #22
 8000dd6:	6003      	str	r3, [r0, #0]
 8000dd8:	2001      	movs	r0, #1
 8000dda:	4240      	negs	r0, r0
 8000ddc:	e7f9      	b.n	8000dd2 <_signal_r+0x1a>
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	0028      	movs	r0, r5
 8000de2:	f000 fb27 	bl	8001434 <_malloc_r>
 8000de6:	0001      	movs	r1, r0
 8000de8:	0003      	movs	r3, r0
 8000dea:	2200      	movs	r2, #0
 8000dec:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000dee:	3180      	adds	r1, #128	@ 0x80
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d0f1      	beq.n	8000dd8 <_signal_r+0x20>
 8000df4:	c304      	stmia	r3!, {r2}
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d1fc      	bne.n	8000df4 <_signal_r+0x3c>
 8000dfa:	e7e6      	b.n	8000dca <_signal_r+0x12>

08000dfc <_raise_r>:
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	0005      	movs	r5, r0
 8000e00:	000c      	movs	r4, r1
 8000e02:	291f      	cmp	r1, #31
 8000e04:	d81e      	bhi.n	8000e44 <_raise_r+0x48>
 8000e06:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00e      	beq.n	8000e2a <_raise_r+0x2e>
 8000e0c:	008a      	lsls	r2, r1, #2
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d009      	beq.n	8000e2a <_raise_r+0x2e>
 8000e16:	2a01      	cmp	r2, #1
 8000e18:	d005      	beq.n	8000e26 <_raise_r+0x2a>
 8000e1a:	1c51      	adds	r1, r2, #1
 8000e1c:	d00e      	beq.n	8000e3c <_raise_r+0x40>
 8000e1e:	2100      	movs	r1, #0
 8000e20:	0020      	movs	r0, r4
 8000e22:	6019      	str	r1, [r3, #0]
 8000e24:	4790      	blx	r2
 8000e26:	2000      	movs	r0, #0
 8000e28:	bd70      	pop	{r4, r5, r6, pc}
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	f001 f832 	bl	8001e94 <_getpid_r>
 8000e30:	0022      	movs	r2, r4
 8000e32:	0001      	movs	r1, r0
 8000e34:	0028      	movs	r0, r5
 8000e36:	f001 f819 	bl	8001e6c <_kill_r>
 8000e3a:	e7f5      	b.n	8000e28 <_raise_r+0x2c>
 8000e3c:	2316      	movs	r3, #22
 8000e3e:	6003      	str	r3, [r0, #0]
 8000e40:	2001      	movs	r0, #1
 8000e42:	e7f1      	b.n	8000e28 <_raise_r+0x2c>
 8000e44:	2316      	movs	r3, #22
 8000e46:	6003      	str	r3, [r0, #0]
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4240      	negs	r0, r0
 8000e4c:	e7ec      	b.n	8000e28 <_raise_r+0x2c>
 8000e4e:	46c0      	nop			@ (mov r8, r8)

08000e50 <__sigtramp_r>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	0005      	movs	r5, r0
 8000e54:	000c      	movs	r4, r1
 8000e56:	291f      	cmp	r1, #31
 8000e58:	d824      	bhi.n	8000ea4 <__sigtramp_r+0x54>
 8000e5a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d014      	beq.n	8000e8a <__sigtramp_r+0x3a>
 8000e60:	00a2      	lsls	r2, r4, #2
 8000e62:	189b      	adds	r3, r3, r2
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2a00      	cmp	r2, #0
 8000e68:	d009      	beq.n	8000e7e <__sigtramp_r+0x2e>
 8000e6a:	1c51      	adds	r1, r2, #1
 8000e6c:	d00b      	beq.n	8000e86 <__sigtramp_r+0x36>
 8000e6e:	2a01      	cmp	r2, #1
 8000e70:	d007      	beq.n	8000e82 <__sigtramp_r+0x32>
 8000e72:	2100      	movs	r1, #0
 8000e74:	0020      	movs	r0, r4
 8000e76:	6019      	str	r1, [r3, #0]
 8000e78:	4790      	blx	r2
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	2001      	movs	r0, #1
 8000e80:	e7fc      	b.n	8000e7c <__sigtramp_r+0x2c>
 8000e82:	2003      	movs	r0, #3
 8000e84:	e7fa      	b.n	8000e7c <__sigtramp_r+0x2c>
 8000e86:	2002      	movs	r0, #2
 8000e88:	e7f8      	b.n	8000e7c <__sigtramp_r+0x2c>
 8000e8a:	2180      	movs	r1, #128	@ 0x80
 8000e8c:	f000 fad2 	bl	8001434 <_malloc_r>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000e94:	d006      	beq.n	8000ea4 <__sigtramp_r+0x54>
 8000e96:	2100      	movs	r1, #0
 8000e98:	0002      	movs	r2, r0
 8000e9a:	3080      	adds	r0, #128	@ 0x80
 8000e9c:	c202      	stmia	r2!, {r1}
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	d1fc      	bne.n	8000e9c <__sigtramp_r+0x4c>
 8000ea2:	e7dd      	b.n	8000e60 <__sigtramp_r+0x10>
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	e7e8      	b.n	8000e7c <__sigtramp_r+0x2c>
 8000eaa:	46c0      	nop			@ (mov r8, r8)

08000eac <raise>:
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <raise+0x54>)
 8000eae:	b570      	push	{r4, r5, r6, lr}
 8000eb0:	0004      	movs	r4, r0
 8000eb2:	681d      	ldr	r5, [r3, #0]
 8000eb4:	281f      	cmp	r0, #31
 8000eb6:	d81d      	bhi.n	8000ef4 <raise+0x48>
 8000eb8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00d      	beq.n	8000eda <raise+0x2e>
 8000ebe:	0082      	lsls	r2, r0, #2
 8000ec0:	189b      	adds	r3, r3, r2
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d008      	beq.n	8000eda <raise+0x2e>
 8000ec8:	2a01      	cmp	r2, #1
 8000eca:	d004      	beq.n	8000ed6 <raise+0x2a>
 8000ecc:	1c51      	adds	r1, r2, #1
 8000ece:	d00d      	beq.n	8000eec <raise+0x40>
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6019      	str	r1, [r3, #0]
 8000ed4:	4790      	blx	r2
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	0028      	movs	r0, r5
 8000edc:	f000 ffda 	bl	8001e94 <_getpid_r>
 8000ee0:	0022      	movs	r2, r4
 8000ee2:	0001      	movs	r1, r0
 8000ee4:	0028      	movs	r0, r5
 8000ee6:	f000 ffc1 	bl	8001e6c <_kill_r>
 8000eea:	e7f5      	b.n	8000ed8 <raise+0x2c>
 8000eec:	2316      	movs	r3, #22
 8000eee:	2001      	movs	r0, #1
 8000ef0:	602b      	str	r3, [r5, #0]
 8000ef2:	e7f1      	b.n	8000ed8 <raise+0x2c>
 8000ef4:	2316      	movs	r3, #22
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	602b      	str	r3, [r5, #0]
 8000efa:	4240      	negs	r0, r0
 8000efc:	e7ec      	b.n	8000ed8 <raise+0x2c>
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	20000004 	.word	0x20000004

08000f04 <signal>:
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <signal+0x48>)
 8000f06:	b570      	push	{r4, r5, r6, lr}
 8000f08:	0004      	movs	r4, r0
 8000f0a:	000e      	movs	r6, r1
 8000f0c:	681d      	ldr	r5, [r3, #0]
 8000f0e:	281f      	cmp	r0, #31
 8000f10:	d807      	bhi.n	8000f22 <signal+0x1e>
 8000f12:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d009      	beq.n	8000f2c <signal+0x28>
 8000f18:	00a4      	lsls	r4, r4, #2
 8000f1a:	1904      	adds	r4, r0, r4
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	6026      	str	r6, [r4, #0]
 8000f20:	bd70      	pop	{r4, r5, r6, pc}
 8000f22:	2316      	movs	r3, #22
 8000f24:	602b      	str	r3, [r5, #0]
 8000f26:	2001      	movs	r0, #1
 8000f28:	4240      	negs	r0, r0
 8000f2a:	e7f9      	b.n	8000f20 <signal+0x1c>
 8000f2c:	2180      	movs	r1, #128	@ 0x80
 8000f2e:	0028      	movs	r0, r5
 8000f30:	f000 fa80 	bl	8001434 <_malloc_r>
 8000f34:	0001      	movs	r1, r0
 8000f36:	0003      	movs	r3, r0
 8000f38:	2200      	movs	r2, #0
 8000f3a:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000f3c:	3180      	adds	r1, #128	@ 0x80
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d0f1      	beq.n	8000f26 <signal+0x22>
 8000f42:	c304      	stmia	r3!, {r2}
 8000f44:	4299      	cmp	r1, r3
 8000f46:	d1fc      	bne.n	8000f42 <signal+0x3e>
 8000f48:	e7e6      	b.n	8000f18 <signal+0x14>
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	20000004 	.word	0x20000004

08000f50 <_init_signal>:
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <_init_signal+0x34>)
 8000f52:	b510      	push	{r4, lr}
 8000f54:	681c      	ldr	r4, [r3, #0]
 8000f56:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <_init_signal+0x10>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	bd10      	pop	{r4, pc}
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0020      	movs	r0, r4
 8000f64:	f000 fa66 	bl	8001434 <_malloc_r>
 8000f68:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d006      	beq.n	8000f7c <_init_signal+0x2c>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	2300      	movs	r3, #0
 8000f72:	3280      	adds	r2, #128	@ 0x80
 8000f74:	c008      	stmia	r0!, {r3}
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d1fc      	bne.n	8000f74 <_init_signal+0x24>
 8000f7a:	e7ef      	b.n	8000f5c <_init_signal+0xc>
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	4240      	negs	r0, r0
 8000f80:	e7ed      	b.n	8000f5e <_init_signal+0xe>
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	20000004 	.word	0x20000004

08000f88 <__sigtramp>:
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <__sigtramp+0x60>)
 8000f8a:	b570      	push	{r4, r5, r6, lr}
 8000f8c:	0004      	movs	r4, r0
 8000f8e:	681d      	ldr	r5, [r3, #0]
 8000f90:	281f      	cmp	r0, #31
 8000f92:	d825      	bhi.n	8000fe0 <__sigtramp+0x58>
 8000f94:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d014      	beq.n	8000fc4 <__sigtramp+0x3c>
 8000f9a:	00a2      	lsls	r2, r4, #2
 8000f9c:	189b      	adds	r3, r3, r2
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d009      	beq.n	8000fb8 <__sigtramp+0x30>
 8000fa4:	1c51      	adds	r1, r2, #1
 8000fa6:	d00b      	beq.n	8000fc0 <__sigtramp+0x38>
 8000fa8:	2a01      	cmp	r2, #1
 8000faa:	d007      	beq.n	8000fbc <__sigtramp+0x34>
 8000fac:	2100      	movs	r1, #0
 8000fae:	0020      	movs	r0, r4
 8000fb0:	6019      	str	r1, [r3, #0]
 8000fb2:	4790      	blx	r2
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	2001      	movs	r0, #1
 8000fba:	e7fc      	b.n	8000fb6 <__sigtramp+0x2e>
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	e7fa      	b.n	8000fb6 <__sigtramp+0x2e>
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	e7f8      	b.n	8000fb6 <__sigtramp+0x2e>
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	0028      	movs	r0, r5
 8000fc8:	f000 fa34 	bl	8001434 <_malloc_r>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000fd0:	d006      	beq.n	8000fe0 <__sigtramp+0x58>
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	3080      	adds	r0, #128	@ 0x80
 8000fd8:	c202      	stmia	r2!, {r1}
 8000fda:	4290      	cmp	r0, r2
 8000fdc:	d1fc      	bne.n	8000fd8 <__sigtramp+0x50>
 8000fde:	e7dc      	b.n	8000f9a <__sigtramp+0x12>
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	4240      	negs	r0, r0
 8000fe4:	e7e7      	b.n	8000fb6 <__sigtramp+0x2e>
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	20000004 	.word	0x20000004

08000fec <__fp_lock>:
 8000fec:	2000      	movs	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <stdio_exit_handler>:
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4a03      	ldr	r2, [pc, #12]	@ (8001000 <stdio_exit_handler+0x10>)
 8000ff4:	4903      	ldr	r1, [pc, #12]	@ (8001004 <stdio_exit_handler+0x14>)
 8000ff6:	4804      	ldr	r0, [pc, #16]	@ (8001008 <stdio_exit_handler+0x18>)
 8000ff8:	f000 fb58 	bl	80016ac <_fwalk_sglue>
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	20000054 	.word	0x20000054
 8001004:	08001365 	.word	0x08001365
 8001008:	20000008 	.word	0x20000008

0800100c <cleanup_stdio>:
 800100c:	6841      	ldr	r1, [r0, #4]
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <cleanup_stdio+0x30>)
 8001010:	b510      	push	{r4, lr}
 8001012:	0004      	movs	r4, r0
 8001014:	4299      	cmp	r1, r3
 8001016:	d001      	beq.n	800101c <cleanup_stdio+0x10>
 8001018:	f000 f9a4 	bl	8001364 <_fflush_r>
 800101c:	68a1      	ldr	r1, [r4, #8]
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <cleanup_stdio+0x34>)
 8001020:	4299      	cmp	r1, r3
 8001022:	d002      	beq.n	800102a <cleanup_stdio+0x1e>
 8001024:	0020      	movs	r0, r4
 8001026:	f000 f99d 	bl	8001364 <_fflush_r>
 800102a:	68e1      	ldr	r1, [r4, #12]
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <cleanup_stdio+0x38>)
 800102e:	4299      	cmp	r1, r3
 8001030:	d002      	beq.n	8001038 <cleanup_stdio+0x2c>
 8001032:	0020      	movs	r0, r4
 8001034:	f000 f996 	bl	8001364 <_fflush_r>
 8001038:	bd10      	pop	{r4, pc}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	200002cc 	.word	0x200002cc
 8001040:	20000334 	.word	0x20000334
 8001044:	2000039c 	.word	0x2000039c

08001048 <__fp_unlock>:
 8001048:	2000      	movs	r0, #0
 800104a:	4770      	bx	lr

0800104c <global_stdio_init.part.0>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	46ce      	mov	lr, r9
 8001050:	4647      	mov	r7, r8
 8001052:	4c34      	ldr	r4, [pc, #208]	@ (8001124 <global_stdio_init.part.0+0xd8>)
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <global_stdio_init.part.0+0xdc>)
 8001056:	4a35      	ldr	r2, [pc, #212]	@ (800112c <global_stdio_init.part.0+0xe0>)
 8001058:	0020      	movs	r0, r4
 800105a:	2500      	movs	r5, #0
 800105c:	b580      	push	{r7, lr}
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	2304      	movs	r3, #4
 8001062:	2208      	movs	r2, #8
 8001064:	2100      	movs	r1, #0
 8001066:	305c      	adds	r0, #92	@ 0x5c
 8001068:	6025      	str	r5, [r4, #0]
 800106a:	6065      	str	r5, [r4, #4]
 800106c:	60a5      	str	r5, [r4, #8]
 800106e:	6665      	str	r5, [r4, #100]	@ 0x64
 8001070:	6125      	str	r5, [r4, #16]
 8001072:	6165      	str	r5, [r4, #20]
 8001074:	61a5      	str	r5, [r4, #24]
 8001076:	60e3      	str	r3, [r4, #12]
 8001078:	f7ff fa40 	bl	80004fc <memset>
 800107c:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <global_stdio_init.part.0+0xe4>)
 800107e:	0020      	movs	r0, r4
 8001080:	4699      	mov	r9, r3
 8001082:	6263      	str	r3, [r4, #36]	@ 0x24
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <global_stdio_init.part.0+0xe8>)
 8001086:	4f2c      	ldr	r7, [pc, #176]	@ (8001138 <global_stdio_init.part.0+0xec>)
 8001088:	4698      	mov	r8, r3
 800108a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800108c:	23cc      	movs	r3, #204	@ 0xcc
 800108e:	50e5      	str	r5, [r4, r3]
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <global_stdio_init.part.0+0xf0>)
 8001092:	4e2b      	ldr	r6, [pc, #172]	@ (8001140 <global_stdio_init.part.0+0xf4>)
 8001094:	6763      	str	r3, [r4, #116]	@ 0x74
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	2208      	movs	r2, #8
 800109a:	2100      	movs	r1, #0
 800109c:	30c4      	adds	r0, #196	@ 0xc4
 800109e:	50e5      	str	r5, [r4, r3]
 80010a0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80010a2:	6326      	str	r6, [r4, #48]	@ 0x30
 80010a4:	66a5      	str	r5, [r4, #104]	@ 0x68
 80010a6:	66e5      	str	r5, [r4, #108]	@ 0x6c
 80010a8:	6725      	str	r5, [r4, #112]	@ 0x70
 80010aa:	67a5      	str	r5, [r4, #120]	@ 0x78
 80010ac:	67e5      	str	r5, [r4, #124]	@ 0x7c
 80010ae:	6224      	str	r4, [r4, #32]
 80010b0:	f7ff fa24 	bl	80004fc <memset>
 80010b4:	0022      	movs	r2, r4
 80010b6:	2388      	movs	r3, #136	@ 0x88
 80010b8:	3268      	adds	r2, #104	@ 0x68
 80010ba:	50e2      	str	r2, [r4, r3]
 80010bc:	464a      	mov	r2, r9
 80010be:	3304      	adds	r3, #4
 80010c0:	50e2      	str	r2, [r4, r3]
 80010c2:	4642      	mov	r2, r8
 80010c4:	0020      	movs	r0, r4
 80010c6:	3304      	adds	r3, #4
 80010c8:	50e2      	str	r2, [r4, r3]
 80010ca:	3304      	adds	r3, #4
 80010cc:	50e7      	str	r7, [r4, r3]
 80010ce:	3304      	adds	r3, #4
 80010d0:	50e6      	str	r6, [r4, r3]
 80010d2:	3338      	adds	r3, #56	@ 0x38
 80010d4:	50e5      	str	r5, [r4, r3]
 80010d6:	3304      	adds	r3, #4
 80010d8:	50e5      	str	r5, [r4, r3]
 80010da:	3304      	adds	r3, #4
 80010dc:	50e5      	str	r5, [r4, r3]
 80010de:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <global_stdio_init.part.0+0xf8>)
 80010e0:	335c      	adds	r3, #92	@ 0x5c
 80010e2:	50e5      	str	r5, [r4, r3]
 80010e4:	3b58      	subs	r3, #88	@ 0x58
 80010e6:	50e2      	str	r2, [r4, r3]
 80010e8:	3304      	adds	r3, #4
 80010ea:	50e5      	str	r5, [r4, r3]
 80010ec:	302d      	adds	r0, #45	@ 0x2d
 80010ee:	3304      	adds	r3, #4
 80010f0:	50e5      	str	r5, [r4, r3]
 80010f2:	2208      	movs	r2, #8
 80010f4:	3304      	adds	r3, #4
 80010f6:	2100      	movs	r1, #0
 80010f8:	30ff      	adds	r0, #255	@ 0xff
 80010fa:	50e5      	str	r5, [r4, r3]
 80010fc:	f7ff f9fe 	bl	80004fc <memset>
 8001100:	0022      	movs	r2, r4
 8001102:	23f0      	movs	r3, #240	@ 0xf0
 8001104:	32d0      	adds	r2, #208	@ 0xd0
 8001106:	50e2      	str	r2, [r4, r3]
 8001108:	464a      	mov	r2, r9
 800110a:	3304      	adds	r3, #4
 800110c:	50e2      	str	r2, [r4, r3]
 800110e:	4642      	mov	r2, r8
 8001110:	3304      	adds	r3, #4
 8001112:	50e2      	str	r2, [r4, r3]
 8001114:	3304      	adds	r3, #4
 8001116:	50e7      	str	r7, [r4, r3]
 8001118:	3304      	adds	r3, #4
 800111a:	50e6      	str	r6, [r4, r3]
 800111c:	bcc0      	pop	{r6, r7}
 800111e:	46b9      	mov	r9, r7
 8001120:	46b0      	mov	r8, r6
 8001122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001124:	200002cc 	.word	0x200002cc
 8001128:	200002c8 	.word	0x200002c8
 800112c:	08000ff1 	.word	0x08000ff1
 8001130:	08001db1 	.word	0x08001db1
 8001134:	08001ddd 	.word	0x08001ddd
 8001138:	08001e1d 	.word	0x08001e1d
 800113c:	00010009 	.word	0x00010009
 8001140:	08001e4d 	.word	0x08001e4d
 8001144:	00020012 	.word	0x00020012

08001148 <__sfp>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <__sfp+0x94>)
 800114c:	0007      	movs	r7, r0
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d03b      	beq.n	80011cc <__sfp+0x84>
 8001154:	4e22      	ldr	r6, [pc, #136]	@ (80011e0 <__sfp+0x98>)
 8001156:	6873      	ldr	r3, [r6, #4]
 8001158:	68b4      	ldr	r4, [r6, #8]
 800115a:	3b01      	subs	r3, #1
 800115c:	d503      	bpl.n	8001166 <__sfp+0x1e>
 800115e:	e01b      	b.n	8001198 <__sfp+0x50>
 8001160:	3468      	adds	r4, #104	@ 0x68
 8001162:	3b01      	subs	r3, #1
 8001164:	d318      	bcc.n	8001198 <__sfp+0x50>
 8001166:	220c      	movs	r2, #12
 8001168:	5ea5      	ldrsh	r5, [r4, r2]
 800116a:	2d00      	cmp	r5, #0
 800116c:	d1f8      	bne.n	8001160 <__sfp+0x18>
 800116e:	0020      	movs	r0, r4
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <__sfp+0x9c>)
 8001172:	2208      	movs	r2, #8
 8001174:	2100      	movs	r1, #0
 8001176:	60e3      	str	r3, [r4, #12]
 8001178:	6665      	str	r5, [r4, #100]	@ 0x64
 800117a:	6025      	str	r5, [r4, #0]
 800117c:	60a5      	str	r5, [r4, #8]
 800117e:	6065      	str	r5, [r4, #4]
 8001180:	6125      	str	r5, [r4, #16]
 8001182:	6165      	str	r5, [r4, #20]
 8001184:	61a5      	str	r5, [r4, #24]
 8001186:	305c      	adds	r0, #92	@ 0x5c
 8001188:	f7ff f9b8 	bl	80004fc <memset>
 800118c:	6365      	str	r5, [r4, #52]	@ 0x34
 800118e:	63a5      	str	r5, [r4, #56]	@ 0x38
 8001190:	64a5      	str	r5, [r4, #72]	@ 0x48
 8001192:	64e5      	str	r5, [r4, #76]	@ 0x4c
 8001194:	0020      	movs	r0, r4
 8001196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001198:	6835      	ldr	r5, [r6, #0]
 800119a:	2d00      	cmp	r5, #0
 800119c:	d001      	beq.n	80011a2 <__sfp+0x5a>
 800119e:	002e      	movs	r6, r5
 80011a0:	e7d9      	b.n	8001156 <__sfp+0xe>
 80011a2:	21d6      	movs	r1, #214	@ 0xd6
 80011a4:	0038      	movs	r0, r7
 80011a6:	0049      	lsls	r1, r1, #1
 80011a8:	f000 f944 	bl	8001434 <_malloc_r>
 80011ac:	1e04      	subs	r4, r0, #0
 80011ae:	d010      	beq.n	80011d2 <__sfp+0x8a>
 80011b0:	2304      	movs	r3, #4
 80011b2:	22d0      	movs	r2, #208	@ 0xd0
 80011b4:	6005      	str	r5, [r0, #0]
 80011b6:	0025      	movs	r5, r4
 80011b8:	6043      	str	r3, [r0, #4]
 80011ba:	300c      	adds	r0, #12
 80011bc:	2100      	movs	r1, #0
 80011be:	60a0      	str	r0, [r4, #8]
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	f7ff f99b 	bl	80004fc <memset>
 80011c6:	6034      	str	r4, [r6, #0]
 80011c8:	002e      	movs	r6, r5
 80011ca:	e7c4      	b.n	8001156 <__sfp+0xe>
 80011cc:	f7ff ff3e 	bl	800104c <global_stdio_init.part.0>
 80011d0:	e7c0      	b.n	8001154 <__sfp+0xc>
 80011d2:	230c      	movs	r3, #12
 80011d4:	6030      	str	r0, [r6, #0]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	e7dc      	b.n	8001194 <__sfp+0x4c>
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	200002c8 	.word	0x200002c8
 80011e0:	20000054 	.word	0x20000054
 80011e4:	ffff0001 	.word	0xffff0001

080011e8 <__sinit>:
 80011e8:	6a03      	ldr	r3, [r0, #32]
 80011ea:	b510      	push	{r4, lr}
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d000      	beq.n	80011f2 <__sinit+0xa>
 80011f0:	bd10      	pop	{r4, pc}
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__sinit+0x1c>)
 80011f4:	6203      	str	r3, [r0, #32]
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <__sinit+0x20>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f8      	bne.n	80011f0 <__sinit+0x8>
 80011fe:	f7ff ff25 	bl	800104c <global_stdio_init.part.0>
 8001202:	e7f5      	b.n	80011f0 <__sinit+0x8>
 8001204:	0800100d 	.word	0x0800100d
 8001208:	200002c8 	.word	0x200002c8

0800120c <__sfp_lock_acquire>:
 800120c:	4770      	bx	lr
 800120e:	46c0      	nop			@ (mov r8, r8)

08001210 <__sfp_lock_release>:
 8001210:	4770      	bx	lr
 8001212:	46c0      	nop			@ (mov r8, r8)

08001214 <__fp_lock_all>:
 8001214:	b510      	push	{r4, lr}
 8001216:	2000      	movs	r0, #0
 8001218:	4a02      	ldr	r2, [pc, #8]	@ (8001224 <__fp_lock_all+0x10>)
 800121a:	4903      	ldr	r1, [pc, #12]	@ (8001228 <__fp_lock_all+0x14>)
 800121c:	f000 fa46 	bl	80016ac <_fwalk_sglue>
 8001220:	bd10      	pop	{r4, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	20000054 	.word	0x20000054
 8001228:	08000fed 	.word	0x08000fed

0800122c <__fp_unlock_all>:
 800122c:	b510      	push	{r4, lr}
 800122e:	2000      	movs	r0, #0
 8001230:	4a02      	ldr	r2, [pc, #8]	@ (800123c <__fp_unlock_all+0x10>)
 8001232:	4903      	ldr	r1, [pc, #12]	@ (8001240 <__fp_unlock_all+0x14>)
 8001234:	f000 fa3a 	bl	80016ac <_fwalk_sglue>
 8001238:	bd10      	pop	{r4, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	20000054 	.word	0x20000054
 8001240:	08001049 	.word	0x08001049

08001244 <__sflush_r>:
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	46c6      	mov	lr, r8
 8001248:	b500      	push	{lr}
 800124a:	220c      	movs	r2, #12
 800124c:	5e8b      	ldrsh	r3, [r1, r2]
 800124e:	0007      	movs	r7, r0
 8001250:	000c      	movs	r4, r1
 8001252:	071a      	lsls	r2, r3, #28
 8001254:	d43c      	bmi.n	80012d0 <__sflush_r+0x8c>
 8001256:	684a      	ldr	r2, [r1, #4]
 8001258:	2a00      	cmp	r2, #0
 800125a:	dd5c      	ble.n	8001316 <__sflush_r+0xd2>
 800125c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800125e:	2e00      	cmp	r6, #0
 8001260:	d032      	beq.n	80012c8 <__sflush_r+0x84>
 8001262:	2200      	movs	r2, #0
 8001264:	683d      	ldr	r5, [r7, #0]
 8001266:	6a21      	ldr	r1, [r4, #32]
 8001268:	603a      	str	r2, [r7, #0]
 800126a:	04da      	lsls	r2, r3, #19
 800126c:	d457      	bmi.n	800131e <__sflush_r+0xda>
 800126e:	2200      	movs	r2, #0
 8001270:	2301      	movs	r3, #1
 8001272:	0038      	movs	r0, r7
 8001274:	47b0      	blx	r6
 8001276:	0002      	movs	r2, r0
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d065      	beq.n	8001348 <__sflush_r+0x104>
 800127c:	210c      	movs	r1, #12
 800127e:	5e63      	ldrsh	r3, [r4, r1]
 8001280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001282:	6a21      	ldr	r1, [r4, #32]
 8001284:	075b      	lsls	r3, r3, #29
 8001286:	d506      	bpl.n	8001296 <__sflush_r+0x52>
 8001288:	6863      	ldr	r3, [r4, #4]
 800128a:	1ad2      	subs	r2, r2, r3
 800128c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <__sflush_r+0x52>
 8001292:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001294:	1ad2      	subs	r2, r2, r3
 8001296:	2300      	movs	r3, #0
 8001298:	0038      	movs	r0, r7
 800129a:	47b0      	blx	r6
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	d040      	beq.n	8001322 <__sflush_r+0xde>
 80012a0:	2300      	movs	r3, #0
 80012a2:	6063      	str	r3, [r4, #4]
 80012a4:	6923      	ldr	r3, [r4, #16]
 80012a6:	6023      	str	r3, [r4, #0]
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	04db      	lsls	r3, r3, #19
 80012ac:	d44a      	bmi.n	8001344 <__sflush_r+0x100>
 80012ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012b0:	603d      	str	r5, [r7, #0]
 80012b2:	2900      	cmp	r1, #0
 80012b4:	d008      	beq.n	80012c8 <__sflush_r+0x84>
 80012b6:	0023      	movs	r3, r4
 80012b8:	3344      	adds	r3, #68	@ 0x44
 80012ba:	4299      	cmp	r1, r3
 80012bc:	d002      	beq.n	80012c4 <__sflush_r+0x80>
 80012be:	0038      	movs	r0, r7
 80012c0:	f000 f940 	bl	8001544 <_free_r>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80012c8:	2000      	movs	r0, #0
 80012ca:	bc80      	pop	{r7}
 80012cc:	46b8      	mov	r8, r7
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d0:	690e      	ldr	r6, [r1, #16]
 80012d2:	2e00      	cmp	r6, #0
 80012d4:	d0f8      	beq.n	80012c8 <__sflush_r+0x84>
 80012d6:	680d      	ldr	r5, [r1, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	1bad      	subs	r5, r5, r6
 80012dc:	600e      	str	r6, [r1, #0]
 80012de:	079b      	lsls	r3, r3, #30
 80012e0:	d100      	bne.n	80012e4 <__sflush_r+0xa0>
 80012e2:	694a      	ldr	r2, [r1, #20]
 80012e4:	60a2      	str	r2, [r4, #8]
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	dc04      	bgt.n	80012f4 <__sflush_r+0xb0>
 80012ea:	e7ed      	b.n	80012c8 <__sflush_r+0x84>
 80012ec:	1836      	adds	r6, r6, r0
 80012ee:	1a2d      	subs	r5, r5, r0
 80012f0:	2d00      	cmp	r5, #0
 80012f2:	dde9      	ble.n	80012c8 <__sflush_r+0x84>
 80012f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012f6:	0032      	movs	r2, r6
 80012f8:	4698      	mov	r8, r3
 80012fa:	0038      	movs	r0, r7
 80012fc:	002b      	movs	r3, r5
 80012fe:	6a21      	ldr	r1, [r4, #32]
 8001300:	47c0      	blx	r8
 8001302:	2800      	cmp	r0, #0
 8001304:	dcf2      	bgt.n	80012ec <__sflush_r+0xa8>
 8001306:	2240      	movs	r2, #64	@ 0x40
 8001308:	89a3      	ldrh	r3, [r4, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	2001      	movs	r0, #1
 8001310:	81a3      	strh	r3, [r4, #12]
 8001312:	4240      	negs	r0, r0
 8001314:	e7d9      	b.n	80012ca <__sflush_r+0x86>
 8001316:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001318:	2a00      	cmp	r2, #0
 800131a:	dc9f      	bgt.n	800125c <__sflush_r+0x18>
 800131c:	e7d4      	b.n	80012c8 <__sflush_r+0x84>
 800131e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001320:	e7b0      	b.n	8001284 <__sflush_r+0x40>
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	220c      	movs	r2, #12
 8001326:	5ea3      	ldrsh	r3, [r4, r2]
 8001328:	291d      	cmp	r1, #29
 800132a:	d816      	bhi.n	800135a <__sflush_r+0x116>
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <__sflush_r+0x11c>)
 800132e:	40ca      	lsrs	r2, r1
 8001330:	07d2      	lsls	r2, r2, #31
 8001332:	d512      	bpl.n	800135a <__sflush_r+0x116>
 8001334:	2200      	movs	r2, #0
 8001336:	6062      	str	r2, [r4, #4]
 8001338:	6922      	ldr	r2, [r4, #16]
 800133a:	6022      	str	r2, [r4, #0]
 800133c:	04db      	lsls	r3, r3, #19
 800133e:	d5b6      	bpl.n	80012ae <__sflush_r+0x6a>
 8001340:	2900      	cmp	r1, #0
 8001342:	d1b4      	bne.n	80012ae <__sflush_r+0x6a>
 8001344:	6560      	str	r0, [r4, #84]	@ 0x54
 8001346:	e7b2      	b.n	80012ae <__sflush_r+0x6a>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d096      	beq.n	800127c <__sflush_r+0x38>
 800134e:	2b1d      	cmp	r3, #29
 8001350:	d001      	beq.n	8001356 <__sflush_r+0x112>
 8001352:	2b16      	cmp	r3, #22
 8001354:	d1d7      	bne.n	8001306 <__sflush_r+0xc2>
 8001356:	603d      	str	r5, [r7, #0]
 8001358:	e7b6      	b.n	80012c8 <__sflush_r+0x84>
 800135a:	2240      	movs	r2, #64	@ 0x40
 800135c:	4313      	orrs	r3, r2
 800135e:	e7d6      	b.n	800130e <__sflush_r+0xca>
 8001360:	20400001 	.word	0x20400001

08001364 <_fflush_r>:
 8001364:	690b      	ldr	r3, [r1, #16]
 8001366:	b570      	push	{r4, r5, r6, lr}
 8001368:	0005      	movs	r5, r0
 800136a:	000c      	movs	r4, r1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <_fflush_r+0x1e>
 8001370:	2800      	cmp	r0, #0
 8001372:	d002      	beq.n	800137a <_fflush_r+0x16>
 8001374:	6a03      	ldr	r3, [r0, #32]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <_fflush_r+0x2c>
 800137a:	220c      	movs	r2, #12
 800137c:	5ea3      	ldrsh	r3, [r4, r2]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <_fflush_r+0x22>
 8001382:	2000      	movs	r0, #0
 8001384:	bd70      	pop	{r4, r5, r6, pc}
 8001386:	0021      	movs	r1, r4
 8001388:	0028      	movs	r0, r5
 800138a:	f7ff ff5b 	bl	8001244 <__sflush_r>
 800138e:	e7f9      	b.n	8001384 <_fflush_r+0x20>
 8001390:	f7ff ff2a 	bl	80011e8 <__sinit>
 8001394:	e7f1      	b.n	800137a <_fflush_r+0x16>
 8001396:	46c0      	nop			@ (mov r8, r8)

08001398 <fflush>:
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	1e04      	subs	r4, r0, #0
 800139c:	d018      	beq.n	80013d0 <fflush+0x38>
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <fflush+0x44>)
 80013a0:	681d      	ldr	r5, [r3, #0]
 80013a2:	6903      	ldr	r3, [r0, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <fflush+0x22>
 80013a8:	2d00      	cmp	r5, #0
 80013aa:	d002      	beq.n	80013b2 <fflush+0x1a>
 80013ac:	6a2b      	ldr	r3, [r5, #32]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00a      	beq.n	80013c8 <fflush+0x30>
 80013b2:	220c      	movs	r2, #12
 80013b4:	5ea3      	ldrsh	r3, [r4, r2]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <fflush+0x26>
 80013ba:	2000      	movs	r0, #0
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	0021      	movs	r1, r4
 80013c0:	0028      	movs	r0, r5
 80013c2:	f7ff ff3f 	bl	8001244 <__sflush_r>
 80013c6:	e7f9      	b.n	80013bc <fflush+0x24>
 80013c8:	0028      	movs	r0, r5
 80013ca:	f7ff ff0d 	bl	80011e8 <__sinit>
 80013ce:	e7f0      	b.n	80013b2 <fflush+0x1a>
 80013d0:	4a03      	ldr	r2, [pc, #12]	@ (80013e0 <fflush+0x48>)
 80013d2:	4904      	ldr	r1, [pc, #16]	@ (80013e4 <fflush+0x4c>)
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <fflush+0x50>)
 80013d6:	f000 f969 	bl	80016ac <_fwalk_sglue>
 80013da:	e7ef      	b.n	80013bc <fflush+0x24>
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000054 	.word	0x20000054
 80013e4:	08001365 	.word	0x08001365
 80013e8:	20000008 	.word	0x20000008

080013ec <sbrk_aligned>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	4e10      	ldr	r6, [pc, #64]	@ (8001430 <sbrk_aligned+0x44>)
 80013f0:	0005      	movs	r5, r0
 80013f2:	6833      	ldr	r3, [r6, #0]
 80013f4:	000c      	movs	r4, r1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <sbrk_aligned+0x3a>
 80013fa:	0021      	movs	r1, r4
 80013fc:	0028      	movs	r0, r5
 80013fe:	f000 fcc5 	bl	8001d8c <_sbrk_r>
 8001402:	1c43      	adds	r3, r0, #1
 8001404:	d00c      	beq.n	8001420 <sbrk_aligned+0x34>
 8001406:	2303      	movs	r3, #3
 8001408:	1cc4      	adds	r4, r0, #3
 800140a:	439c      	bics	r4, r3
 800140c:	42a0      	cmp	r0, r4
 800140e:	d005      	beq.n	800141c <sbrk_aligned+0x30>
 8001410:	1a21      	subs	r1, r4, r0
 8001412:	0028      	movs	r0, r5
 8001414:	f000 fcba 	bl	8001d8c <_sbrk_r>
 8001418:	3001      	adds	r0, #1
 800141a:	d001      	beq.n	8001420 <sbrk_aligned+0x34>
 800141c:	0020      	movs	r0, r4
 800141e:	bd70      	pop	{r4, r5, r6, pc}
 8001420:	2401      	movs	r4, #1
 8001422:	4264      	negs	r4, r4
 8001424:	e7fa      	b.n	800141c <sbrk_aligned+0x30>
 8001426:	2100      	movs	r1, #0
 8001428:	f000 fcb0 	bl	8001d8c <_sbrk_r>
 800142c:	6030      	str	r0, [r6, #0]
 800142e:	e7e4      	b.n	80013fa <sbrk_aligned+0xe>
 8001430:	20000404 	.word	0x20000404

08001434 <_malloc_r>:
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	2303      	movs	r3, #3
 8001438:	46ce      	mov	lr, r9
 800143a:	4647      	mov	r7, r8
 800143c:	1ccd      	adds	r5, r1, #3
 800143e:	439d      	bics	r5, r3
 8001440:	3508      	adds	r5, #8
 8001442:	0006      	movs	r6, r0
 8001444:	b580      	push	{r7, lr}
 8001446:	2d0c      	cmp	r5, #12
 8001448:	d21e      	bcs.n	8001488 <_malloc_r+0x54>
 800144a:	250c      	movs	r5, #12
 800144c:	42a9      	cmp	r1, r5
 800144e:	d81d      	bhi.n	800148c <_malloc_r+0x58>
 8001450:	0030      	movs	r0, r6
 8001452:	f000 fbc3 	bl	8001bdc <__malloc_lock>
 8001456:	4f3a      	ldr	r7, [pc, #232]	@ (8001540 <_malloc_r+0x10c>)
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	2a00      	cmp	r2, #0
 800145c:	d01a      	beq.n	8001494 <_malloc_r+0x60>
 800145e:	0014      	movs	r4, r2
 8001460:	e004      	b.n	800146c <_malloc_r+0x38>
 8001462:	6863      	ldr	r3, [r4, #4]
 8001464:	0022      	movs	r2, r4
 8001466:	2b00      	cmp	r3, #0
 8001468:	d014      	beq.n	8001494 <_malloc_r+0x60>
 800146a:	001c      	movs	r4, r3
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	1b5b      	subs	r3, r3, r5
 8001470:	d4f7      	bmi.n	8001462 <_malloc_r+0x2e>
 8001472:	2b0b      	cmp	r3, #11
 8001474:	d927      	bls.n	80014c6 <_malloc_r+0x92>
 8001476:	1961      	adds	r1, r4, r5
 8001478:	6025      	str	r5, [r4, #0]
 800147a:	4294      	cmp	r4, r2
 800147c:	d05b      	beq.n	8001536 <_malloc_r+0x102>
 800147e:	6051      	str	r1, [r2, #4]
 8001480:	600b      	str	r3, [r1, #0]
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	604b      	str	r3, [r1, #4]
 8001486:	e00d      	b.n	80014a4 <_malloc_r+0x70>
 8001488:	2d00      	cmp	r5, #0
 800148a:	dadf      	bge.n	800144c <_malloc_r+0x18>
 800148c:	230c      	movs	r3, #12
 800148e:	2000      	movs	r0, #0
 8001490:	6033      	str	r3, [r6, #0]
 8001492:	e014      	b.n	80014be <_malloc_r+0x8a>
 8001494:	0029      	movs	r1, r5
 8001496:	0030      	movs	r0, r6
 8001498:	f7ff ffa8 	bl	80013ec <sbrk_aligned>
 800149c:	0004      	movs	r4, r0
 800149e:	1c43      	adds	r3, r0, #1
 80014a0:	d019      	beq.n	80014d6 <_malloc_r+0xa2>
 80014a2:	6005      	str	r5, [r0, #0]
 80014a4:	0030      	movs	r0, r6
 80014a6:	f000 fb9b 	bl	8001be0 <__malloc_unlock>
 80014aa:	0020      	movs	r0, r4
 80014ac:	2207      	movs	r2, #7
 80014ae:	300b      	adds	r0, #11
 80014b0:	1d23      	adds	r3, r4, #4
 80014b2:	4390      	bics	r0, r2
 80014b4:	1ac2      	subs	r2, r0, r3
 80014b6:	4298      	cmp	r0, r3
 80014b8:	d001      	beq.n	80014be <_malloc_r+0x8a>
 80014ba:	1a1b      	subs	r3, r3, r0
 80014bc:	50a3      	str	r3, [r4, r2]
 80014be:	bcc0      	pop	{r6, r7}
 80014c0:	46b9      	mov	r9, r7
 80014c2:	46b0      	mov	r8, r6
 80014c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014c6:	6863      	ldr	r3, [r4, #4]
 80014c8:	4294      	cmp	r4, r2
 80014ca:	d002      	beq.n	80014d2 <_malloc_r+0x9e>
 80014cc:	6053      	str	r3, [r2, #4]
 80014ce:	e7e9      	b.n	80014a4 <_malloc_r+0x70>
 80014d0:	4643      	mov	r3, r8
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	e7e6      	b.n	80014a4 <_malloc_r+0x70>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4698      	mov	r8, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d024      	beq.n	8001528 <_malloc_r+0xf4>
 80014de:	4644      	mov	r4, r8
 80014e0:	6863      	ldr	r3, [r4, #4]
 80014e2:	4698      	mov	r8, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1fa      	bne.n	80014de <_malloc_r+0xaa>
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	2100      	movs	r1, #0
 80014ec:	4699      	mov	r9, r3
 80014ee:	0030      	movs	r0, r6
 80014f0:	44a1      	add	r9, r4
 80014f2:	f000 fc4b 	bl	8001d8c <_sbrk_r>
 80014f6:	4581      	cmp	r9, r0
 80014f8:	d116      	bne.n	8001528 <_malloc_r+0xf4>
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	0030      	movs	r0, r6
 80014fe:	1aed      	subs	r5, r5, r3
 8001500:	0029      	movs	r1, r5
 8001502:	f7ff ff73 	bl	80013ec <sbrk_aligned>
 8001506:	3001      	adds	r0, #1
 8001508:	d00e      	beq.n	8001528 <_malloc_r+0xf4>
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	195b      	adds	r3, r3, r5
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	6853      	ldr	r3, [r2, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_malloc_r+0xea>
 8001518:	e7da      	b.n	80014d0 <_malloc_r+0x9c>
 800151a:	001a      	movs	r2, r3
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	429c      	cmp	r4, r3
 8001520:	d1fb      	bne.n	800151a <_malloc_r+0xe6>
 8001522:	2300      	movs	r3, #0
 8001524:	6053      	str	r3, [r2, #4]
 8001526:	e7bd      	b.n	80014a4 <_malloc_r+0x70>
 8001528:	230c      	movs	r3, #12
 800152a:	0030      	movs	r0, r6
 800152c:	6033      	str	r3, [r6, #0]
 800152e:	f000 fb57 	bl	8001be0 <__malloc_unlock>
 8001532:	2000      	movs	r0, #0
 8001534:	e7c3      	b.n	80014be <_malloc_r+0x8a>
 8001536:	6079      	str	r1, [r7, #4]
 8001538:	600b      	str	r3, [r1, #0]
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	604b      	str	r3, [r1, #4]
 800153e:	e7b1      	b.n	80014a4 <_malloc_r+0x70>
 8001540:	20000404 	.word	0x20000404

08001544 <_free_r>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	0005      	movs	r5, r0
 8001548:	2900      	cmp	r1, #0
 800154a:	d015      	beq.n	8001578 <_free_r+0x34>
 800154c:	1f0c      	subs	r4, r1, #4
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db23      	blt.n	800159c <_free_r+0x58>
 8001554:	0028      	movs	r0, r5
 8001556:	f000 fb41 	bl	8001bdc <__malloc_lock>
 800155a:	4a27      	ldr	r2, [pc, #156]	@ (80015f8 <_free_r+0xb4>)
 800155c:	6813      	ldr	r3, [r2, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <_free_r+0x2a>
 8001562:	42a3      	cmp	r3, r4
 8001564:	d90b      	bls.n	800157e <_free_r+0x3a>
 8001566:	6821      	ldr	r1, [r4, #0]
 8001568:	1860      	adds	r0, r4, r1
 800156a:	4283      	cmp	r3, r0
 800156c:	d02c      	beq.n	80015c8 <_free_r+0x84>
 800156e:	0028      	movs	r0, r5
 8001570:	6063      	str	r3, [r4, #4]
 8001572:	6014      	str	r4, [r2, #0]
 8001574:	f000 fb34 	bl	8001be0 <__malloc_unlock>
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	42a3      	cmp	r3, r4
 800157c:	d810      	bhi.n	80015a0 <_free_r+0x5c>
 800157e:	001a      	movs	r2, r3
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <_free_r+0x36>
 8001586:	6810      	ldr	r0, [r2, #0]
 8001588:	1811      	adds	r1, r2, r0
 800158a:	428c      	cmp	r4, r1
 800158c:	d018      	beq.n	80015c0 <_free_r+0x7c>
 800158e:	d32c      	bcc.n	80015ea <_free_r+0xa6>
 8001590:	6063      	str	r3, [r4, #4]
 8001592:	6054      	str	r4, [r2, #4]
 8001594:	0028      	movs	r0, r5
 8001596:	f000 fb23 	bl	8001be0 <__malloc_unlock>
 800159a:	e7ed      	b.n	8001578 <_free_r+0x34>
 800159c:	18e4      	adds	r4, r4, r3
 800159e:	e7d9      	b.n	8001554 <_free_r+0x10>
 80015a0:	6811      	ldr	r1, [r2, #0]
 80015a2:	1850      	adds	r0, r2, r1
 80015a4:	42a0      	cmp	r0, r4
 80015a6:	d014      	beq.n	80015d2 <_free_r+0x8e>
 80015a8:	d81f      	bhi.n	80015ea <_free_r+0xa6>
 80015aa:	6821      	ldr	r1, [r4, #0]
 80015ac:	1860      	adds	r0, r4, r1
 80015ae:	4283      	cmp	r3, r0
 80015b0:	d1ee      	bne.n	8001590 <_free_r+0x4c>
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	1841      	adds	r1, r0, r1
 80015b8:	6021      	str	r1, [r4, #0]
 80015ba:	6063      	str	r3, [r4, #4]
 80015bc:	6054      	str	r4, [r2, #4]
 80015be:	e7e9      	b.n	8001594 <_free_r+0x50>
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	181b      	adds	r3, r3, r0
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e7e5      	b.n	8001594 <_free_r+0x50>
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	1841      	adds	r1, r0, r1
 80015ce:	6021      	str	r1, [r4, #0]
 80015d0:	e7cd      	b.n	800156e <_free_r+0x2a>
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	1809      	adds	r1, r1, r0
 80015d6:	1850      	adds	r0, r2, r1
 80015d8:	6011      	str	r1, [r2, #0]
 80015da:	4283      	cmp	r3, r0
 80015dc:	d1da      	bne.n	8001594 <_free_r+0x50>
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	1841      	adds	r1, r0, r1
 80015e4:	6011      	str	r1, [r2, #0]
 80015e6:	6053      	str	r3, [r2, #4]
 80015e8:	e7d4      	b.n	8001594 <_free_r+0x50>
 80015ea:	230c      	movs	r3, #12
 80015ec:	0028      	movs	r0, r5
 80015ee:	602b      	str	r3, [r5, #0]
 80015f0:	f000 faf6 	bl	8001be0 <__malloc_unlock>
 80015f4:	e7c0      	b.n	8001578 <_free_r+0x34>
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	20000408 	.word	0x20000408

080015fc <memmove>:
 80015fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fe:	4288      	cmp	r0, r1
 8001600:	d90a      	bls.n	8001618 <memmove+0x1c>
 8001602:	188b      	adds	r3, r1, r2
 8001604:	4298      	cmp	r0, r3
 8001606:	d207      	bcs.n	8001618 <memmove+0x1c>
 8001608:	1e53      	subs	r3, r2, #1
 800160a:	2a00      	cmp	r2, #0
 800160c:	d003      	beq.n	8001616 <memmove+0x1a>
 800160e:	5cca      	ldrb	r2, [r1, r3]
 8001610:	54c2      	strb	r2, [r0, r3]
 8001612:	3b01      	subs	r3, #1
 8001614:	d2fb      	bcs.n	800160e <memmove+0x12>
 8001616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001618:	0005      	movs	r5, r0
 800161a:	2a0f      	cmp	r2, #15
 800161c:	d80a      	bhi.n	8001634 <memmove+0x38>
 800161e:	1e56      	subs	r6, r2, #1
 8001620:	2a00      	cmp	r2, #0
 8001622:	d0f8      	beq.n	8001616 <memmove+0x1a>
 8001624:	2300      	movs	r3, #0
 8001626:	5ccc      	ldrb	r4, [r1, r3]
 8001628:	001a      	movs	r2, r3
 800162a:	54ec      	strb	r4, [r5, r3]
 800162c:	3301      	adds	r3, #1
 800162e:	4296      	cmp	r6, r2
 8001630:	d1f9      	bne.n	8001626 <memmove+0x2a>
 8001632:	e7f0      	b.n	8001616 <memmove+0x1a>
 8001634:	2703      	movs	r7, #3
 8001636:	003e      	movs	r6, r7
 8001638:	430d      	orrs	r5, r1
 800163a:	000c      	movs	r4, r1
 800163c:	0003      	movs	r3, r0
 800163e:	402e      	ands	r6, r5
 8001640:	422f      	tst	r7, r5
 8001642:	d12d      	bne.n	80016a0 <memmove+0xa4>
 8001644:	0015      	movs	r5, r2
 8001646:	3d10      	subs	r5, #16
 8001648:	092d      	lsrs	r5, r5, #4
 800164a:	46ac      	mov	ip, r5
 800164c:	012f      	lsls	r7, r5, #4
 800164e:	183f      	adds	r7, r7, r0
 8001650:	6825      	ldr	r5, [r4, #0]
 8001652:	601d      	str	r5, [r3, #0]
 8001654:	6865      	ldr	r5, [r4, #4]
 8001656:	605d      	str	r5, [r3, #4]
 8001658:	68a5      	ldr	r5, [r4, #8]
 800165a:	609d      	str	r5, [r3, #8]
 800165c:	68e5      	ldr	r5, [r4, #12]
 800165e:	3410      	adds	r4, #16
 8001660:	60dd      	str	r5, [r3, #12]
 8001662:	001d      	movs	r5, r3
 8001664:	3310      	adds	r3, #16
 8001666:	42bd      	cmp	r5, r7
 8001668:	d1f2      	bne.n	8001650 <memmove+0x54>
 800166a:	4665      	mov	r5, ip
 800166c:	230f      	movs	r3, #15
 800166e:	240c      	movs	r4, #12
 8001670:	3501      	adds	r5, #1
 8001672:	012d      	lsls	r5, r5, #4
 8001674:	1949      	adds	r1, r1, r5
 8001676:	4013      	ands	r3, r2
 8001678:	1945      	adds	r5, r0, r5
 800167a:	4214      	tst	r4, r2
 800167c:	d013      	beq.n	80016a6 <memmove+0xaa>
 800167e:	3b04      	subs	r3, #4
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3301      	adds	r3, #1
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	598c      	ldr	r4, [r1, r6]
 8001688:	51ac      	str	r4, [r5, r6]
 800168a:	3604      	adds	r6, #4
 800168c:	429e      	cmp	r6, r3
 800168e:	d1fa      	bne.n	8001686 <memmove+0x8a>
 8001690:	2303      	movs	r3, #3
 8001692:	401a      	ands	r2, r3
 8001694:	19ad      	adds	r5, r5, r6
 8001696:	1989      	adds	r1, r1, r6
 8001698:	1e56      	subs	r6, r2, #1
 800169a:	2a00      	cmp	r2, #0
 800169c:	d1c2      	bne.n	8001624 <memmove+0x28>
 800169e:	e7ba      	b.n	8001616 <memmove+0x1a>
 80016a0:	0005      	movs	r5, r0
 80016a2:	1e56      	subs	r6, r2, #1
 80016a4:	e7be      	b.n	8001624 <memmove+0x28>
 80016a6:	001a      	movs	r2, r3
 80016a8:	e7b9      	b.n	800161e <memmove+0x22>
 80016aa:	46c0      	nop			@ (mov r8, r8)

080016ac <_fwalk_sglue>:
 80016ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ae:	4647      	mov	r7, r8
 80016b0:	46ce      	mov	lr, r9
 80016b2:	4688      	mov	r8, r1
 80016b4:	b580      	push	{r7, lr}
 80016b6:	4681      	mov	r9, r0
 80016b8:	0017      	movs	r7, r2
 80016ba:	2600      	movs	r6, #0
 80016bc:	687d      	ldr	r5, [r7, #4]
 80016be:	68bc      	ldr	r4, [r7, #8]
 80016c0:	3d01      	subs	r5, #1
 80016c2:	d40d      	bmi.n	80016e0 <_fwalk_sglue+0x34>
 80016c4:	89a3      	ldrh	r3, [r4, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d907      	bls.n	80016da <_fwalk_sglue+0x2e>
 80016ca:	220e      	movs	r2, #14
 80016cc:	5ea3      	ldrsh	r3, [r4, r2]
 80016ce:	3301      	adds	r3, #1
 80016d0:	d003      	beq.n	80016da <_fwalk_sglue+0x2e>
 80016d2:	0021      	movs	r1, r4
 80016d4:	4648      	mov	r0, r9
 80016d6:	47c0      	blx	r8
 80016d8:	4306      	orrs	r6, r0
 80016da:	3468      	adds	r4, #104	@ 0x68
 80016dc:	3d01      	subs	r5, #1
 80016de:	d2f1      	bcs.n	80016c4 <_fwalk_sglue+0x18>
 80016e0:	683f      	ldr	r7, [r7, #0]
 80016e2:	2f00      	cmp	r7, #0
 80016e4:	d1ea      	bne.n	80016bc <_fwalk_sglue+0x10>
 80016e6:	0030      	movs	r0, r6
 80016e8:	bcc0      	pop	{r6, r7}
 80016ea:	46b9      	mov	r9, r7
 80016ec:	46b0      	mov	r8, r6
 80016ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016f0 <__swsetup_r>:
 80016f0:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <__swsetup_r+0xc8>)
 80016f2:	b570      	push	{r4, r5, r6, lr}
 80016f4:	0005      	movs	r5, r0
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	000c      	movs	r4, r1
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d002      	beq.n	8001704 <__swsetup_r+0x14>
 80016fe:	6a02      	ldr	r2, [r0, #32]
 8001700:	2a00      	cmp	r2, #0
 8001702:	d04f      	beq.n	80017a4 <__swsetup_r+0xb4>
 8001704:	220c      	movs	r2, #12
 8001706:	5ea3      	ldrsh	r3, [r4, r2]
 8001708:	071a      	lsls	r2, r3, #28
 800170a:	d51d      	bpl.n	8001748 <__swsetup_r+0x58>
 800170c:	6922      	ldr	r2, [r4, #16]
 800170e:	2a00      	cmp	r2, #0
 8001710:	d024      	beq.n	800175c <__swsetup_r+0x6c>
 8001712:	07d9      	lsls	r1, r3, #31
 8001714:	d508      	bpl.n	8001728 <__swsetup_r+0x38>
 8001716:	2100      	movs	r1, #0
 8001718:	60a1      	str	r1, [r4, #8]
 800171a:	6961      	ldr	r1, [r4, #20]
 800171c:	2000      	movs	r0, #0
 800171e:	4249      	negs	r1, r1
 8001720:	61a1      	str	r1, [r4, #24]
 8001722:	2a00      	cmp	r2, #0
 8001724:	d008      	beq.n	8001738 <__swsetup_r+0x48>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	2100      	movs	r1, #0
 800172a:	0798      	lsls	r0, r3, #30
 800172c:	d400      	bmi.n	8001730 <__swsetup_r+0x40>
 800172e:	6961      	ldr	r1, [r4, #20]
 8001730:	2000      	movs	r0, #0
 8001732:	60a1      	str	r1, [r4, #8]
 8001734:	2a00      	cmp	r2, #0
 8001736:	d1f6      	bne.n	8001726 <__swsetup_r+0x36>
 8001738:	061a      	lsls	r2, r3, #24
 800173a:	d5f4      	bpl.n	8001726 <__swsetup_r+0x36>
 800173c:	2240      	movs	r2, #64	@ 0x40
 800173e:	4313      	orrs	r3, r2
 8001740:	81a3      	strh	r3, [r4, #12]
 8001742:	2001      	movs	r0, #1
 8001744:	4240      	negs	r0, r0
 8001746:	e7ee      	b.n	8001726 <__swsetup_r+0x36>
 8001748:	06da      	lsls	r2, r3, #27
 800174a:	d52e      	bpl.n	80017aa <__swsetup_r+0xba>
 800174c:	075a      	lsls	r2, r3, #29
 800174e:	d414      	bmi.n	800177a <__swsetup_r+0x8a>
 8001750:	6922      	ldr	r2, [r4, #16]
 8001752:	2108      	movs	r1, #8
 8001754:	430b      	orrs	r3, r1
 8001756:	81a3      	strh	r3, [r4, #12]
 8001758:	2a00      	cmp	r2, #0
 800175a:	d1da      	bne.n	8001712 <__swsetup_r+0x22>
 800175c:	21a0      	movs	r1, #160	@ 0xa0
 800175e:	2080      	movs	r0, #128	@ 0x80
 8001760:	0089      	lsls	r1, r1, #2
 8001762:	0080      	lsls	r0, r0, #2
 8001764:	4019      	ands	r1, r3
 8001766:	4281      	cmp	r1, r0
 8001768:	d0d3      	beq.n	8001712 <__swsetup_r+0x22>
 800176a:	0021      	movs	r1, r4
 800176c:	0028      	movs	r0, r5
 800176e:	f000 fa39 	bl	8001be4 <__smakebuf_r>
 8001772:	220c      	movs	r2, #12
 8001774:	5ea3      	ldrsh	r3, [r4, r2]
 8001776:	6922      	ldr	r2, [r4, #16]
 8001778:	e7cb      	b.n	8001712 <__swsetup_r+0x22>
 800177a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800177c:	2900      	cmp	r1, #0
 800177e:	d00a      	beq.n	8001796 <__swsetup_r+0xa6>
 8001780:	0022      	movs	r2, r4
 8001782:	3244      	adds	r2, #68	@ 0x44
 8001784:	4291      	cmp	r1, r2
 8001786:	d004      	beq.n	8001792 <__swsetup_r+0xa2>
 8001788:	0028      	movs	r0, r5
 800178a:	f7ff fedb 	bl	8001544 <_free_r>
 800178e:	220c      	movs	r2, #12
 8001790:	5ea3      	ldrsh	r3, [r4, r2]
 8001792:	2200      	movs	r2, #0
 8001794:	6362      	str	r2, [r4, #52]	@ 0x34
 8001796:	2224      	movs	r2, #36	@ 0x24
 8001798:	4393      	bics	r3, r2
 800179a:	2200      	movs	r2, #0
 800179c:	6062      	str	r2, [r4, #4]
 800179e:	6922      	ldr	r2, [r4, #16]
 80017a0:	6022      	str	r2, [r4, #0]
 80017a2:	e7d6      	b.n	8001752 <__swsetup_r+0x62>
 80017a4:	f7ff fd20 	bl	80011e8 <__sinit>
 80017a8:	e7ac      	b.n	8001704 <__swsetup_r+0x14>
 80017aa:	2209      	movs	r2, #9
 80017ac:	602a      	str	r2, [r5, #0]
 80017ae:	2240      	movs	r2, #64	@ 0x40
 80017b0:	4313      	orrs	r3, r2
 80017b2:	81a3      	strh	r3, [r4, #12]
 80017b4:	e7c5      	b.n	8001742 <__swsetup_r+0x52>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	20000004 	.word	0x20000004

080017bc <_realloc_r>:
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	46c6      	mov	lr, r8
 80017c0:	0007      	movs	r7, r0
 80017c2:	000e      	movs	r6, r1
 80017c4:	0014      	movs	r4, r2
 80017c6:	b500      	push	{lr}
 80017c8:	2900      	cmp	r1, #0
 80017ca:	d02d      	beq.n	8001828 <_realloc_r+0x6c>
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	d027      	beq.n	8001820 <_realloc_r+0x64>
 80017d0:	f000 fb42 	bl	8001e58 <_malloc_usable_size_r>
 80017d4:	4680      	mov	r8, r0
 80017d6:	4284      	cmp	r4, r0
 80017d8:	d803      	bhi.n	80017e2 <_realloc_r+0x26>
 80017da:	0035      	movs	r5, r6
 80017dc:	0843      	lsrs	r3, r0, #1
 80017de:	42a3      	cmp	r3, r4
 80017e0:	d310      	bcc.n	8001804 <_realloc_r+0x48>
 80017e2:	0021      	movs	r1, r4
 80017e4:	0038      	movs	r0, r7
 80017e6:	f7ff fe25 	bl	8001434 <_malloc_r>
 80017ea:	1e05      	subs	r5, r0, #0
 80017ec:	d00a      	beq.n	8001804 <_realloc_r+0x48>
 80017ee:	0022      	movs	r2, r4
 80017f0:	4544      	cmp	r4, r8
 80017f2:	d80b      	bhi.n	800180c <_realloc_r+0x50>
 80017f4:	0031      	movs	r1, r6
 80017f6:	0028      	movs	r0, r5
 80017f8:	f7fe ff06 	bl	8000608 <memcpy>
 80017fc:	0031      	movs	r1, r6
 80017fe:	0038      	movs	r0, r7
 8001800:	f7ff fea0 	bl	8001544 <_free_r>
 8001804:	0028      	movs	r0, r5
 8001806:	bc80      	pop	{r7}
 8001808:	46b8      	mov	r8, r7
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180c:	0031      	movs	r1, r6
 800180e:	4642      	mov	r2, r8
 8001810:	0028      	movs	r0, r5
 8001812:	f7fe fef9 	bl	8000608 <memcpy>
 8001816:	0031      	movs	r1, r6
 8001818:	0038      	movs	r0, r7
 800181a:	f7ff fe93 	bl	8001544 <_free_r>
 800181e:	e7f1      	b.n	8001804 <_realloc_r+0x48>
 8001820:	f7ff fe90 	bl	8001544 <_free_r>
 8001824:	2500      	movs	r5, #0
 8001826:	e7ed      	b.n	8001804 <_realloc_r+0x48>
 8001828:	0011      	movs	r1, r2
 800182a:	f7ff fe03 	bl	8001434 <_malloc_r>
 800182e:	0005      	movs	r5, r0
 8001830:	e7e8      	b.n	8001804 <_realloc_r+0x48>
 8001832:	46c0      	nop			@ (mov r8, r8)

08001834 <_printf_common>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	4657      	mov	r7, sl
 8001838:	464e      	mov	r6, r9
 800183a:	4645      	mov	r5, r8
 800183c:	46de      	mov	lr, fp
 800183e:	b5e0      	push	{r5, r6, r7, lr}
 8001840:	001f      	movs	r7, r3
 8001842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001844:	4692      	mov	sl, r2
 8001846:	4698      	mov	r8, r3
 8001848:	690a      	ldr	r2, [r1, #16]
 800184a:	688b      	ldr	r3, [r1, #8]
 800184c:	0006      	movs	r6, r0
 800184e:	000c      	movs	r4, r1
 8001850:	429a      	cmp	r2, r3
 8001852:	da00      	bge.n	8001856 <_printf_common+0x22>
 8001854:	001a      	movs	r2, r3
 8001856:	4653      	mov	r3, sl
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	2343      	movs	r3, #67	@ 0x43
 800185c:	5ce3      	ldrb	r3, [r4, r3]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <_printf_common+0x34>
 8001862:	4651      	mov	r1, sl
 8001864:	3201      	adds	r2, #1
 8001866:	600a      	str	r2, [r1, #0]
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	0691      	lsls	r1, r2, #26
 800186c:	d561      	bpl.n	8001932 <_printf_common+0xfe>
 800186e:	4653      	mov	r3, sl
 8001870:	4652      	mov	r2, sl
 8001872:	2006      	movs	r0, #6
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3302      	adds	r3, #2
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	0011      	movs	r1, r2
 800187e:	4210      	tst	r0, r2
 8001880:	d108      	bne.n	8001894 <_printf_common+0x60>
 8001882:	2000      	movs	r0, #0
 8001884:	4681      	mov	r9, r0
 8001886:	3019      	adds	r0, #25
 8001888:	4683      	mov	fp, r0
 800188a:	68e1      	ldr	r1, [r4, #12]
 800188c:	44a3      	add	fp, r4
 800188e:	4299      	cmp	r1, r3
 8001890:	dc47      	bgt.n	8001922 <_printf_common+0xee>
 8001892:	0011      	movs	r1, r2
 8001894:	2343      	movs	r3, #67	@ 0x43
 8001896:	5ce3      	ldrb	r3, [r4, r3]
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	4193      	sbcs	r3, r2
 800189c:	0689      	lsls	r1, r1, #26
 800189e:	d50a      	bpl.n	80018b6 <_printf_common+0x82>
 80018a0:	2030      	movs	r0, #48	@ 0x30
 80018a2:	18e1      	adds	r1, r4, r3
 80018a4:	3143      	adds	r1, #67	@ 0x43
 80018a6:	7008      	strb	r0, [r1, #0]
 80018a8:	2145      	movs	r1, #69	@ 0x45
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	5c61      	ldrb	r1, [r4, r1]
 80018ae:	18a2      	adds	r2, r4, r2
 80018b0:	3243      	adds	r2, #67	@ 0x43
 80018b2:	3302      	adds	r3, #2
 80018b4:	7011      	strb	r1, [r2, #0]
 80018b6:	0022      	movs	r2, r4
 80018b8:	0039      	movs	r1, r7
 80018ba:	0030      	movs	r0, r6
 80018bc:	3243      	adds	r2, #67	@ 0x43
 80018be:	47c0      	blx	r8
 80018c0:	3001      	adds	r0, #1
 80018c2:	d01d      	beq.n	8001900 <_printf_common+0xcc>
 80018c4:	4653      	mov	r3, sl
 80018c6:	2506      	movs	r5, #6
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68e1      	ldr	r1, [r4, #12]
 80018cc:	469c      	mov	ip, r3
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	68a2      	ldr	r2, [r4, #8]
 80018d2:	6920      	ldr	r0, [r4, #16]
 80018d4:	402b      	ands	r3, r5
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d031      	beq.n	800193e <_printf_common+0x10a>
 80018da:	4282      	cmp	r2, r0
 80018dc:	dd39      	ble.n	8001952 <_printf_common+0x11e>
 80018de:	2300      	movs	r3, #0
 80018e0:	4699      	mov	r9, r3
 80018e2:	1a12      	subs	r2, r2, r0
 80018e4:	4491      	add	r9, r2
 80018e6:	2500      	movs	r5, #0
 80018e8:	341a      	adds	r4, #26
 80018ea:	e002      	b.n	80018f2 <_printf_common+0xbe>
 80018ec:	3501      	adds	r5, #1
 80018ee:	454d      	cmp	r5, r9
 80018f0:	da2f      	bge.n	8001952 <_printf_common+0x11e>
 80018f2:	2301      	movs	r3, #1
 80018f4:	0022      	movs	r2, r4
 80018f6:	0039      	movs	r1, r7
 80018f8:	0030      	movs	r0, r6
 80018fa:	47c0      	blx	r8
 80018fc:	3001      	adds	r0, #1
 80018fe:	d1f5      	bne.n	80018ec <_printf_common+0xb8>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	bcf0      	pop	{r4, r5, r6, r7}
 8001906:	46bb      	mov	fp, r7
 8001908:	46b2      	mov	sl, r6
 800190a:	46a9      	mov	r9, r5
 800190c:	46a0      	mov	r8, r4
 800190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001910:	2301      	movs	r3, #1
 8001912:	469c      	mov	ip, r3
 8001914:	4653      	mov	r3, sl
 8001916:	68e5      	ldr	r5, [r4, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	44e1      	add	r9, ip
 800191c:	1aed      	subs	r5, r5, r3
 800191e:	454d      	cmp	r5, r9
 8001920:	dd24      	ble.n	800196c <_printf_common+0x138>
 8001922:	2301      	movs	r3, #1
 8001924:	465a      	mov	r2, fp
 8001926:	0039      	movs	r1, r7
 8001928:	0030      	movs	r0, r6
 800192a:	47c0      	blx	r8
 800192c:	3001      	adds	r0, #1
 800192e:	d1ef      	bne.n	8001910 <_printf_common+0xdc>
 8001930:	e7e6      	b.n	8001900 <_printf_common+0xcc>
 8001932:	2106      	movs	r1, #6
 8001934:	4211      	tst	r1, r2
 8001936:	d00e      	beq.n	8001956 <_printf_common+0x122>
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	4193      	sbcs	r3, r2
 800193c:	e7bb      	b.n	80018b6 <_printf_common+0x82>
 800193e:	4663      	mov	r3, ip
 8001940:	1ac9      	subs	r1, r1, r3
 8001942:	43cb      	mvns	r3, r1
 8001944:	17db      	asrs	r3, r3, #31
 8001946:	400b      	ands	r3, r1
 8001948:	4699      	mov	r9, r3
 800194a:	4282      	cmp	r2, r0
 800194c:	dcc9      	bgt.n	80018e2 <_printf_common+0xae>
 800194e:	2900      	cmp	r1, #0
 8001950:	dcc9      	bgt.n	80018e6 <_printf_common+0xb2>
 8001952:	2000      	movs	r0, #0
 8001954:	e7d6      	b.n	8001904 <_printf_common+0xd0>
 8001956:	2000      	movs	r0, #0
 8001958:	4653      	mov	r3, sl
 800195a:	4681      	mov	r9, r0
 800195c:	3019      	adds	r0, #25
 800195e:	4683      	mov	fp, r0
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68e1      	ldr	r1, [r4, #12]
 8001964:	44a3      	add	fp, r4
 8001966:	4299      	cmp	r1, r3
 8001968:	dcdb      	bgt.n	8001922 <_printf_common+0xee>
 800196a:	e792      	b.n	8001892 <_printf_common+0x5e>
 800196c:	2343      	movs	r3, #67	@ 0x43
 800196e:	6821      	ldr	r1, [r4, #0]
 8001970:	5ce3      	ldrb	r3, [r4, r3]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	4193      	sbcs	r3, r2
 8001976:	0689      	lsls	r1, r1, #26
 8001978:	d492      	bmi.n	80018a0 <_printf_common+0x6c>
 800197a:	e79c      	b.n	80018b6 <_printf_common+0x82>

0800197c <_printf_i>:
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	464e      	mov	r6, r9
 8001980:	4699      	mov	r9, r3
 8001982:	2343      	movs	r3, #67	@ 0x43
 8001984:	469c      	mov	ip, r3
 8001986:	4657      	mov	r7, sl
 8001988:	4645      	mov	r5, r8
 800198a:	46de      	mov	lr, fp
 800198c:	448c      	add	ip, r1
 800198e:	4663      	mov	r3, ip
 8001990:	b5e0      	push	{r5, r6, r7, lr}
 8001992:	b087      	sub	sp, #28
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	000c      	movs	r4, r1
 8001998:	7e09      	ldrb	r1, [r1, #24]
 800199a:	4690      	mov	r8, r2
 800199c:	0007      	movs	r7, r0
 800199e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80019a0:	2900      	cmp	r1, #0
 80019a2:	d014      	beq.n	80019ce <_printf_i+0x52>
 80019a4:	000b      	movs	r3, r1
 80019a6:	3b58      	subs	r3, #88	@ 0x58
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d848      	bhi.n	8001a40 <_printf_i+0xc4>
 80019ae:	4888      	ldr	r0, [pc, #544]	@ (8001bd0 <_printf_i+0x254>)
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	58c3      	ldr	r3, [r0, r3]
 80019b4:	469f      	mov	pc, r3
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	6821      	ldr	r1, [r4, #0]
 80019ba:	1d1d      	adds	r5, r3, #4
 80019bc:	6960      	ldr	r0, [r4, #20]
 80019be:	6015      	str	r5, [r2, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	060e      	lsls	r6, r1, #24
 80019c4:	d402      	bmi.n	80019cc <_printf_i+0x50>
 80019c6:	0649      	lsls	r1, r1, #25
 80019c8:	d500      	bpl.n	80019cc <_printf_i+0x50>
 80019ca:	e0dc      	b.n	8001b86 <_printf_i+0x20a>
 80019cc:	6018      	str	r0, [r3, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9d02      	ldr	r5, [sp, #8]
 80019d2:	6123      	str	r3, [r4, #16]
 80019d4:	464b      	mov	r3, r9
 80019d6:	0021      	movs	r1, r4
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	0038      	movs	r0, r7
 80019dc:	4643      	mov	r3, r8
 80019de:	aa05      	add	r2, sp, #20
 80019e0:	f7ff ff28 	bl	8001834 <_printf_common>
 80019e4:	3001      	adds	r0, #1
 80019e6:	d01e      	beq.n	8001a26 <_printf_i+0xaa>
 80019e8:	002a      	movs	r2, r5
 80019ea:	4641      	mov	r1, r8
 80019ec:	0038      	movs	r0, r7
 80019ee:	6923      	ldr	r3, [r4, #16]
 80019f0:	47c8      	blx	r9
 80019f2:	3001      	adds	r0, #1
 80019f4:	d017      	beq.n	8001a26 <_printf_i+0xaa>
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	68e0      	ldr	r0, [r4, #12]
 80019fa:	9e05      	ldr	r6, [sp, #20]
 80019fc:	079b      	lsls	r3, r3, #30
 80019fe:	d51b      	bpl.n	8001a38 <_printf_i+0xbc>
 8001a00:	42b0      	cmp	r0, r6
 8001a02:	dd19      	ble.n	8001a38 <_printf_i+0xbc>
 8001a04:	2319      	movs	r3, #25
 8001a06:	469a      	mov	sl, r3
 8001a08:	2500      	movs	r5, #0
 8001a0a:	44a2      	add	sl, r4
 8001a0c:	e004      	b.n	8001a18 <_printf_i+0x9c>
 8001a0e:	68e0      	ldr	r0, [r4, #12]
 8001a10:	3501      	adds	r5, #1
 8001a12:	1b83      	subs	r3, r0, r6
 8001a14:	42ab      	cmp	r3, r5
 8001a16:	dd0f      	ble.n	8001a38 <_printf_i+0xbc>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	4641      	mov	r1, r8
 8001a1e:	0038      	movs	r0, r7
 8001a20:	47c8      	blx	r9
 8001a22:	3001      	adds	r0, #1
 8001a24:	d1f3      	bne.n	8001a0e <_printf_i+0x92>
 8001a26:	2001      	movs	r0, #1
 8001a28:	4240      	negs	r0, r0
 8001a2a:	b007      	add	sp, #28
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	46bb      	mov	fp, r7
 8001a30:	46b2      	mov	sl, r6
 8001a32:	46a9      	mov	r9, r5
 8001a34:	46a0      	mov	r8, r4
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	42b0      	cmp	r0, r6
 8001a3a:	daf6      	bge.n	8001a2a <_printf_i+0xae>
 8001a3c:	0030      	movs	r0, r6
 8001a3e:	e7f4      	b.n	8001a2a <_printf_i+0xae>
 8001a40:	0025      	movs	r5, r4
 8001a42:	2342      	movs	r3, #66	@ 0x42
 8001a44:	2001      	movs	r0, #1
 8001a46:	3542      	adds	r5, #66	@ 0x42
 8001a48:	54e1      	strb	r1, [r4, r3]
 8001a4a:	2343      	movs	r3, #67	@ 0x43
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6120      	str	r0, [r4, #16]
 8001a50:	54e2      	strb	r2, [r4, r3]
 8001a52:	e7bf      	b.n	80019d4 <_printf_i+0x58>
 8001a54:	6813      	ldr	r3, [r2, #0]
 8001a56:	6821      	ldr	r1, [r4, #0]
 8001a58:	1d18      	adds	r0, r3, #4
 8001a5a:	6010      	str	r0, [r2, #0]
 8001a5c:	060d      	lsls	r5, r1, #24
 8001a5e:	d402      	bmi.n	8001a66 <_printf_i+0xea>
 8001a60:	064d      	lsls	r5, r1, #25
 8001a62:	d500      	bpl.n	8001a66 <_printf_i+0xea>
 8001a64:	e094      	b.n	8001b90 <_printf_i+0x214>
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	0016      	movs	r6, r2
 8001a6a:	6863      	ldr	r3, [r4, #4]
 8001a6c:	2a00      	cmp	r2, #0
 8001a6e:	da00      	bge.n	8001a72 <_printf_i+0xf6>
 8001a70:	e092      	b.n	8001b98 <_printf_i+0x21c>
 8001a72:	4a58      	ldr	r2, [pc, #352]	@ (8001bd4 <_printf_i+0x258>)
 8001a74:	4693      	mov	fp, r2
 8001a76:	220a      	movs	r2, #10
 8001a78:	9203      	str	r2, [sp, #12]
 8001a7a:	e04b      	b.n	8001b14 <_printf_i+0x198>
 8001a7c:	6813      	ldr	r3, [r2, #0]
 8001a7e:	6820      	ldr	r0, [r4, #0]
 8001a80:	cb40      	ldmia	r3!, {r6}
 8001a82:	0605      	lsls	r5, r0, #24
 8001a84:	d401      	bmi.n	8001a8a <_printf_i+0x10e>
 8001a86:	0640      	lsls	r0, r0, #25
 8001a88:	d47f      	bmi.n	8001b8a <_printf_i+0x20e>
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b51      	ldr	r3, [pc, #324]	@ (8001bd4 <_printf_i+0x258>)
 8001a8e:	469b      	mov	fp, r3
 8001a90:	296f      	cmp	r1, #111	@ 0x6f
 8001a92:	d100      	bne.n	8001a96 <_printf_i+0x11a>
 8001a94:	e091      	b.n	8001bba <_printf_i+0x23e>
 8001a96:	230a      	movs	r3, #10
 8001a98:	9303      	str	r3, [sp, #12]
 8001a9a:	e037      	b.n	8001b0c <_printf_i+0x190>
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	0025      	movs	r5, r4
 8001aa0:	1d19      	adds	r1, r3, #4
 8001aa2:	6011      	str	r1, [r2, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2342      	movs	r3, #66	@ 0x42
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	3542      	adds	r5, #66	@ 0x42
 8001aac:	54e2      	strb	r2, [r4, r3]
 8001aae:	e7cc      	b.n	8001a4a <_printf_i+0xce>
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	1d19      	adds	r1, r3, #4
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	681d      	ldr	r5, [r3, #0]
 8001ab8:	2100      	movs	r1, #0
 8001aba:	0028      	movs	r0, r5
 8001abc:	6862      	ldr	r2, [r4, #4]
 8001abe:	f000 f919 	bl	8001cf4 <memchr>
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	d100      	bne.n	8001ac8 <_printf_i+0x14c>
 8001ac6:	e081      	b.n	8001bcc <_printf_i+0x250>
 8001ac8:	1b40      	subs	r0, r0, r5
 8001aca:	6060      	str	r0, [r4, #4]
 8001acc:	e7bd      	b.n	8001a4a <_printf_i+0xce>
 8001ace:	2320      	movs	r3, #32
 8001ad0:	6821      	ldr	r1, [r4, #0]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	6023      	str	r3, [r4, #0]
 8001ad6:	2145      	movs	r1, #69	@ 0x45
 8001ad8:	2078      	movs	r0, #120	@ 0x78
 8001ada:	5460      	strb	r0, [r4, r1]
 8001adc:	493e      	ldr	r1, [pc, #248]	@ (8001bd8 <_printf_i+0x25c>)
 8001ade:	468b      	mov	fp, r1
 8001ae0:	6811      	ldr	r1, [r2, #0]
 8001ae2:	c940      	ldmia	r1!, {r6}
 8001ae4:	0618      	lsls	r0, r3, #24
 8001ae6:	d403      	bmi.n	8001af0 <_printf_i+0x174>
 8001ae8:	0658      	lsls	r0, r3, #25
 8001aea:	d501      	bpl.n	8001af0 <_printf_i+0x174>
 8001aec:	0436      	lsls	r6, r6, #16
 8001aee:	0c36      	lsrs	r6, r6, #16
 8001af0:	6011      	str	r1, [r2, #0]
 8001af2:	07da      	lsls	r2, r3, #31
 8001af4:	d502      	bpl.n	8001afc <_printf_i+0x180>
 8001af6:	2220      	movs	r2, #32
 8001af8:	4313      	orrs	r3, r2
 8001afa:	6023      	str	r3, [r4, #0]
 8001afc:	2e00      	cmp	r6, #0
 8001afe:	d103      	bne.n	8001b08 <_printf_i+0x18c>
 8001b00:	2220      	movs	r2, #32
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	4393      	bics	r3, r2
 8001b06:	6023      	str	r3, [r4, #0]
 8001b08:	2310      	movs	r3, #16
 8001b0a:	9303      	str	r3, [sp, #12]
 8001b0c:	2343      	movs	r3, #67	@ 0x43
 8001b0e:	2200      	movs	r2, #0
 8001b10:	54e2      	strb	r2, [r4, r3]
 8001b12:	6863      	ldr	r3, [r4, #4]
 8001b14:	60a3      	str	r3, [r4, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db18      	blt.n	8001b4c <_printf_i+0x1d0>
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	6822      	ldr	r2, [r4, #0]
 8001b1e:	438a      	bics	r2, r1
 8001b20:	6022      	str	r2, [r4, #0]
 8001b22:	2e00      	cmp	r6, #0
 8001b24:	d112      	bne.n	8001b4c <_printf_i+0x1d0>
 8001b26:	9d02      	ldr	r5, [sp, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d149      	bne.n	8001bc0 <_printf_i+0x244>
 8001b2c:	9b03      	ldr	r3, [sp, #12]
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d01e      	beq.n	8001b70 <_printf_i+0x1f4>
 8001b32:	9b02      	ldr	r3, [sp, #8]
 8001b34:	1b5b      	subs	r3, r3, r5
 8001b36:	6123      	str	r3, [r4, #16]
 8001b38:	e74c      	b.n	80019d4 <_printf_i+0x58>
 8001b3a:	2345      	movs	r3, #69	@ 0x45
 8001b3c:	2158      	movs	r1, #88	@ 0x58
 8001b3e:	54e1      	strb	r1, [r4, r3]
 8001b40:	4924      	ldr	r1, [pc, #144]	@ (8001bd4 <_printf_i+0x258>)
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	468b      	mov	fp, r1
 8001b46:	e7cb      	b.n	8001ae0 <_printf_i+0x164>
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	e7c4      	b.n	8001ad6 <_printf_i+0x15a>
 8001b4c:	9b03      	ldr	r3, [sp, #12]
 8001b4e:	469a      	mov	sl, r3
 8001b50:	9d02      	ldr	r5, [sp, #8]
 8001b52:	0030      	movs	r0, r6
 8001b54:	4651      	mov	r1, sl
 8001b56:	f7fe fbe9 	bl	800032c <__aeabi_uidivmod>
 8001b5a:	465b      	mov	r3, fp
 8001b5c:	5c5b      	ldrb	r3, [r3, r1]
 8001b5e:	3d01      	subs	r5, #1
 8001b60:	702b      	strb	r3, [r5, #0]
 8001b62:	0033      	movs	r3, r6
 8001b64:	0006      	movs	r6, r0
 8001b66:	4553      	cmp	r3, sl
 8001b68:	d2f3      	bcs.n	8001b52 <_printf_i+0x1d6>
 8001b6a:	9b03      	ldr	r3, [sp, #12]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d1e0      	bne.n	8001b32 <_printf_i+0x1b6>
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	07db      	lsls	r3, r3, #31
 8001b74:	d5dd      	bpl.n	8001b32 <_printf_i+0x1b6>
 8001b76:	6862      	ldr	r2, [r4, #4]
 8001b78:	6923      	ldr	r3, [r4, #16]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dcd9      	bgt.n	8001b32 <_printf_i+0x1b6>
 8001b7e:	2330      	movs	r3, #48	@ 0x30
 8001b80:	3d01      	subs	r5, #1
 8001b82:	702b      	strb	r3, [r5, #0]
 8001b84:	e7d5      	b.n	8001b32 <_printf_i+0x1b6>
 8001b86:	8018      	strh	r0, [r3, #0]
 8001b88:	e721      	b.n	80019ce <_printf_i+0x52>
 8001b8a:	0436      	lsls	r6, r6, #16
 8001b8c:	0c36      	lsrs	r6, r6, #16
 8001b8e:	e77c      	b.n	8001a8a <_printf_i+0x10e>
 8001b90:	2600      	movs	r6, #0
 8001b92:	5f9e      	ldrsh	r6, [r3, r6]
 8001b94:	0032      	movs	r2, r6
 8001b96:	e768      	b.n	8001a6a <_printf_i+0xee>
 8001b98:	2243      	movs	r2, #67	@ 0x43
 8001b9a:	202d      	movs	r0, #45	@ 0x2d
 8001b9c:	54a0      	strb	r0, [r4, r2]
 8001b9e:	60a3      	str	r3, [r4, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db02      	blt.n	8001baa <_printf_i+0x22e>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	4399      	bics	r1, r3
 8001ba8:	6021      	str	r1, [r4, #0]
 8001baa:	230a      	movs	r3, #10
 8001bac:	469a      	mov	sl, r3
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <_printf_i+0x258>)
 8001bb0:	4276      	negs	r6, r6
 8001bb2:	469b      	mov	fp, r3
 8001bb4:	230a      	movs	r3, #10
 8001bb6:	9303      	str	r3, [sp, #12]
 8001bb8:	e7ca      	b.n	8001b50 <_printf_i+0x1d4>
 8001bba:	2308      	movs	r3, #8
 8001bbc:	9303      	str	r3, [sp, #12]
 8001bbe:	e7a5      	b.n	8001b0c <_printf_i+0x190>
 8001bc0:	465b      	mov	r3, fp
 8001bc2:	0025      	movs	r5, r4
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3542      	adds	r5, #66	@ 0x42
 8001bc8:	702b      	strb	r3, [r5, #0]
 8001bca:	e7af      	b.n	8001b2c <_printf_i+0x1b0>
 8001bcc:	6860      	ldr	r0, [r4, #4]
 8001bce:	e73c      	b.n	8001a4a <_printf_i+0xce>
 8001bd0:	080045b4 	.word	0x080045b4
 8001bd4:	080046d0 	.word	0x080046d0
 8001bd8:	080046e4 	.word	0x080046e4

08001bdc <__malloc_lock>:
 8001bdc:	4770      	bx	lr
 8001bde:	46c0      	nop			@ (mov r8, r8)

08001be0 <__malloc_unlock>:
 8001be0:	4770      	bx	lr
 8001be2:	46c0      	nop			@ (mov r8, r8)

08001be4 <__smakebuf_r>:
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	230c      	movs	r3, #12
 8001be8:	5ecd      	ldrsh	r5, [r1, r3]
 8001bea:	0006      	movs	r6, r0
 8001bec:	000c      	movs	r4, r1
 8001bee:	b097      	sub	sp, #92	@ 0x5c
 8001bf0:	07aa      	lsls	r2, r5, #30
 8001bf2:	d507      	bpl.n	8001c04 <__smakebuf_r+0x20>
 8001bf4:	0023      	movs	r3, r4
 8001bf6:	3347      	adds	r3, #71	@ 0x47
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	6123      	str	r3, [r4, #16]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	6163      	str	r3, [r4, #20]
 8001c00:	b017      	add	sp, #92	@ 0x5c
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c04:	230e      	movs	r3, #14
 8001c06:	5ec9      	ldrsh	r1, [r1, r3]
 8001c08:	2900      	cmp	r1, #0
 8001c0a:	db2b      	blt.n	8001c64 <__smakebuf_r+0x80>
 8001c0c:	466a      	mov	r2, sp
 8001c0e:	f000 f96b 	bl	8001ee8 <_fstat_r>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	db24      	blt.n	8001c60 <__smakebuf_r+0x7c>
 8001c16:	2780      	movs	r7, #128	@ 0x80
 8001c18:	00ff      	lsls	r7, r7, #3
 8001c1a:	0039      	movs	r1, r7
 8001c1c:	0030      	movs	r0, r6
 8001c1e:	9d01      	ldr	r5, [sp, #4]
 8001c20:	f7ff fc08 	bl	8001434 <_malloc_r>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d033      	beq.n	8001c90 <__smakebuf_r+0xac>
 8001c28:	2280      	movs	r2, #128	@ 0x80
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	6020      	str	r0, [r4, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	81a3      	strh	r3, [r4, #12]
 8001c32:	23f0      	movs	r3, #240	@ 0xf0
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	401d      	ands	r5, r3
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	6120      	str	r0, [r4, #16]
 8001c3c:	6167      	str	r7, [r4, #20]
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	429d      	cmp	r5, r3
 8001c42:	d1dd      	bne.n	8001c00 <__smakebuf_r+0x1c>
 8001c44:	0030      	movs	r0, r6
 8001c46:	230e      	movs	r3, #14
 8001c48:	5ee1      	ldrsh	r1, [r4, r3]
 8001c4a:	f000 f88d 	bl	8001d68 <_isatty_r>
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d0d6      	beq.n	8001c00 <__smakebuf_r+0x1c>
 8001c52:	2203      	movs	r2, #3
 8001c54:	89a3      	ldrh	r3, [r4, #12]
 8001c56:	4393      	bics	r3, r2
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	81a3      	strh	r3, [r4, #12]
 8001c5e:	e7cf      	b.n	8001c00 <__smakebuf_r+0x1c>
 8001c60:	230c      	movs	r3, #12
 8001c62:	5ee5      	ldrsh	r5, [r4, r3]
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <__smakebuf_r+0xc0>)
 8001c66:	062d      	lsls	r5, r5, #24
 8001c68:	17ed      	asrs	r5, r5, #31
 8001c6a:	401d      	ands	r5, r3
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	469c      	mov	ip, r3
 8001c72:	4465      	add	r5, ip
 8001c74:	0029      	movs	r1, r5
 8001c76:	0030      	movs	r0, r6
 8001c78:	f7ff fbdc 	bl	8001434 <_malloc_r>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d007      	beq.n	8001c90 <__smakebuf_r+0xac>
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	89a3      	ldrh	r3, [r4, #12]
 8001c84:	6020      	str	r0, [r4, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	81a3      	strh	r3, [r4, #12]
 8001c8a:	6120      	str	r0, [r4, #16]
 8001c8c:	6165      	str	r5, [r4, #20]
 8001c8e:	e7b7      	b.n	8001c00 <__smakebuf_r+0x1c>
 8001c90:	220c      	movs	r2, #12
 8001c92:	5ea3      	ldrsh	r3, [r4, r2]
 8001c94:	059a      	lsls	r2, r3, #22
 8001c96:	d4b3      	bmi.n	8001c00 <__smakebuf_r+0x1c>
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	81a3      	strh	r3, [r4, #12]
 8001ca2:	e7a7      	b.n	8001bf4 <__smakebuf_r+0x10>
 8001ca4:	fffffc40 	.word	0xfffffc40

08001ca8 <__swhatbuf_r>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	000c      	movs	r4, r1
 8001cac:	001e      	movs	r6, r3
 8001cae:	230e      	movs	r3, #14
 8001cb0:	5ec9      	ldrsh	r1, [r1, r3]
 8001cb2:	0015      	movs	r5, r2
 8001cb4:	b096      	sub	sp, #88	@ 0x58
 8001cb6:	2900      	cmp	r1, #0
 8001cb8:	db14      	blt.n	8001ce4 <__swhatbuf_r+0x3c>
 8001cba:	466a      	mov	r2, sp
 8001cbc:	f000 f914 	bl	8001ee8 <_fstat_r>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	db0f      	blt.n	8001ce4 <__swhatbuf_r+0x3c>
 8001cc4:	23f0      	movs	r3, #240	@ 0xf0
 8001cc6:	9901      	ldr	r1, [sp, #4]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	4019      	ands	r1, r3
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <__swhatbuf_r+0x48>)
 8001cce:	469c      	mov	ip, r3
 8001cd0:	4461      	add	r1, ip
 8001cd2:	424b      	negs	r3, r1
 8001cd4:	4159      	adcs	r1, r3
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	2000      	movs	r0, #0
 8001cdc:	6031      	str	r1, [r6, #0]
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	b016      	add	sp, #88	@ 0x58
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	d5f4      	bpl.n	8001cd6 <__swhatbuf_r+0x2e>
 8001cec:	2340      	movs	r3, #64	@ 0x40
 8001cee:	e7f4      	b.n	8001cda <__swhatbuf_r+0x32>
 8001cf0:	ffffe000 	.word	0xffffe000

08001cf4 <memchr>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	b2cc      	uxtb	r4, r1
 8001cf8:	0783      	lsls	r3, r0, #30
 8001cfa:	d00d      	beq.n	8001d18 <memchr+0x24>
 8001cfc:	1e53      	subs	r3, r2, #1
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d00f      	beq.n	8001d22 <memchr+0x2e>
 8001d02:	2503      	movs	r5, #3
 8001d04:	e004      	b.n	8001d10 <memchr+0x1c>
 8001d06:	3001      	adds	r0, #1
 8001d08:	4228      	tst	r0, r5
 8001d0a:	d006      	beq.n	8001d1a <memchr+0x26>
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	d308      	bcc.n	8001d22 <memchr+0x2e>
 8001d10:	7802      	ldrb	r2, [r0, #0]
 8001d12:	42a2      	cmp	r2, r4
 8001d14:	d1f7      	bne.n	8001d06 <memchr+0x12>
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
 8001d18:	0013      	movs	r3, r2
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d803      	bhi.n	8001d26 <memchr+0x32>
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d114      	bne.n	8001d4c <memchr+0x58>
 8001d22:	2000      	movs	r0, #0
 8001d24:	e7f7      	b.n	8001d16 <memchr+0x22>
 8001d26:	22ff      	movs	r2, #255	@ 0xff
 8001d28:	400a      	ands	r2, r1
 8001d2a:	0215      	lsls	r5, r2, #8
 8001d2c:	18ad      	adds	r5, r5, r2
 8001d2e:	042a      	lsls	r2, r5, #16
 8001d30:	4e0b      	ldr	r6, [pc, #44]	@ (8001d60 <memchr+0x6c>)
 8001d32:	18ad      	adds	r5, r5, r2
 8001d34:	e003      	b.n	8001d3e <memchr+0x4a>
 8001d36:	3b04      	subs	r3, #4
 8001d38:	3004      	adds	r0, #4
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d9ef      	bls.n	8001d1e <memchr+0x2a>
 8001d3e:	6802      	ldr	r2, [r0, #0]
 8001d40:	4908      	ldr	r1, [pc, #32]	@ (8001d64 <memchr+0x70>)
 8001d42:	406a      	eors	r2, r5
 8001d44:	1851      	adds	r1, r2, r1
 8001d46:	4391      	bics	r1, r2
 8001d48:	4231      	tst	r1, r6
 8001d4a:	d0f4      	beq.n	8001d36 <memchr+0x42>
 8001d4c:	18c3      	adds	r3, r0, r3
 8001d4e:	e002      	b.n	8001d56 <memchr+0x62>
 8001d50:	3001      	adds	r0, #1
 8001d52:	4298      	cmp	r0, r3
 8001d54:	d0e5      	beq.n	8001d22 <memchr+0x2e>
 8001d56:	7802      	ldrb	r2, [r0, #0]
 8001d58:	42a2      	cmp	r2, r4
 8001d5a:	d1f9      	bne.n	8001d50 <memchr+0x5c>
 8001d5c:	e7db      	b.n	8001d16 <memchr+0x22>
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	80808080 	.word	0x80808080
 8001d64:	fefefeff 	.word	0xfefefeff

08001d68 <_isatty_r>:
 8001d68:	2300      	movs	r3, #0
 8001d6a:	b570      	push	{r4, r5, r6, lr}
 8001d6c:	4c06      	ldr	r4, [pc, #24]	@ (8001d88 <_isatty_r+0x20>)
 8001d6e:	0005      	movs	r5, r0
 8001d70:	0008      	movs	r0, r1
 8001d72:	6023      	str	r3, [r4, #0]
 8001d74:	f000 fa2c 	bl	80021d0 <_isatty>
 8001d78:	1c43      	adds	r3, r0, #1
 8001d7a:	d000      	beq.n	8001d7e <_isatty_r+0x16>
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0fb      	beq.n	8001d7c <_isatty_r+0x14>
 8001d84:	602b      	str	r3, [r5, #0]
 8001d86:	e7f9      	b.n	8001d7c <_isatty_r+0x14>
 8001d88:	2000040c 	.word	0x2000040c

08001d8c <_sbrk_r>:
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	b570      	push	{r4, r5, r6, lr}
 8001d90:	4c06      	ldr	r4, [pc, #24]	@ (8001dac <_sbrk_r+0x20>)
 8001d92:	0005      	movs	r5, r0
 8001d94:	0008      	movs	r0, r1
 8001d96:	6023      	str	r3, [r4, #0]
 8001d98:	f000 fa3a 	bl	8002210 <_sbrk>
 8001d9c:	1c43      	adds	r3, r0, #1
 8001d9e:	d000      	beq.n	8001da2 <_sbrk_r+0x16>
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0fb      	beq.n	8001da0 <_sbrk_r+0x14>
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	e7f9      	b.n	8001da0 <_sbrk_r+0x14>
 8001dac:	2000040c 	.word	0x2000040c

08001db0 <__sread>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	000c      	movs	r4, r1
 8001db4:	250e      	movs	r5, #14
 8001db6:	5f49      	ldrsh	r1, [r1, r5]
 8001db8:	f000 f882 	bl	8001ec0 <_read_r>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	db03      	blt.n	8001dc8 <__sread+0x18>
 8001dc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001dc2:	181b      	adds	r3, r3, r0
 8001dc4:	6563      	str	r3, [r4, #84]	@ 0x54
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
 8001dc8:	89a3      	ldrh	r3, [r4, #12]
 8001dca:	4a02      	ldr	r2, [pc, #8]	@ (8001dd4 <__sread+0x24>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	81a3      	strh	r3, [r4, #12]
 8001dd0:	e7f9      	b.n	8001dc6 <__sread+0x16>
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	ffffefff 	.word	0xffffefff

08001dd8 <__seofread>:
 8001dd8:	2000      	movs	r0, #0
 8001dda:	4770      	bx	lr

08001ddc <__swrite>:
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dde:	000c      	movs	r4, r1
 8001de0:	001f      	movs	r7, r3
 8001de2:	230c      	movs	r3, #12
 8001de4:	5ec9      	ldrsh	r1, [r1, r3]
 8001de6:	0005      	movs	r5, r0
 8001de8:	0016      	movs	r6, r2
 8001dea:	05cb      	lsls	r3, r1, #23
 8001dec:	d40a      	bmi.n	8001e04 <__swrite+0x28>
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <__swrite+0x3c>)
 8001df0:	0032      	movs	r2, r6
 8001df2:	4019      	ands	r1, r3
 8001df4:	0028      	movs	r0, r5
 8001df6:	81a1      	strh	r1, [r4, #12]
 8001df8:	230e      	movs	r3, #14
 8001dfa:	5ee1      	ldrsh	r1, [r4, r3]
 8001dfc:	003b      	movs	r3, r7
 8001dfe:	f000 f89b 	bl	8001f38 <_write_r>
 8001e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e04:	230e      	movs	r3, #14
 8001e06:	5ee1      	ldrsh	r1, [r4, r3]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f000 f880 	bl	8001f10 <_lseek_r>
 8001e10:	230c      	movs	r3, #12
 8001e12:	5ee1      	ldrsh	r1, [r4, r3]
 8001e14:	e7eb      	b.n	8001dee <__swrite+0x12>
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	ffffefff 	.word	0xffffefff

08001e1c <__sseek>:
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	000c      	movs	r4, r1
 8001e20:	250e      	movs	r5, #14
 8001e22:	5f49      	ldrsh	r1, [r1, r5]
 8001e24:	f000 f874 	bl	8001f10 <_lseek_r>
 8001e28:	1c43      	adds	r3, r0, #1
 8001e2a:	d007      	beq.n	8001e3c <__sseek+0x20>
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	89a2      	ldrh	r2, [r4, #12]
 8001e30:	015b      	lsls	r3, r3, #5
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e38:	81a3      	strh	r3, [r4, #12]
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
 8001e3c:	89a3      	ldrh	r3, [r4, #12]
 8001e3e:	4a02      	ldr	r2, [pc, #8]	@ (8001e48 <__sseek+0x2c>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	e7f8      	b.n	8001e38 <__sseek+0x1c>
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	ffffefff 	.word	0xffffefff

08001e4c <__sclose>:
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	230e      	movs	r3, #14
 8001e50:	5ec9      	ldrsh	r1, [r1, r3]
 8001e52:	f000 f823 	bl	8001e9c <_close_r>
 8001e56:	bd10      	pop	{r4, pc}

08001e58 <_malloc_usable_size_r>:
 8001e58:	1f0b      	subs	r3, r1, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	1f18      	subs	r0, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db00      	blt.n	8001e64 <_malloc_usable_size_r+0xc>
 8001e62:	4770      	bx	lr
 8001e64:	580b      	ldr	r3, [r1, r0]
 8001e66:	18c0      	adds	r0, r0, r3
 8001e68:	e7fb      	b.n	8001e62 <_malloc_usable_size_r+0xa>
 8001e6a:	46c0      	nop			@ (mov r8, r8)

08001e6c <_kill_r>:
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	b570      	push	{r4, r5, r6, lr}
 8001e70:	4d07      	ldr	r5, [pc, #28]	@ (8001e90 <_kill_r+0x24>)
 8001e72:	0004      	movs	r4, r0
 8001e74:	0008      	movs	r0, r1
 8001e76:	0011      	movs	r1, r2
 8001e78:	602b      	str	r3, [r5, #0]
 8001e7a:	f000 f9b1 	bl	80021e0 <_kill>
 8001e7e:	1c43      	adds	r3, r0, #1
 8001e80:	d000      	beq.n	8001e84 <_kill_r+0x18>
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0fb      	beq.n	8001e82 <_kill_r+0x16>
 8001e8a:	6023      	str	r3, [r4, #0]
 8001e8c:	e7f9      	b.n	8001e82 <_kill_r+0x16>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	2000040c 	.word	0x2000040c

08001e94 <_getpid_r>:
 8001e94:	b510      	push	{r4, lr}
 8001e96:	f000 f98b 	bl	80021b0 <_getpid>
 8001e9a:	bd10      	pop	{r4, pc}

08001e9c <_close_r>:
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	b570      	push	{r4, r5, r6, lr}
 8001ea0:	4c06      	ldr	r4, [pc, #24]	@ (8001ebc <_close_r+0x20>)
 8001ea2:	0005      	movs	r5, r0
 8001ea4:	0008      	movs	r0, r1
 8001ea6:	6023      	str	r3, [r4, #0]
 8001ea8:	f000 f972 	bl	8002190 <_close>
 8001eac:	1c43      	adds	r3, r0, #1
 8001eae:	d000      	beq.n	8001eb2 <_close_r+0x16>
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0fb      	beq.n	8001eb0 <_close_r+0x14>
 8001eb8:	602b      	str	r3, [r5, #0]
 8001eba:	e7f9      	b.n	8001eb0 <_close_r+0x14>
 8001ebc:	2000040c 	.word	0x2000040c

08001ec0 <_read_r>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	0004      	movs	r4, r0
 8001ec4:	0008      	movs	r0, r1
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	001a      	movs	r2, r3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	4d05      	ldr	r5, [pc, #20]	@ (8001ee4 <_read_r+0x24>)
 8001ece:	602b      	str	r3, [r5, #0]
 8001ed0:	f000 f996 	bl	8002200 <_read>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	d000      	beq.n	8001eda <_read_r+0x1a>
 8001ed8:	bd70      	pop	{r4, r5, r6, pc}
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0fb      	beq.n	8001ed8 <_read_r+0x18>
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	e7f9      	b.n	8001ed8 <_read_r+0x18>
 8001ee4:	2000040c 	.word	0x2000040c

08001ee8 <_fstat_r>:
 8001ee8:	2300      	movs	r3, #0
 8001eea:	b570      	push	{r4, r5, r6, lr}
 8001eec:	4d07      	ldr	r5, [pc, #28]	@ (8001f0c <_fstat_r+0x24>)
 8001eee:	0004      	movs	r4, r0
 8001ef0:	0008      	movs	r0, r1
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	602b      	str	r3, [r5, #0]
 8001ef6:	f000 f953 	bl	80021a0 <_fstat>
 8001efa:	1c43      	adds	r3, r0, #1
 8001efc:	d000      	beq.n	8001f00 <_fstat_r+0x18>
 8001efe:	bd70      	pop	{r4, r5, r6, pc}
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0fb      	beq.n	8001efe <_fstat_r+0x16>
 8001f06:	6023      	str	r3, [r4, #0]
 8001f08:	e7f9      	b.n	8001efe <_fstat_r+0x16>
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	2000040c 	.word	0x2000040c

08001f10 <_lseek_r>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	0004      	movs	r4, r0
 8001f14:	0008      	movs	r0, r1
 8001f16:	0011      	movs	r1, r2
 8001f18:	001a      	movs	r2, r3
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	4d05      	ldr	r5, [pc, #20]	@ (8001f34 <_lseek_r+0x24>)
 8001f1e:	602b      	str	r3, [r5, #0]
 8001f20:	f000 f966 	bl	80021f0 <_lseek>
 8001f24:	1c43      	adds	r3, r0, #1
 8001f26:	d000      	beq.n	8001f2a <_lseek_r+0x1a>
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
 8001f2a:	682b      	ldr	r3, [r5, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0fb      	beq.n	8001f28 <_lseek_r+0x18>
 8001f30:	6023      	str	r3, [r4, #0]
 8001f32:	e7f9      	b.n	8001f28 <_lseek_r+0x18>
 8001f34:	2000040c 	.word	0x2000040c

08001f38 <_write_r>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	001a      	movs	r2, r3
 8001f42:	2300      	movs	r3, #0
 8001f44:	4d05      	ldr	r5, [pc, #20]	@ (8001f5c <_write_r+0x24>)
 8001f46:	602b      	str	r3, [r5, #0]
 8001f48:	f000 f970 	bl	800222c <_write>
 8001f4c:	1c43      	adds	r3, r0, #1
 8001f4e:	d000      	beq.n	8001f52 <_write_r+0x1a>
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
 8001f52:	682b      	ldr	r3, [r5, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0fb      	beq.n	8001f50 <_write_r+0x18>
 8001f58:	6023      	str	r3, [r4, #0]
 8001f5a:	e7f9      	b.n	8001f50 <_write_r+0x18>
 8001f5c:	2000040c 	.word	0x2000040c

08001f60 <__divsi3>:
 8001f60:	4603      	mov	r3, r0
 8001f62:	430b      	orrs	r3, r1
 8001f64:	d47f      	bmi.n	8002066 <__divsi3+0x106>
 8001f66:	2200      	movs	r2, #0
 8001f68:	0843      	lsrs	r3, r0, #1
 8001f6a:	428b      	cmp	r3, r1
 8001f6c:	d374      	bcc.n	8002058 <__divsi3+0xf8>
 8001f6e:	0903      	lsrs	r3, r0, #4
 8001f70:	428b      	cmp	r3, r1
 8001f72:	d35f      	bcc.n	8002034 <__divsi3+0xd4>
 8001f74:	0a03      	lsrs	r3, r0, #8
 8001f76:	428b      	cmp	r3, r1
 8001f78:	d344      	bcc.n	8002004 <__divsi3+0xa4>
 8001f7a:	0b03      	lsrs	r3, r0, #12
 8001f7c:	428b      	cmp	r3, r1
 8001f7e:	d328      	bcc.n	8001fd2 <__divsi3+0x72>
 8001f80:	0c03      	lsrs	r3, r0, #16
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d30d      	bcc.n	8001fa2 <__divsi3+0x42>
 8001f86:	22ff      	movs	r2, #255	@ 0xff
 8001f88:	0209      	lsls	r1, r1, #8
 8001f8a:	ba12      	rev	r2, r2
 8001f8c:	0c03      	lsrs	r3, r0, #16
 8001f8e:	428b      	cmp	r3, r1
 8001f90:	d302      	bcc.n	8001f98 <__divsi3+0x38>
 8001f92:	1212      	asrs	r2, r2, #8
 8001f94:	0209      	lsls	r1, r1, #8
 8001f96:	d065      	beq.n	8002064 <__divsi3+0x104>
 8001f98:	0b03      	lsrs	r3, r0, #12
 8001f9a:	428b      	cmp	r3, r1
 8001f9c:	d319      	bcc.n	8001fd2 <__divsi3+0x72>
 8001f9e:	e000      	b.n	8001fa2 <__divsi3+0x42>
 8001fa0:	0a09      	lsrs	r1, r1, #8
 8001fa2:	0bc3      	lsrs	r3, r0, #15
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d301      	bcc.n	8001fac <__divsi3+0x4c>
 8001fa8:	03cb      	lsls	r3, r1, #15
 8001faa:	1ac0      	subs	r0, r0, r3
 8001fac:	4152      	adcs	r2, r2
 8001fae:	0b83      	lsrs	r3, r0, #14
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d301      	bcc.n	8001fb8 <__divsi3+0x58>
 8001fb4:	038b      	lsls	r3, r1, #14
 8001fb6:	1ac0      	subs	r0, r0, r3
 8001fb8:	4152      	adcs	r2, r2
 8001fba:	0b43      	lsrs	r3, r0, #13
 8001fbc:	428b      	cmp	r3, r1
 8001fbe:	d301      	bcc.n	8001fc4 <__divsi3+0x64>
 8001fc0:	034b      	lsls	r3, r1, #13
 8001fc2:	1ac0      	subs	r0, r0, r3
 8001fc4:	4152      	adcs	r2, r2
 8001fc6:	0b03      	lsrs	r3, r0, #12
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d301      	bcc.n	8001fd0 <__divsi3+0x70>
 8001fcc:	030b      	lsls	r3, r1, #12
 8001fce:	1ac0      	subs	r0, r0, r3
 8001fd0:	4152      	adcs	r2, r2
 8001fd2:	0ac3      	lsrs	r3, r0, #11
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d301      	bcc.n	8001fdc <__divsi3+0x7c>
 8001fd8:	02cb      	lsls	r3, r1, #11
 8001fda:	1ac0      	subs	r0, r0, r3
 8001fdc:	4152      	adcs	r2, r2
 8001fde:	0a83      	lsrs	r3, r0, #10
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d301      	bcc.n	8001fe8 <__divsi3+0x88>
 8001fe4:	028b      	lsls	r3, r1, #10
 8001fe6:	1ac0      	subs	r0, r0, r3
 8001fe8:	4152      	adcs	r2, r2
 8001fea:	0a43      	lsrs	r3, r0, #9
 8001fec:	428b      	cmp	r3, r1
 8001fee:	d301      	bcc.n	8001ff4 <__divsi3+0x94>
 8001ff0:	024b      	lsls	r3, r1, #9
 8001ff2:	1ac0      	subs	r0, r0, r3
 8001ff4:	4152      	adcs	r2, r2
 8001ff6:	0a03      	lsrs	r3, r0, #8
 8001ff8:	428b      	cmp	r3, r1
 8001ffa:	d301      	bcc.n	8002000 <__divsi3+0xa0>
 8001ffc:	020b      	lsls	r3, r1, #8
 8001ffe:	1ac0      	subs	r0, r0, r3
 8002000:	4152      	adcs	r2, r2
 8002002:	d2cd      	bcs.n	8001fa0 <__divsi3+0x40>
 8002004:	09c3      	lsrs	r3, r0, #7
 8002006:	428b      	cmp	r3, r1
 8002008:	d301      	bcc.n	800200e <__divsi3+0xae>
 800200a:	01cb      	lsls	r3, r1, #7
 800200c:	1ac0      	subs	r0, r0, r3
 800200e:	4152      	adcs	r2, r2
 8002010:	0983      	lsrs	r3, r0, #6
 8002012:	428b      	cmp	r3, r1
 8002014:	d301      	bcc.n	800201a <__divsi3+0xba>
 8002016:	018b      	lsls	r3, r1, #6
 8002018:	1ac0      	subs	r0, r0, r3
 800201a:	4152      	adcs	r2, r2
 800201c:	0943      	lsrs	r3, r0, #5
 800201e:	428b      	cmp	r3, r1
 8002020:	d301      	bcc.n	8002026 <__divsi3+0xc6>
 8002022:	014b      	lsls	r3, r1, #5
 8002024:	1ac0      	subs	r0, r0, r3
 8002026:	4152      	adcs	r2, r2
 8002028:	0903      	lsrs	r3, r0, #4
 800202a:	428b      	cmp	r3, r1
 800202c:	d301      	bcc.n	8002032 <__divsi3+0xd2>
 800202e:	010b      	lsls	r3, r1, #4
 8002030:	1ac0      	subs	r0, r0, r3
 8002032:	4152      	adcs	r2, r2
 8002034:	08c3      	lsrs	r3, r0, #3
 8002036:	428b      	cmp	r3, r1
 8002038:	d301      	bcc.n	800203e <__divsi3+0xde>
 800203a:	00cb      	lsls	r3, r1, #3
 800203c:	1ac0      	subs	r0, r0, r3
 800203e:	4152      	adcs	r2, r2
 8002040:	0883      	lsrs	r3, r0, #2
 8002042:	428b      	cmp	r3, r1
 8002044:	d301      	bcc.n	800204a <__divsi3+0xea>
 8002046:	008b      	lsls	r3, r1, #2
 8002048:	1ac0      	subs	r0, r0, r3
 800204a:	4152      	adcs	r2, r2
 800204c:	0843      	lsrs	r3, r0, #1
 800204e:	428b      	cmp	r3, r1
 8002050:	d301      	bcc.n	8002056 <__divsi3+0xf6>
 8002052:	004b      	lsls	r3, r1, #1
 8002054:	1ac0      	subs	r0, r0, r3
 8002056:	4152      	adcs	r2, r2
 8002058:	1a41      	subs	r1, r0, r1
 800205a:	d200      	bcs.n	800205e <__divsi3+0xfe>
 800205c:	4601      	mov	r1, r0
 800205e:	4152      	adcs	r2, r2
 8002060:	4610      	mov	r0, r2
 8002062:	4770      	bx	lr
 8002064:	e05d      	b.n	8002122 <__divsi3+0x1c2>
 8002066:	0fca      	lsrs	r2, r1, #31
 8002068:	d000      	beq.n	800206c <__divsi3+0x10c>
 800206a:	4249      	negs	r1, r1
 800206c:	1003      	asrs	r3, r0, #32
 800206e:	d300      	bcc.n	8002072 <__divsi3+0x112>
 8002070:	4240      	negs	r0, r0
 8002072:	4053      	eors	r3, r2
 8002074:	2200      	movs	r2, #0
 8002076:	469c      	mov	ip, r3
 8002078:	0903      	lsrs	r3, r0, #4
 800207a:	428b      	cmp	r3, r1
 800207c:	d32d      	bcc.n	80020da <__divsi3+0x17a>
 800207e:	0a03      	lsrs	r3, r0, #8
 8002080:	428b      	cmp	r3, r1
 8002082:	d312      	bcc.n	80020aa <__divsi3+0x14a>
 8002084:	22fc      	movs	r2, #252	@ 0xfc
 8002086:	0189      	lsls	r1, r1, #6
 8002088:	ba12      	rev	r2, r2
 800208a:	0a03      	lsrs	r3, r0, #8
 800208c:	428b      	cmp	r3, r1
 800208e:	d30c      	bcc.n	80020aa <__divsi3+0x14a>
 8002090:	0189      	lsls	r1, r1, #6
 8002092:	1192      	asrs	r2, r2, #6
 8002094:	428b      	cmp	r3, r1
 8002096:	d308      	bcc.n	80020aa <__divsi3+0x14a>
 8002098:	0189      	lsls	r1, r1, #6
 800209a:	1192      	asrs	r2, r2, #6
 800209c:	428b      	cmp	r3, r1
 800209e:	d304      	bcc.n	80020aa <__divsi3+0x14a>
 80020a0:	0189      	lsls	r1, r1, #6
 80020a2:	d03a      	beq.n	800211a <__divsi3+0x1ba>
 80020a4:	1192      	asrs	r2, r2, #6
 80020a6:	e000      	b.n	80020aa <__divsi3+0x14a>
 80020a8:	0989      	lsrs	r1, r1, #6
 80020aa:	09c3      	lsrs	r3, r0, #7
 80020ac:	428b      	cmp	r3, r1
 80020ae:	d301      	bcc.n	80020b4 <__divsi3+0x154>
 80020b0:	01cb      	lsls	r3, r1, #7
 80020b2:	1ac0      	subs	r0, r0, r3
 80020b4:	4152      	adcs	r2, r2
 80020b6:	0983      	lsrs	r3, r0, #6
 80020b8:	428b      	cmp	r3, r1
 80020ba:	d301      	bcc.n	80020c0 <__divsi3+0x160>
 80020bc:	018b      	lsls	r3, r1, #6
 80020be:	1ac0      	subs	r0, r0, r3
 80020c0:	4152      	adcs	r2, r2
 80020c2:	0943      	lsrs	r3, r0, #5
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d301      	bcc.n	80020cc <__divsi3+0x16c>
 80020c8:	014b      	lsls	r3, r1, #5
 80020ca:	1ac0      	subs	r0, r0, r3
 80020cc:	4152      	adcs	r2, r2
 80020ce:	0903      	lsrs	r3, r0, #4
 80020d0:	428b      	cmp	r3, r1
 80020d2:	d301      	bcc.n	80020d8 <__divsi3+0x178>
 80020d4:	010b      	lsls	r3, r1, #4
 80020d6:	1ac0      	subs	r0, r0, r3
 80020d8:	4152      	adcs	r2, r2
 80020da:	08c3      	lsrs	r3, r0, #3
 80020dc:	428b      	cmp	r3, r1
 80020de:	d301      	bcc.n	80020e4 <__divsi3+0x184>
 80020e0:	00cb      	lsls	r3, r1, #3
 80020e2:	1ac0      	subs	r0, r0, r3
 80020e4:	4152      	adcs	r2, r2
 80020e6:	0883      	lsrs	r3, r0, #2
 80020e8:	428b      	cmp	r3, r1
 80020ea:	d301      	bcc.n	80020f0 <__divsi3+0x190>
 80020ec:	008b      	lsls	r3, r1, #2
 80020ee:	1ac0      	subs	r0, r0, r3
 80020f0:	4152      	adcs	r2, r2
 80020f2:	d2d9      	bcs.n	80020a8 <__divsi3+0x148>
 80020f4:	0843      	lsrs	r3, r0, #1
 80020f6:	428b      	cmp	r3, r1
 80020f8:	d301      	bcc.n	80020fe <__divsi3+0x19e>
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	1ac0      	subs	r0, r0, r3
 80020fe:	4152      	adcs	r2, r2
 8002100:	1a41      	subs	r1, r0, r1
 8002102:	d200      	bcs.n	8002106 <__divsi3+0x1a6>
 8002104:	4601      	mov	r1, r0
 8002106:	4663      	mov	r3, ip
 8002108:	4152      	adcs	r2, r2
 800210a:	105b      	asrs	r3, r3, #1
 800210c:	4610      	mov	r0, r2
 800210e:	d301      	bcc.n	8002114 <__divsi3+0x1b4>
 8002110:	4240      	negs	r0, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d500      	bpl.n	8002118 <__divsi3+0x1b8>
 8002116:	4249      	negs	r1, r1
 8002118:	4770      	bx	lr
 800211a:	4663      	mov	r3, ip
 800211c:	105b      	asrs	r3, r3, #1
 800211e:	d300      	bcc.n	8002122 <__divsi3+0x1c2>
 8002120:	4240      	negs	r0, r0
 8002122:	b501      	push	{r0, lr}
 8002124:	2000      	movs	r0, #0
 8002126:	f7fe f905 	bl	8000334 <__aeabi_idiv0>
 800212a:	bd02      	pop	{r1, pc}

0800212c <__aeabi_idivmod>:
 800212c:	2900      	cmp	r1, #0
 800212e:	d0f8      	beq.n	8002122 <__divsi3+0x1c2>
 8002130:	e716      	b.n	8001f60 <__divsi3>
 8002132:	4770      	bx	lr

08002134 <__aeabi_lmul>:
 8002134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002136:	46ce      	mov	lr, r9
 8002138:	4699      	mov	r9, r3
 800213a:	0c03      	lsrs	r3, r0, #16
 800213c:	469c      	mov	ip, r3
 800213e:	0413      	lsls	r3, r2, #16
 8002140:	4647      	mov	r7, r8
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	001d      	movs	r5, r3
 8002146:	000e      	movs	r6, r1
 8002148:	4661      	mov	r1, ip
 800214a:	0404      	lsls	r4, r0, #16
 800214c:	0c24      	lsrs	r4, r4, #16
 800214e:	b580      	push	{r7, lr}
 8002150:	0007      	movs	r7, r0
 8002152:	0c10      	lsrs	r0, r2, #16
 8002154:	434b      	muls	r3, r1
 8002156:	4365      	muls	r5, r4
 8002158:	4341      	muls	r1, r0
 800215a:	4360      	muls	r0, r4
 800215c:	0c2c      	lsrs	r4, r5, #16
 800215e:	18c0      	adds	r0, r0, r3
 8002160:	1824      	adds	r4, r4, r0
 8002162:	468c      	mov	ip, r1
 8002164:	42a3      	cmp	r3, r4
 8002166:	d903      	bls.n	8002170 <__aeabi_lmul+0x3c>
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	025b      	lsls	r3, r3, #9
 800216c:	4698      	mov	r8, r3
 800216e:	44c4      	add	ip, r8
 8002170:	4649      	mov	r1, r9
 8002172:	4379      	muls	r1, r7
 8002174:	4356      	muls	r6, r2
 8002176:	0c23      	lsrs	r3, r4, #16
 8002178:	042d      	lsls	r5, r5, #16
 800217a:	0c2d      	lsrs	r5, r5, #16
 800217c:	1989      	adds	r1, r1, r6
 800217e:	4463      	add	r3, ip
 8002180:	0424      	lsls	r4, r4, #16
 8002182:	1960      	adds	r0, r4, r5
 8002184:	18c9      	adds	r1, r1, r3
 8002186:	bcc0      	pop	{r6, r7}
 8002188:	46b9      	mov	r9, r7
 800218a:	46b0      	mov	r8, r6
 800218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)

08002190 <_close>:
 8002190:	2258      	movs	r2, #88	@ 0x58
 8002192:	2001      	movs	r0, #1
 8002194:	4b01      	ldr	r3, [pc, #4]	@ (800219c <_close+0xc>)
 8002196:	4240      	negs	r0, r0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	4770      	bx	lr
 800219c:	2000040c 	.word	0x2000040c

080021a0 <_fstat>:
 80021a0:	2258      	movs	r2, #88	@ 0x58
 80021a2:	2001      	movs	r0, #1
 80021a4:	4b01      	ldr	r3, [pc, #4]	@ (80021ac <_fstat+0xc>)
 80021a6:	4240      	negs	r0, r0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	4770      	bx	lr
 80021ac:	2000040c 	.word	0x2000040c

080021b0 <_getpid>:
 80021b0:	2258      	movs	r2, #88	@ 0x58
 80021b2:	2001      	movs	r0, #1
 80021b4:	4b01      	ldr	r3, [pc, #4]	@ (80021bc <_getpid+0xc>)
 80021b6:	4240      	negs	r0, r0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	4770      	bx	lr
 80021bc:	2000040c 	.word	0x2000040c

080021c0 <_gettimeofday>:
 80021c0:	2258      	movs	r2, #88	@ 0x58
 80021c2:	2001      	movs	r0, #1
 80021c4:	4b01      	ldr	r3, [pc, #4]	@ (80021cc <_gettimeofday+0xc>)
 80021c6:	4240      	negs	r0, r0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	4770      	bx	lr
 80021cc:	2000040c 	.word	0x2000040c

080021d0 <_isatty>:
 80021d0:	2258      	movs	r2, #88	@ 0x58
 80021d2:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <_isatty+0xc>)
 80021d4:	2000      	movs	r0, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4770      	bx	lr
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	2000040c 	.word	0x2000040c

080021e0 <_kill>:
 80021e0:	2258      	movs	r2, #88	@ 0x58
 80021e2:	2001      	movs	r0, #1
 80021e4:	4b01      	ldr	r3, [pc, #4]	@ (80021ec <_kill+0xc>)
 80021e6:	4240      	negs	r0, r0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	4770      	bx	lr
 80021ec:	2000040c 	.word	0x2000040c

080021f0 <_lseek>:
 80021f0:	2258      	movs	r2, #88	@ 0x58
 80021f2:	2001      	movs	r0, #1
 80021f4:	4b01      	ldr	r3, [pc, #4]	@ (80021fc <_lseek+0xc>)
 80021f6:	4240      	negs	r0, r0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	4770      	bx	lr
 80021fc:	2000040c 	.word	0x2000040c

08002200 <_read>:
 8002200:	2258      	movs	r2, #88	@ 0x58
 8002202:	2001      	movs	r0, #1
 8002204:	4b01      	ldr	r3, [pc, #4]	@ (800220c <_read+0xc>)
 8002206:	4240      	negs	r0, r0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	4770      	bx	lr
 800220c:	2000040c 	.word	0x2000040c

08002210 <_sbrk>:
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <_sbrk+0x14>)
 8002212:	0003      	movs	r3, r0
 8002214:	6810      	ldr	r0, [r2, #0]
 8002216:	2800      	cmp	r0, #0
 8002218:	d002      	beq.n	8002220 <_sbrk+0x10>
 800221a:	18c3      	adds	r3, r0, r3
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4770      	bx	lr
 8002220:	4801      	ldr	r0, [pc, #4]	@ (8002228 <_sbrk+0x18>)
 8002222:	e7fa      	b.n	800221a <_sbrk+0xa>
 8002224:	20000410 	.word	0x20000410
 8002228:	20000418 	.word	0x20000418

0800222c <_write>:
 800222c:	2258      	movs	r2, #88	@ 0x58
 800222e:	2001      	movs	r0, #1
 8002230:	4b01      	ldr	r3, [pc, #4]	@ (8002238 <_write+0xc>)
 8002232:	4240      	negs	r0, r0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	4770      	bx	lr
 8002238:	2000040c 	.word	0x2000040c

0800223c <_exit>:
 800223c:	e7fe      	b.n	800223c <_exit>
 800223e:	46c0      	nop			@ (mov r8, r8)

08002240 <encrypt>:
{
	memcpy(Key, k, 16);
	return 0x00;
}

void encrypt(){
 8002240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002242:	46d6      	mov	lr, sl
 8002244:	4646      	mov	r6, r8
 8002246:	464f      	mov	r7, r9
	//generate 16 random values for the mask
	srand(time(NULL));
 8002248:	2000      	movs	r0, #0
void encrypt(){
 800224a:	b5c0      	push	{r6, r7, lr}
	srand(time(NULL));
 800224c:	f7fe f93a 	bl	80004c4 <time>
 8002250:	f7fe f872 	bl	8000338 <srand>
	for (int i = 0; i < 4; i ++){
 8002254:	2320      	movs	r3, #32
 8002256:	4e42      	ldr	r6, [pc, #264]	@ (8002360 <encrypt+0x120>)
 8002258:	4698      	mov	r8, r3
 800225a:	0035      	movs	r5, r6
		for(int j = 0; j<4; j++){
			Mask_Matrix[i][j] = rand() % 256;
 800225c:	27ff      	movs	r7, #255	@ 0xff
 800225e:	3510      	adds	r5, #16
 8002260:	44b0      	add	r8, r6
		for(int j = 0; j<4; j++){
 8002262:	2400      	movs	r4, #0
			Mask_Matrix[i][j] = rand() % 256;
 8002264:	f7fe f898 	bl	8000398 <rand>
 8002268:	17c3      	asrs	r3, r0, #31
 800226a:	0e1b      	lsrs	r3, r3, #24
 800226c:	18c0      	adds	r0, r0, r3
 800226e:	4038      	ands	r0, r7
 8002270:	1ac0      	subs	r0, r0, r3
 8002272:	5528      	strb	r0, [r5, r4]
		for(int j = 0; j<4; j++){
 8002274:	3401      	adds	r4, #1
 8002276:	2c04      	cmp	r4, #4
 8002278:	d1f4      	bne.n	8002264 <encrypt+0x24>
	for (int i = 0; i < 4; i ++){
 800227a:	3504      	adds	r5, #4
 800227c:	4545      	cmp	r5, r8
 800227e:	d1f0      	bne.n	8002262 <encrypt+0x22>
		}
	}

	AddMatrices(Mask_Matrix, PlainText, ST_Matrix);
 8002280:	2330      	movs	r3, #48	@ 0x30
 8002282:	0034      	movs	r4, r6
 8002284:	4698      	mov	r8, r3
 8002286:	0037      	movs	r7, r6
 8002288:	44b0      	add	r8, r6
 800228a:	3420      	adds	r4, #32
 800228c:	3710      	adds	r7, #16
 800228e:	0022      	movs	r2, r4
 8002290:	4641      	mov	r1, r8
 8002292:	0038      	movs	r0, r7
 8002294:	f000 f9d0 	bl	8002638 <AddMatrices>

	ExpandKey(Key, ExpandedKey);
 8002298:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <encrypt+0x124>)
 800229a:	0030      	movs	r0, r6
 800229c:	0019      	movs	r1, r3
 800229e:	4699      	mov	r9, r3
 80022a0:	f000 f8d2 	bl	8002448 <ExpandKey>
	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 80022a4:	0032      	movs	r2, r6
 80022a6:	4643      	mov	r3, r8
 80022a8:	3240      	adds	r2, #64	@ 0x40
 80022aa:	cb23      	ldmia	r3!, {r0, r1, r5}
 80022ac:	c223      	stmia	r2!, {r0, r1, r5}

	AddRoundKey(ExpandedKey[0], StateArray);
 80022ae:	0031      	movs	r1, r6
	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 80022b0:	681b      	ldr	r3, [r3, #0]
	AddRoundKey(ExpandedKey[0], StateArray);
 80022b2:	4648      	mov	r0, r9
	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 80022b4:	6013      	str	r3, [r2, #0]
	AddRoundKey(ExpandedKey[0], StateArray);
 80022b6:	3140      	adds	r1, #64	@ 0x40
 80022b8:	f000 f964 	bl	8002584 <AddRoundKey>

	AddRoundKey(ExpandedKey[0], ST_Matrix);
 80022bc:	4648      	mov	r0, r9
 80022be:	0021      	movs	r1, r4
 80022c0:	f000 f960 	bl	8002584 <AddRoundKey>
	int i;
	for(i=1; i<=10; i++){
 80022c4:	2310      	movs	r3, #16
 80022c6:	4698      	mov	r8, r3
 80022c8:	3390      	adds	r3, #144	@ 0x90
 80022ca:	469a      	mov	sl, r3

		//Unmask input
		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 80022cc:	3b50      	subs	r3, #80	@ 0x50
 80022ce:	44c8      	add	r8, r9
 80022d0:	44ca      	add	sl, r9
 80022d2:	4699      	mov	r9, r3
 80022d4:	44b1      	add	r9, r6
		//Apply Sbox
		SubBytes(S_Matrix);
		SubBytes(StateArray);
 80022d6:	0035      	movs	r5, r6
		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 80022d8:	464a      	mov	r2, r9
 80022da:	0039      	movs	r1, r7
 80022dc:	0020      	movs	r0, r4
 80022de:	f000 f9ab 	bl	8002638 <AddMatrices>
		SubBytes(StateArray);
 80022e2:	3540      	adds	r5, #64	@ 0x40
		SubBytes(S_Matrix);
 80022e4:	4648      	mov	r0, r9
 80022e6:	f000 fa0d 	bl	8002704 <SubBytes>
		SubBytes(StateArray);
 80022ea:	0028      	movs	r0, r5
 80022ec:	f000 fa0a 	bl	8002704 <SubBytes>
		//Remask Output
		AddMatrices(S_Matrix, Mask_Matrix, ST_Matrix);
 80022f0:	0022      	movs	r2, r4
 80022f2:	0039      	movs	r1, r7
 80022f4:	4648      	mov	r0, r9
 80022f6:	f000 f99f 	bl	8002638 <AddMatrices>

		ShiftRows(StateArray);
 80022fa:	0028      	movs	r0, r5
 80022fc:	f000 fa36 	bl	800276c <ShiftRows>
		ShiftRows(ST_Matrix);
 8002300:	0020      	movs	r0, r4
 8002302:	f000 fa33 	bl	800276c <ShiftRows>
		ShiftRows(Mask_Matrix);
 8002306:	0038      	movs	r0, r7
 8002308:	f000 fa30 	bl	800276c <ShiftRows>

		if(i!=10){
 800230c:	45d0      	cmp	r8, sl
 800230e:	d014      	beq.n	800233a <encrypt+0xfa>
			MixColumns(StateArray);
 8002310:	0028      	movs	r0, r5
 8002312:	f000 fa45 	bl	80027a0 <MixColumns>
			MixColumns(ST_Matrix);
 8002316:	0020      	movs	r0, r4
 8002318:	f000 fa42 	bl	80027a0 <MixColumns>
			MixColumns(Mask_Matrix);
 800231c:	0038      	movs	r0, r7
 800231e:	f000 fa3f 	bl	80027a0 <MixColumns>
		}

		AddRoundKey(ExpandedKey[i], StateArray);
 8002322:	4640      	mov	r0, r8
 8002324:	0029      	movs	r1, r5
 8002326:	f000 f92d 	bl	8002584 <AddRoundKey>
		AddRoundKey(ExpandedKey[i], ST_Matrix);
 800232a:	4640      	mov	r0, r8
 800232c:	0021      	movs	r1, r4
 800232e:	f000 f929 	bl	8002584 <AddRoundKey>
	for(i=1; i<=10; i++){
 8002332:	2310      	movs	r3, #16
 8002334:	469c      	mov	ip, r3
 8002336:	44e0      	add	r8, ip
 8002338:	e7cd      	b.n	80022d6 <encrypt+0x96>
		AddRoundKey(ExpandedKey[i], StateArray);
 800233a:	4e0b      	ldr	r6, [pc, #44]	@ (8002368 <encrypt+0x128>)
 800233c:	0029      	movs	r1, r5
 800233e:	0030      	movs	r0, r6
 8002340:	f000 f920 	bl	8002584 <AddRoundKey>
		AddRoundKey(ExpandedKey[i], ST_Matrix);
 8002344:	0030      	movs	r0, r6
 8002346:	0021      	movs	r1, r4
 8002348:	f000 f91c 	bl	8002584 <AddRoundKey>
	}
	//Do unmasking stuff
	AddMatrices(ST_Matrix, Mask_Matrix, StateArray);
 800234c:	002a      	movs	r2, r5
 800234e:	0039      	movs	r1, r7
 8002350:	0020      	movs	r0, r4
 8002352:	f000 f971 	bl	8002638 <AddMatrices>
}	
 8002356:	bce0      	pop	{r5, r6, r7}
 8002358:	46ba      	mov	sl, r7
 800235a:	46b1      	mov	r9, r6
 800235c:	46a8      	mov	r8, r5
 800235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002360:	2000007c 	.word	0x2000007c
 8002364:	200000e0 	.word	0x200000e0
 8002368:	20000180 	.word	0x20000180

0800236c <aes>:
	return 0x00;
}

#if SS_VER == SS_VER_2_1
uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	2602      	movs	r6, #2
 8002370:	4647      	mov	r7, r8
 8002372:	46ce      	mov	lr, r9
 8002374:	0030      	movs	r0, r6
 8002376:	b580      	push	{r7, lr}
 8002378:	000c      	movs	r4, r1
 800237a:	0015      	movs	r5, r2
 800237c:	001f      	movs	r7, r3
 800237e:	4008      	ands	r0, r1
    uint8_t req_len = 0;
    uint8_t err = 0;

    if (scmd & 0x02) {
 8002380:	420e      	tst	r6, r1
 8002382:	d02f      	beq.n	80023e4 <aes+0x78>
        req_len += 16;
        if (req_len > len) {
 8002384:	2a0f      	cmp	r2, #15
 8002386:	d935      	bls.n	80023f4 <aes+0x88>
	memcpy(Key, k, 16);
 8002388:	2210      	movs	r2, #16
 800238a:	0019      	movs	r1, r3
 800238c:	4823      	ldr	r0, [pc, #140]	@ (800241c <aes+0xb0>)
 800238e:	f7fe f93b 	bl	8000608 <memcpy>
        }
        err = get_key(buf + req_len - 16, 16);
        if (err)
            return err;
    }
    if (scmd & 0x01) {
 8002392:	2601      	movs	r6, #1
 8002394:	2220      	movs	r2, #32
 8002396:	2310      	movs	r3, #16
 8002398:	4690      	mov	r8, r2
        req_len += 16;
 800239a:	2010      	movs	r0, #16
    if (scmd & 0x01) {
 800239c:	4226      	tst	r6, r4
 800239e:	d019      	beq.n	80023d4 <aes+0x68>
        req_len += 16;
        if (req_len > len) {
 80023a0:	4545      	cmp	r5, r8
 80023a2:	d327      	bcc.n	80023f4 <aes+0x88>
            return SS_ERR_LEN;
        }
        err = get_pt(buf + req_len - 16, 16);
 80023a4:	18fc      	adds	r4, r7, r3
	trigger_high();
 80023a6:	f000 ff7f 	bl	80032a8 <trigger_high>
	if ( key_entered == 1 ){
 80023aa:	2360      	movs	r3, #96	@ 0x60
 80023ac:	4f1b      	ldr	r7, [pc, #108]	@ (800241c <aes+0xb0>)
 80023ae:	4699      	mov	r9, r3
 80023b0:	5cfb      	ldrb	r3, [r7, r3]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d020      	beq.n	80023f8 <aes+0x8c>
		memcpy(Key, pt, 16);
 80023b6:	2210      	movs	r2, #16
 80023b8:	0021      	movs	r1, r4
 80023ba:	0038      	movs	r0, r7
 80023bc:	f7fe f924 	bl	8000608 <memcpy>
		key_entered = 1;
 80023c0:	464b      	mov	r3, r9
 80023c2:	54fe      	strb	r6, [r7, r3]
		trigger_low();
 80023c4:	f000 ff78 	bl	80032b8 <trigger_low>
		simpleserial_put('r', 16, pt);
 80023c8:	2072      	movs	r0, #114	@ 0x72
 80023ca:	0022      	movs	r2, r4
 80023cc:	2110      	movs	r1, #16
 80023ce:	f000 fde5 	bl	8002f9c <simpleserial_put>
        req_len += 16;
 80023d2:	4640      	mov	r0, r8
        if (err)
            return err;
    }

    if (len != req_len) {
 80023d4:	1b40      	subs	r0, r0, r5
 80023d6:	1e43      	subs	r3, r0, #1
 80023d8:	4198      	sbcs	r0, r3
 80023da:	0080      	lsls	r0, r0, #2
        return SS_ERR_LEN;
    }

    return 0x00;

}
 80023dc:	bcc0      	pop	{r6, r7}
 80023de:	46b9      	mov	r9, r7
 80023e0:	46b0      	mov	r8, r6
 80023e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023e4:	2210      	movs	r2, #16
    if (scmd & 0x01) {
 80023e6:	2601      	movs	r6, #1
 80023e8:	2300      	movs	r3, #0
 80023ea:	4690      	mov	r8, r2
 80023ec:	4226      	tst	r6, r4
 80023ee:	d0f1      	beq.n	80023d4 <aes+0x68>
        if (req_len > len) {
 80023f0:	4545      	cmp	r5, r8
 80023f2:	d2d7      	bcs.n	80023a4 <aes+0x38>
            return SS_ERR_LEN;
 80023f4:	2004      	movs	r0, #4
 80023f6:	e7f1      	b.n	80023dc <aes+0x70>
	memcpy(PlainText, pt, 16);
 80023f8:	0038      	movs	r0, r7
 80023fa:	2210      	movs	r2, #16
 80023fc:	0021      	movs	r1, r4
 80023fe:	3030      	adds	r0, #48	@ 0x30
 8002400:	f7fe f902 	bl	8000608 <memcpy>
	encrypt();
 8002404:	f7ff ff1c 	bl	8002240 <encrypt>
	trigger_low();
 8002408:	f000 ff56 	bl	80032b8 <trigger_low>
	simpleserial_put('r', 16, pt);
 800240c:	003a      	movs	r2, r7
 800240e:	2072      	movs	r0, #114	@ 0x72
 8002410:	2110      	movs	r1, #16
 8002412:	3240      	adds	r2, #64	@ 0x40
 8002414:	f000 fdc2 	bl	8002f9c <simpleserial_put>
        req_len += 16;
 8002418:	4640      	mov	r0, r8
 800241a:	e7db      	b.n	80023d4 <aes+0x68>
 800241c:	2000007c 	.word	0x2000007c

08002420 <main>:
#endif

int main(void)
{
 8002420:	b510      	push	{r4, lr}
    platform_init();
 8002422:	f000 fe8f 	bl	8003144 <platform_init>
	init_uart();
 8002426:	f000 febb 	bl	80031a0 <init_uart>
	trigger_setup();
 800242a:	f000 fefb 	bl	8003224 <trigger_setup>

	simpleserial_init();
 800242e:	f000 fc53 	bl	8002cd8 <simpleserial_init>
#if SS_VER != SS_VER_2_1
	simpleserial_addcmd('p', 16, get_pt);
	simpleserial_addcmd('k', 16, get_key);
	simpleserial_addcmd('x', 0, reset);
#else
    simpleserial_addcmd(0x01, 16, aes);
 8002432:	2110      	movs	r1, #16
 8002434:	2001      	movs	r0, #1
 8002436:	4a03      	ldr	r2, [pc, #12]	@ (8002444 <main+0x24>)
 8002438:	f000 fc82 	bl	8002d40 <simpleserial_addcmd>
#endif
	while(1)
		simpleserial_get();
 800243c:	f000 fca2 	bl	8002d84 <simpleserial_get>
	while(1)
 8002440:	e7fc      	b.n	800243c <main+0x1c>
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	0800236d 	.word	0x0800236d

08002448 <ExpandKey>:

/**********************************************************************
 * Functions for key expansion
 *********************************************************************/
void ExpandKey (unsigned char Key[][4], unsigned char Expanded_key[][4][4])
{
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	46de      	mov	lr, fp
 800244c:	4657      	mov	r7, sl
 800244e:	464e      	mov	r6, r9
 8002450:	4645      	mov	r5, r8
 8002452:	000c      	movs	r4, r1
 8002454:	b5e0      	push	{r5, r6, r7, lr}
	unsigned char Tmp_key_column[4];
	bzero(Tmp_key_column, 4*sizeof (unsigned char));
	int i,j;

	// Encryption Key copied to Expanded Key [0]
	memcpy(Expanded_key[0], Key, 4 * 4 * sizeof(unsigned char));
 8002456:	0001      	movs	r1, r0
{
 8002458:	b08b      	sub	sp, #44	@ 0x2c
	memcpy(Expanded_key[0], Key, 4 * 4 * sizeof(unsigned char));
 800245a:	2210      	movs	r2, #16
 800245c:	0020      	movs	r0, r4
 800245e:	f7fe f8d3 	bl	8000608 <memcpy>

	for (i=1; i<11; i++){
 8002462:	7ba3      	ldrb	r3, [r4, #14]
 8002464:	4a44      	ldr	r2, [pc, #272]	@ (8002578 <ExpandKey+0x130>)
 8002466:	469a      	mov	sl, r3
 8002468:	7aa3      	ldrb	r3, [r4, #10]
 800246a:	0021      	movs	r1, r4
 800246c:	4699      	mov	r9, r3
 800246e:	79a3      	ldrb	r3, [r4, #6]
 8002470:	78e7      	ldrb	r7, [r4, #3]
 8002472:	4698      	mov	r8, r3
 8002474:	78a3      	ldrb	r3, [r4, #2]
 8002476:	7be6      	ldrb	r6, [r4, #15]
 8002478:	469c      	mov	ip, r3
 800247a:	7b63      	ldrb	r3, [r4, #13]
 800247c:	7ae5      	ldrb	r5, [r4, #11]
 800247e:	9306      	str	r3, [sp, #24]
 8002480:	7a63      	ldrb	r3, [r4, #9]
 8002482:	79e0      	ldrb	r0, [r4, #7]
 8002484:	9305      	str	r3, [sp, #20]
 8002486:	7963      	ldrb	r3, [r4, #5]
 8002488:	3110      	adds	r1, #16
 800248a:	9304      	str	r3, [sp, #16]
 800248c:	7863      	ldrb	r3, [r4, #1]
 800248e:	9307      	str	r3, [sp, #28]
 8002490:	7b23      	ldrb	r3, [r4, #12]
 8002492:	9303      	str	r3, [sp, #12]
 8002494:	7a23      	ldrb	r3, [r4, #8]
 8002496:	9302      	str	r3, [sp, #8]
 8002498:	7923      	ldrb	r3, [r4, #4]
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	7823      	ldrb	r3, [r4, #0]
 800249e:	4664      	mov	r4, ip
 80024a0:	469b      	mov	fp, r3
 80024a2:	4b36      	ldr	r3, [pc, #216]	@ (800257c <ExpandKey+0x134>)
 80024a4:	4694      	mov	ip, r2
 80024a6:	9308      	str	r3, [sp, #32]
 80024a8:	464b      	mov	r3, r9
 80024aa:	9309      	str	r3, [sp, #36]	@ 0x24
		// Rcon applied
		Tmp_key_column[0]^=RCon[i-1];

		// XOR
		for(j=0; j<4; j++){
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 80024ac:	4663      	mov	r3, ip
 80024ae:	9a08      	ldr	r2, [sp, #32]
 80024b0:	5c1b      	ldrb	r3, [r3, r0]
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	4053      	eors	r3, r2
 80024b6:	4699      	mov	r9, r3
 80024b8:	465b      	mov	r3, fp
 80024ba:	464a      	mov	r2, r9
 80024bc:	4053      	eors	r3, r2
 80024be:	469b      	mov	fp, r3
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 80024c0:	4663      	mov	r3, ip
 80024c2:	5d5b      	ldrb	r3, [r3, r5]
 80024c4:	4699      	mov	r9, r3
 80024c6:	464a      	mov	r2, r9
 80024c8:	9b01      	ldr	r3, [sp, #4]
 80024ca:	4053      	eors	r3, r2
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 80024cc:	4662      	mov	r2, ip
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 80024ce:	9301      	str	r3, [sp, #4]
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 80024d0:	5d92      	ldrb	r2, [r2, r6]
 80024d2:	9b02      	ldr	r3, [sp, #8]
 80024d4:	4053      	eors	r3, r2
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 80024d6:	4662      	mov	r2, ip
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 80024d8:	9302      	str	r3, [sp, #8]
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 80024da:	5dd2      	ldrb	r2, [r2, r7]
 80024dc:	9b03      	ldr	r3, [sp, #12]
 80024de:	4053      	eors	r3, r2

			Expanded_key[i][0][j] = Tmp_key_column[0];
 80024e0:	465a      	mov	r2, fp
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 80024e2:	9303      	str	r3, [sp, #12]
			Expanded_key[i][1][j] = Tmp_key_column[1];
 80024e4:	9b01      	ldr	r3, [sp, #4]
			Expanded_key[i][0][j] = Tmp_key_column[0];
 80024e6:	700a      	strb	r2, [r1, #0]
			Expanded_key[i][1][j] = Tmp_key_column[1];
 80024e8:	710b      	strb	r3, [r1, #4]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 80024ea:	9b02      	ldr	r3, [sp, #8]
 80024ec:	720b      	strb	r3, [r1, #8]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 80024ee:	9b03      	ldr	r3, [sp, #12]
 80024f0:	730b      	strb	r3, [r1, #12]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 80024f2:	9b07      	ldr	r3, [sp, #28]
 80024f4:	4053      	eors	r3, r2
 80024f6:	9307      	str	r3, [sp, #28]
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 80024f8:	9a04      	ldr	r2, [sp, #16]
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	405a      	eors	r2, r3
 80024fe:	9204      	str	r2, [sp, #16]
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 8002500:	9b02      	ldr	r3, [sp, #8]
 8002502:	9a05      	ldr	r2, [sp, #20]
 8002504:	405a      	eors	r2, r3
 8002506:	9205      	str	r2, [sp, #20]
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	9a06      	ldr	r2, [sp, #24]
 800250c:	405a      	eors	r2, r3
			Expanded_key[i][0][j] = Tmp_key_column[0];
 800250e:	9b07      	ldr	r3, [sp, #28]
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8002510:	9206      	str	r2, [sp, #24]
			Expanded_key[i][0][j] = Tmp_key_column[0];
 8002512:	704b      	strb	r3, [r1, #1]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 8002514:	405c      	eors	r4, r3
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 8002516:	4643      	mov	r3, r8
			Expanded_key[i][1][j] = Tmp_key_column[1];
 8002518:	9a04      	ldr	r2, [sp, #16]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 800251a:	4067      	eors	r7, r4
			Expanded_key[i][1][j] = Tmp_key_column[1];
 800251c:	714a      	strb	r2, [r1, #5]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 800251e:	9a05      	ldr	r2, [sp, #20]
			Expanded_key[i][0][j] = Tmp_key_column[0];
 8002520:	708c      	strb	r4, [r1, #2]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 8002522:	724a      	strb	r2, [r1, #9]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 8002524:	9a06      	ldr	r2, [sp, #24]
			Expanded_key[i][0][j] = Tmp_key_column[0];
 8002526:	70cf      	strb	r7, [r1, #3]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 8002528:	734a      	strb	r2, [r1, #13]
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 800252a:	9a04      	ldr	r2, [sp, #16]
 800252c:	4053      	eors	r3, r2
 800252e:	4698      	mov	r8, r3
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 8002530:	9a05      	ldr	r2, [sp, #20]
 8002532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002534:	4053      	eors	r3, r2
 8002536:	9309      	str	r3, [sp, #36]	@ 0x24
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8002538:	4653      	mov	r3, sl
 800253a:	9a06      	ldr	r2, [sp, #24]
 800253c:	4053      	eors	r3, r2
 800253e:	469a      	mov	sl, r3
			Expanded_key[i][1][j] = Tmp_key_column[1];
 8002540:	4643      	mov	r3, r8
 8002542:	718b      	strb	r3, [r1, #6]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 8002544:	4653      	mov	r3, sl
 8002546:	738b      	strb	r3, [r1, #14]
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 8002548:	4643      	mov	r3, r8
 800254a:	4058      	eors	r0, r3
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 800254c:	4653      	mov	r3, sl
			Expanded_key[i][2][j] = Tmp_key_column[2];
 800254e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8002550:	405e      	eors	r6, r3
			Expanded_key[i][2][j] = Tmp_key_column[2];
 8002552:	728a      	strb	r2, [r1, #10]
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 8002554:	4055      	eors	r5, r2
	for (i=1; i<11; i++){
 8002556:	9a08      	ldr	r2, [sp, #32]
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <ExpandKey+0x138>)
 800255a:	3201      	adds	r2, #1
			Expanded_key[i][1][j] = Tmp_key_column[1];
 800255c:	71c8      	strb	r0, [r1, #7]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 800255e:	72cd      	strb	r5, [r1, #11]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 8002560:	73ce      	strb	r6, [r1, #15]
	for (i=1; i<11; i++){
 8002562:	9208      	str	r2, [sp, #32]
 8002564:	3110      	adds	r1, #16
 8002566:	429a      	cmp	r2, r3
 8002568:	d1a0      	bne.n	80024ac <ExpandKey+0x64>
		}
	}
}
 800256a:	b00b      	add	sp, #44	@ 0x2c
 800256c:	bcf0      	pop	{r4, r5, r6, r7}
 800256e:	46bb      	mov	fp, r7
 8002570:	46b2      	mov	sl, r6
 8002572:	46a9      	mov	r9, r5
 8002574:	46a0      	mov	r8, r4
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002578:	080044b0 	.word	0x080044b0
 800257c:	080042a4 	.word	0x080042a4
 8002580:	080042ae 	.word	0x080042ae

08002584 <AddRoundKey>:

void AddRoundKey (unsigned char Key[][4], unsigned char StateArray[][4])
{
	int i,j;
	for(i=0; i<4; i++)
 8002584:	1ccb      	adds	r3, r1, #3
 8002586:	1a1b      	subs	r3, r3, r0
 8002588:	2b06      	cmp	r3, #6
 800258a:	d914      	bls.n	80025b6 <AddRoundKey+0x32>
 800258c:	0003      	movs	r3, r0
 800258e:	430b      	orrs	r3, r1
 8002590:	079b      	lsls	r3, r3, #30
 8002592:	d110      	bne.n	80025b6 <AddRoundKey+0x32>
		for(j=0; j<4; j++)
			StateArray[i][j] ^= Key[i][j];
 8002594:	6802      	ldr	r2, [r0, #0]
 8002596:	680b      	ldr	r3, [r1, #0]
 8002598:	4053      	eors	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	6842      	ldr	r2, [r0, #4]
 800259e:	684b      	ldr	r3, [r1, #4]
 80025a0:	4053      	eors	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
 80025a4:	6882      	ldr	r2, [r0, #8]
 80025a6:	688b      	ldr	r3, [r1, #8]
 80025a8:	4053      	eors	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]
 80025ac:	68c2      	ldr	r2, [r0, #12]
 80025ae:	68cb      	ldr	r3, [r1, #12]
 80025b0:	4053      	eors	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
}
 80025b4:	4770      	bx	lr
			StateArray[i][j] ^= Key[i][j];
 80025b6:	7802      	ldrb	r2, [r0, #0]
 80025b8:	780b      	ldrb	r3, [r1, #0]
 80025ba:	4053      	eors	r3, r2
 80025bc:	700b      	strb	r3, [r1, #0]
 80025be:	7842      	ldrb	r2, [r0, #1]
 80025c0:	784b      	ldrb	r3, [r1, #1]
 80025c2:	4053      	eors	r3, r2
 80025c4:	704b      	strb	r3, [r1, #1]
 80025c6:	7882      	ldrb	r2, [r0, #2]
 80025c8:	788b      	ldrb	r3, [r1, #2]
 80025ca:	4053      	eors	r3, r2
 80025cc:	708b      	strb	r3, [r1, #2]
 80025ce:	78c2      	ldrb	r2, [r0, #3]
 80025d0:	78cb      	ldrb	r3, [r1, #3]
 80025d2:	4053      	eors	r3, r2
 80025d4:	70cb      	strb	r3, [r1, #3]
 80025d6:	7902      	ldrb	r2, [r0, #4]
 80025d8:	790b      	ldrb	r3, [r1, #4]
 80025da:	4053      	eors	r3, r2
 80025dc:	710b      	strb	r3, [r1, #4]
 80025de:	7942      	ldrb	r2, [r0, #5]
 80025e0:	794b      	ldrb	r3, [r1, #5]
 80025e2:	4053      	eors	r3, r2
 80025e4:	714b      	strb	r3, [r1, #5]
 80025e6:	7982      	ldrb	r2, [r0, #6]
 80025e8:	798b      	ldrb	r3, [r1, #6]
 80025ea:	4053      	eors	r3, r2
 80025ec:	718b      	strb	r3, [r1, #6]
 80025ee:	79c2      	ldrb	r2, [r0, #7]
 80025f0:	79cb      	ldrb	r3, [r1, #7]
 80025f2:	4053      	eors	r3, r2
 80025f4:	71cb      	strb	r3, [r1, #7]
 80025f6:	7a02      	ldrb	r2, [r0, #8]
 80025f8:	7a0b      	ldrb	r3, [r1, #8]
 80025fa:	4053      	eors	r3, r2
 80025fc:	720b      	strb	r3, [r1, #8]
 80025fe:	7a42      	ldrb	r2, [r0, #9]
 8002600:	7a4b      	ldrb	r3, [r1, #9]
 8002602:	4053      	eors	r3, r2
 8002604:	724b      	strb	r3, [r1, #9]
 8002606:	7a82      	ldrb	r2, [r0, #10]
 8002608:	7a8b      	ldrb	r3, [r1, #10]
 800260a:	4053      	eors	r3, r2
 800260c:	728b      	strb	r3, [r1, #10]
 800260e:	7ac2      	ldrb	r2, [r0, #11]
 8002610:	7acb      	ldrb	r3, [r1, #11]
 8002612:	4053      	eors	r3, r2
 8002614:	72cb      	strb	r3, [r1, #11]
 8002616:	7b02      	ldrb	r2, [r0, #12]
 8002618:	7b0b      	ldrb	r3, [r1, #12]
 800261a:	4053      	eors	r3, r2
 800261c:	730b      	strb	r3, [r1, #12]
 800261e:	7b42      	ldrb	r2, [r0, #13]
 8002620:	7b4b      	ldrb	r3, [r1, #13]
 8002622:	4053      	eors	r3, r2
 8002624:	734b      	strb	r3, [r1, #13]
 8002626:	7b82      	ldrb	r2, [r0, #14]
 8002628:	7b8b      	ldrb	r3, [r1, #14]
 800262a:	4053      	eors	r3, r2
 800262c:	738b      	strb	r3, [r1, #14]
 800262e:	7bc2      	ldrb	r2, [r0, #15]
 8002630:	7bcb      	ldrb	r3, [r1, #15]
 8002632:	4053      	eors	r3, r2
 8002634:	73cb      	strb	r3, [r1, #15]
}
 8002636:	e7bd      	b.n	80025b4 <AddRoundKey+0x30>

08002638 <AddMatrices>:

 void AddMatrices( unsigned char (*Mat1)[4], unsigned char (*Mat2)[4], unsigned char(*res)[4]){
 8002638:	b530      	push	{r4, r5, lr}
 800263a:	2406      	movs	r4, #6
 800263c:	1cc3      	adds	r3, r0, #3
 800263e:	1ccd      	adds	r5, r1, #3
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	1aad      	subs	r5, r5, r2
 8002644:	429c      	cmp	r4, r3
 8002646:	419b      	sbcs	r3, r3
 8002648:	42ac      	cmp	r4, r5
 800264a:	41a4      	sbcs	r4, r4
 800264c:	425b      	negs	r3, r3
 800264e:	4264      	negs	r4, r4
 8002650:	421c      	tst	r4, r3
 8002652:	d015      	beq.n	8002680 <AddMatrices+0x48>
 8002654:	0013      	movs	r3, r2
 8002656:	430b      	orrs	r3, r1
 8002658:	4303      	orrs	r3, r0
 800265a:	079b      	lsls	r3, r3, #30
 800265c:	d110      	bne.n	8002680 <AddMatrices+0x48>
	int i,j;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			res[i][j] = Mat1[i][j] ^ Mat2[i][j];
 800265e:	680c      	ldr	r4, [r1, #0]
 8002660:	6803      	ldr	r3, [r0, #0]
 8002662:	4063      	eors	r3, r4
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	684c      	ldr	r4, [r1, #4]
 8002668:	6843      	ldr	r3, [r0, #4]
 800266a:	4063      	eors	r3, r4
 800266c:	6053      	str	r3, [r2, #4]
 800266e:	688c      	ldr	r4, [r1, #8]
 8002670:	6883      	ldr	r3, [r0, #8]
 8002672:	4063      	eors	r3, r4
 8002674:	6093      	str	r3, [r2, #8]
 8002676:	68c3      	ldr	r3, [r0, #12]
 8002678:	68c9      	ldr	r1, [r1, #12]
 800267a:	404b      	eors	r3, r1
 800267c:	60d3      	str	r3, [r2, #12]
		}
		}
}
 800267e:	bd30      	pop	{r4, r5, pc}
			res[i][j] = Mat1[i][j] ^ Mat2[i][j];
 8002680:	780c      	ldrb	r4, [r1, #0]
 8002682:	7803      	ldrb	r3, [r0, #0]
 8002684:	4063      	eors	r3, r4
 8002686:	7013      	strb	r3, [r2, #0]
 8002688:	784c      	ldrb	r4, [r1, #1]
 800268a:	7843      	ldrb	r3, [r0, #1]
 800268c:	4063      	eors	r3, r4
 800268e:	7053      	strb	r3, [r2, #1]
 8002690:	788c      	ldrb	r4, [r1, #2]
 8002692:	7883      	ldrb	r3, [r0, #2]
 8002694:	4063      	eors	r3, r4
 8002696:	7093      	strb	r3, [r2, #2]
 8002698:	78cc      	ldrb	r4, [r1, #3]
 800269a:	78c3      	ldrb	r3, [r0, #3]
 800269c:	4063      	eors	r3, r4
 800269e:	70d3      	strb	r3, [r2, #3]
 80026a0:	790c      	ldrb	r4, [r1, #4]
 80026a2:	7903      	ldrb	r3, [r0, #4]
 80026a4:	4063      	eors	r3, r4
 80026a6:	7113      	strb	r3, [r2, #4]
 80026a8:	794c      	ldrb	r4, [r1, #5]
 80026aa:	7943      	ldrb	r3, [r0, #5]
 80026ac:	4063      	eors	r3, r4
 80026ae:	7153      	strb	r3, [r2, #5]
 80026b0:	798c      	ldrb	r4, [r1, #6]
 80026b2:	7983      	ldrb	r3, [r0, #6]
 80026b4:	4063      	eors	r3, r4
 80026b6:	7193      	strb	r3, [r2, #6]
 80026b8:	79cc      	ldrb	r4, [r1, #7]
 80026ba:	79c3      	ldrb	r3, [r0, #7]
 80026bc:	4063      	eors	r3, r4
 80026be:	71d3      	strb	r3, [r2, #7]
 80026c0:	7a0c      	ldrb	r4, [r1, #8]
 80026c2:	7a03      	ldrb	r3, [r0, #8]
 80026c4:	4063      	eors	r3, r4
 80026c6:	7213      	strb	r3, [r2, #8]
 80026c8:	7a4c      	ldrb	r4, [r1, #9]
 80026ca:	7a43      	ldrb	r3, [r0, #9]
 80026cc:	4063      	eors	r3, r4
 80026ce:	7253      	strb	r3, [r2, #9]
 80026d0:	7a8c      	ldrb	r4, [r1, #10]
 80026d2:	7a83      	ldrb	r3, [r0, #10]
 80026d4:	4063      	eors	r3, r4
 80026d6:	7293      	strb	r3, [r2, #10]
 80026d8:	7acc      	ldrb	r4, [r1, #11]
 80026da:	7ac3      	ldrb	r3, [r0, #11]
 80026dc:	4063      	eors	r3, r4
 80026de:	72d3      	strb	r3, [r2, #11]
 80026e0:	7b0c      	ldrb	r4, [r1, #12]
 80026e2:	7b03      	ldrb	r3, [r0, #12]
 80026e4:	4063      	eors	r3, r4
 80026e6:	7313      	strb	r3, [r2, #12]
 80026e8:	7b4c      	ldrb	r4, [r1, #13]
 80026ea:	7b43      	ldrb	r3, [r0, #13]
 80026ec:	4063      	eors	r3, r4
 80026ee:	7353      	strb	r3, [r2, #13]
 80026f0:	7b8c      	ldrb	r4, [r1, #14]
 80026f2:	7b83      	ldrb	r3, [r0, #14]
 80026f4:	4063      	eors	r3, r4
 80026f6:	7393      	strb	r3, [r2, #14]
 80026f8:	7bc3      	ldrb	r3, [r0, #15]
 80026fa:	7bc9      	ldrb	r1, [r1, #15]
 80026fc:	404b      	eors	r3, r1
 80026fe:	73d3      	strb	r3, [r2, #15]
}
 8002700:	e7bd      	b.n	800267e <AddMatrices+0x46>
 8002702:	46c0      	nop			@ (mov r8, r8)

08002704 <SubBytes>:
void SubBytes (unsigned char StateArray[][4])
{
	int i,j;
	for(i=0; i<4; i++)
		for(j=0; j<4; j++)
			StateArray[i][j] = SBox[StateArray[i][j]];
 8002704:	4b18      	ldr	r3, [pc, #96]	@ (8002768 <SubBytes+0x64>)
 8002706:	7802      	ldrb	r2, [r0, #0]
 8002708:	5c9a      	ldrb	r2, [r3, r2]
 800270a:	7002      	strb	r2, [r0, #0]
 800270c:	7842      	ldrb	r2, [r0, #1]
 800270e:	5c9a      	ldrb	r2, [r3, r2]
 8002710:	7042      	strb	r2, [r0, #1]
 8002712:	7882      	ldrb	r2, [r0, #2]
 8002714:	5c9a      	ldrb	r2, [r3, r2]
 8002716:	7082      	strb	r2, [r0, #2]
 8002718:	78c2      	ldrb	r2, [r0, #3]
 800271a:	5c9a      	ldrb	r2, [r3, r2]
 800271c:	70c2      	strb	r2, [r0, #3]
 800271e:	7902      	ldrb	r2, [r0, #4]
 8002720:	5c9a      	ldrb	r2, [r3, r2]
 8002722:	7102      	strb	r2, [r0, #4]
 8002724:	7942      	ldrb	r2, [r0, #5]
 8002726:	5c9a      	ldrb	r2, [r3, r2]
 8002728:	7142      	strb	r2, [r0, #5]
 800272a:	7982      	ldrb	r2, [r0, #6]
 800272c:	5c9a      	ldrb	r2, [r3, r2]
 800272e:	7182      	strb	r2, [r0, #6]
 8002730:	79c2      	ldrb	r2, [r0, #7]
 8002732:	5c9a      	ldrb	r2, [r3, r2]
 8002734:	71c2      	strb	r2, [r0, #7]
 8002736:	7a02      	ldrb	r2, [r0, #8]
 8002738:	5c9a      	ldrb	r2, [r3, r2]
 800273a:	7202      	strb	r2, [r0, #8]
 800273c:	7a42      	ldrb	r2, [r0, #9]
 800273e:	5c9a      	ldrb	r2, [r3, r2]
 8002740:	7242      	strb	r2, [r0, #9]
 8002742:	7a82      	ldrb	r2, [r0, #10]
 8002744:	5c9a      	ldrb	r2, [r3, r2]
 8002746:	7282      	strb	r2, [r0, #10]
 8002748:	7ac2      	ldrb	r2, [r0, #11]
 800274a:	5c9a      	ldrb	r2, [r3, r2]
 800274c:	72c2      	strb	r2, [r0, #11]
 800274e:	7b02      	ldrb	r2, [r0, #12]
 8002750:	5c9a      	ldrb	r2, [r3, r2]
 8002752:	7302      	strb	r2, [r0, #12]
 8002754:	7b42      	ldrb	r2, [r0, #13]
 8002756:	5c9a      	ldrb	r2, [r3, r2]
 8002758:	7342      	strb	r2, [r0, #13]
 800275a:	7b82      	ldrb	r2, [r0, #14]
 800275c:	5c9a      	ldrb	r2, [r3, r2]
 800275e:	7382      	strb	r2, [r0, #14]
 8002760:	7bc2      	ldrb	r2, [r0, #15]
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	73c3      	strb	r3, [r0, #15]
}
 8002766:	4770      	bx	lr
 8002768:	080044b0 	.word	0x080044b0

0800276c <ShiftRows>:

void ShiftRows (unsigned char Matrix[][4])
{
	unsigned char x;
	x = Matrix[1][0];
	Matrix[1][0] = Matrix[1][1];
 800276c:	7942      	ldrb	r2, [r0, #5]
	x = Matrix[1][0];
 800276e:	7903      	ldrb	r3, [r0, #4]
	Matrix[1][0] = Matrix[1][1];
 8002770:	7102      	strb	r2, [r0, #4]
	Matrix[1][1] = Matrix[1][2];
 8002772:	7982      	ldrb	r2, [r0, #6]
 8002774:	7142      	strb	r2, [r0, #5]
	Matrix[1][2] = Matrix[1][3];
 8002776:	79c2      	ldrb	r2, [r0, #7]
	Matrix[1][3] = x;
 8002778:	71c3      	strb	r3, [r0, #7]
	Matrix[1][2] = Matrix[1][3];
 800277a:	7182      	strb	r2, [r0, #6]
	x = Matrix[2][0];
	Matrix[2][0] = Matrix[2][2];
 800277c:	7a82      	ldrb	r2, [r0, #10]
	x = Matrix[2][0];
 800277e:	7a03      	ldrb	r3, [r0, #8]
	Matrix[2][0] = Matrix[2][2];
 8002780:	7202      	strb	r2, [r0, #8]
	Matrix[2][2] = x;
	x = Matrix[2][1];
	Matrix[2][1] = Matrix[2][3];
 8002782:	7ac2      	ldrb	r2, [r0, #11]
	Matrix[2][2] = x;
 8002784:	7283      	strb	r3, [r0, #10]
	x = Matrix[2][1];
 8002786:	7a43      	ldrb	r3, [r0, #9]
	Matrix[2][1] = Matrix[2][3];
 8002788:	7242      	strb	r2, [r0, #9]
	Matrix[2][3] = x;
	x = Matrix[3][3];
	Matrix[3][3] = Matrix[3][2];
 800278a:	7b82      	ldrb	r2, [r0, #14]
	Matrix[2][3] = x;
 800278c:	72c3      	strb	r3, [r0, #11]
	x = Matrix[3][3];
 800278e:	7bc3      	ldrb	r3, [r0, #15]
	Matrix[3][3] = Matrix[3][2];
 8002790:	73c2      	strb	r2, [r0, #15]
	Matrix[3][2] = Matrix[3][1];
 8002792:	7b42      	ldrb	r2, [r0, #13]
 8002794:	7382      	strb	r2, [r0, #14]
	Matrix[3][1] = Matrix[3][0];
 8002796:	7b02      	ldrb	r2, [r0, #12]
	Matrix[3][0] = x;
 8002798:	7303      	strb	r3, [r0, #12]
	Matrix[3][1] = Matrix[3][0];
 800279a:	7342      	strb	r2, [r0, #13]
}
 800279c:	4770      	bx	lr
 800279e:	46c0      	nop			@ (mov r8, r8)

080027a0 <MixColumns>:

void MixColumns (unsigned char S_Array[][4])
{
 80027a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a2:	46de      	mov	lr, fp
 80027a4:	4657      	mov	r7, sl
 80027a6:	464e      	mov	r6, r9
 80027a8:	4645      	mov	r5, r8
 80027aa:	b5e0      	push	{r5, r6, r7, lr}
	int i;
	unsigned char StateArrayTmp[4][4];

	for ( i = 0; i < 4; i ++)
	{
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80027ac:	7903      	ldrb	r3, [r0, #4]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80027ae:	7a05      	ldrb	r5, [r0, #8]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80027b0:	4699      	mov	r9, r3
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80027b2:	7b03      	ldrb	r3, [r0, #12]
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
	        S_Array [2][ i ]] ^ S_Array [3][ i ];
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80027b4:	464a      	mov	r2, r9
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80027b6:	469a      	mov	sl, r3
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80027b8:	4654      	mov	r4, sl
 80027ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002978 <MixColumns+0x1d8>)
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80027bc:	7806      	ldrb	r6, [r0, #0]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80027be:	5d59      	ldrb	r1, [r3, r5]
 80027c0:	4072      	eors	r2, r6
 80027c2:	4051      	eors	r1, r2
	]] ^ xTime3 [ S_Array [3][ i ]];
 80027c4:	4a6d      	ldr	r2, [pc, #436]	@ (800297c <MixColumns+0x1dc>)
{
 80027c6:	b099      	sub	sp, #100	@ 0x64
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80027c8:	5d14      	ldrb	r4, [r2, r4]
 80027ca:	9110      	str	r1, [sp, #64]	@ 0x40
 80027cc:	9411      	str	r4, [sp, #68]	@ 0x44
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80027ce:	9609      	str	r6, [sp, #36]	@ 0x24
 80027d0:	5d91      	ldrb	r1, [r2, r6]
 80027d2:	464c      	mov	r4, r9
 80027d4:	4656      	mov	r6, sl
 80027d6:	406c      	eors	r4, r5
 80027d8:	5d9e      	ldrb	r6, [r3, r6]
 80027da:	404c      	eors	r4, r1
 80027dc:	9412      	str	r4, [sp, #72]	@ 0x48
 80027de:	9613      	str	r6, [sp, #76]	@ 0x4c
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80027e0:	7846      	ldrb	r6, [r0, #1]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80027e2:	7b41      	ldrb	r1, [r0, #13]
 80027e4:	7a47      	ldrb	r7, [r0, #9]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80027e6:	7944      	ldrb	r4, [r0, #5]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80027e8:	9104      	str	r1, [sp, #16]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80027ea:	0031      	movs	r1, r6
 80027ec:	9405      	str	r4, [sp, #20]
 80027ee:	4061      	eors	r1, r4
 80027f0:	5ddc      	ldrb	r4, [r3, r7]
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80027f2:	9608      	str	r6, [sp, #32]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80027f4:	4061      	eors	r1, r4
 80027f6:	9c04      	ldr	r4, [sp, #16]
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80027f8:	9707      	str	r7, [sp, #28]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80027fa:	5d14      	ldrb	r4, [r2, r4]
 80027fc:	4061      	eors	r1, r4
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80027fe:	9c05      	ldr	r4, [sp, #20]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002800:	910b      	str	r1, [sp, #44]	@ 0x2c
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 8002802:	5d91      	ldrb	r1, [r2, r6]
 8002804:	9e04      	ldr	r6, [sp, #16]
 8002806:	407c      	eors	r4, r7
 8002808:	4061      	eors	r1, r4
 800280a:	5d9c      	ldrb	r4, [r3, r6]
 800280c:	4061      	eors	r1, r4
 800280e:	910d      	str	r1, [sp, #52]	@ 0x34
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8002810:	7881      	ldrb	r1, [r0, #2]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 8002812:	7b86      	ldrb	r6, [r0, #14]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8002814:	4688      	mov	r8, r1
 8002816:	7981      	ldrb	r1, [r0, #6]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002818:	4644      	mov	r4, r8
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 800281a:	468c      	mov	ip, r1
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 800281c:	4667      	mov	r7, ip
			S_Array [2][ i ] ^ S_Array [3][ i ];
 800281e:	7a81      	ldrb	r1, [r0, #10]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002820:	407c      	eors	r4, r7
 8002822:	000f      	movs	r7, r1
 8002824:	5c59      	ldrb	r1, [r3, r1]
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 8002826:	970a      	str	r7, [sp, #40]	@ 0x28
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002828:	4061      	eors	r1, r4
 800282a:	5d94      	ldrb	r4, [r2, r6]
 800282c:	4061      	eors	r1, r4
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 800282e:	4664      	mov	r4, ip
 8002830:	407c      	eors	r4, r7
 8002832:	4647      	mov	r7, r8
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002834:	910e      	str	r1, [sp, #56]	@ 0x38
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 8002836:	0021      	movs	r1, r4
 8002838:	5dd4      	ldrb	r4, [r2, r7]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 800283a:	4657      	mov	r7, sl
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 800283c:	4061      	eors	r1, r4
 800283e:	5d9c      	ldrb	r4, [r3, r6]
 8002840:	4061      	eors	r1, r4
 8002842:	910f      	str	r1, [sp, #60]	@ 0x3c
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8002844:	78c1      	ldrb	r1, [r0, #3]
 8002846:	9101      	str	r1, [sp, #4]
 8002848:	79c4      	ldrb	r4, [r0, #7]
 800284a:	9406      	str	r4, [sp, #24]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 800284c:	7ac1      	ldrb	r1, [r0, #11]
 800284e:	9102      	str	r1, [sp, #8]
 8002850:	7bc1      	ldrb	r1, [r0, #15]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8002852:	950c      	str	r5, [sp, #48]	@ 0x30
			S_Array [2][ i ] ^ S_Array [3][ i ];
 8002854:	9103      	str	r1, [sp, #12]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8002856:	0029      	movs	r1, r5
 8002858:	4079      	eors	r1, r7
 800285a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800285c:	5ddc      	ldrb	r4, [r3, r7]
 800285e:	464f      	mov	r7, r9
 8002860:	4061      	eors	r1, r4
 8002862:	5dd5      	ldrb	r5, [r2, r7]
 8002864:	9c04      	ldr	r4, [sp, #16]
 8002866:	9f07      	ldr	r7, [sp, #28]
 8002868:	4069      	eors	r1, r5
 800286a:	4067      	eors	r7, r4
 800286c:	9c08      	ldr	r4, [sp, #32]
 800286e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8002870:	5d1c      	ldrb	r4, [r3, r4]
 8002872:	4075      	eors	r5, r6
 8002874:	407c      	eors	r4, r7
 8002876:	9f05      	ldr	r7, [sp, #20]
 8002878:	5dd7      	ldrb	r7, [r2, r7]
 800287a:	407c      	eors	r4, r7
 800287c:	4647      	mov	r7, r8
 800287e:	5ddf      	ldrb	r7, [r3, r7]
 8002880:	0224      	lsls	r4, r4, #8
 8002882:	407d      	eors	r5, r7
 8002884:	4667      	mov	r7, ip
 8002886:	5dd7      	ldrb	r7, [r2, r7]
 8002888:	4321      	orrs	r1, r4
 800288a:	407d      	eors	r5, r7
 800288c:	9c02      	ldr	r4, [sp, #8]
 800288e:	9f03      	ldr	r7, [sp, #12]
 8002890:	042d      	lsls	r5, r5, #16
 8002892:	407c      	eors	r4, r7
 8002894:	9f01      	ldr	r7, [sp, #4]
 8002896:	4329      	orrs	r1, r5
 8002898:	5ddf      	ldrb	r7, [r3, r7]
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 800289a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 800289c:	407c      	eors	r4, r7
 800289e:	9f06      	ldr	r7, [sp, #24]
 80028a0:	5dd7      	ldrb	r7, [r2, r7]
 80028a2:	407c      	eors	r4, r7
 80028a4:	000f      	movs	r7, r1
 80028a6:	0624      	lsls	r4, r4, #24
 80028a8:	4327      	orrs	r7, r4
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028aa:	4654      	mov	r4, sl
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028ac:	46bb      	mov	fp, r7
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028ae:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80028b0:	4067      	eors	r7, r4
 80028b2:	464c      	mov	r4, r9
 80028b4:	5d19      	ldrb	r1, [r3, r4]
 80028b6:	5d54      	ldrb	r4, [r2, r5]
 80028b8:	4079      	eors	r1, r7
 80028ba:	9d04      	ldr	r5, [sp, #16]
 80028bc:	9f08      	ldr	r7, [sp, #32]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028be:	4061      	eors	r1, r4
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028c0:	407d      	eors	r5, r7
 80028c2:	9f05      	ldr	r7, [sp, #20]
 80028c4:	5ddf      	ldrb	r7, [r3, r7]
 80028c6:	406f      	eors	r7, r5
 80028c8:	9d07      	ldr	r5, [sp, #28]
 80028ca:	5d55      	ldrb	r5, [r2, r5]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028cc:	406f      	eors	r7, r5
 80028ce:	023f      	lsls	r7, r7, #8
 80028d0:	4339      	orrs	r1, r7
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028d2:	4647      	mov	r7, r8
 80028d4:	407e      	eors	r6, r7
 80028d6:	4667      	mov	r7, ip
 80028d8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80028da:	5ddc      	ldrb	r4, [r3, r7]
 80028dc:	5d55      	ldrb	r5, [r2, r5]
 80028de:	4074      	eors	r4, r6
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028e0:	406c      	eors	r4, r5
 80028e2:	4d27      	ldr	r5, [pc, #156]	@ (8002980 <MixColumns+0x1e0>)
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028e4:	9e01      	ldr	r6, [sp, #4]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028e6:	4029      	ands	r1, r5
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028e8:	9d03      	ldr	r5, [sp, #12]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028ea:	0424      	lsls	r4, r4, #16
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028ec:	4075      	eors	r5, r6
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028ee:	4321      	orrs	r1, r4
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028f0:	002c      	movs	r4, r5
 80028f2:	9f06      	ldr	r7, [sp, #24]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028f4:	0209      	lsls	r1, r1, #8
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028f6:	5ddd      	ldrb	r5, [r3, r7]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80028f8:	0a09      	lsrs	r1, r1, #8
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 80028fa:	406c      	eors	r4, r5
 80028fc:	9d02      	ldr	r5, [sp, #8]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 80028fe:	407e      	eors	r6, r7
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 8002900:	5d55      	ldrb	r5, [r2, r5]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8002902:	406c      	eors	r4, r5
 8002904:	0624      	lsls	r4, r4, #24
 8002906:	4321      	orrs	r1, r4
 8002908:	465c      	mov	r4, fp
 800290a:	9115      	str	r1, [sp, #84]	@ 0x54
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 800290c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800290e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8002910:	9414      	str	r4, [sp, #80]	@ 0x50
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002912:	020c      	lsls	r4, r1, #8
 8002914:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8002916:	4069      	eors	r1, r5
 8002918:	4321      	orrs	r1, r4
 800291a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800291c:	9c02      	ldr	r4, [sp, #8]
 800291e:	042d      	lsls	r5, r5, #16
 8002920:	5d1c      	ldrb	r4, [r3, r4]
 8002922:	4329      	orrs	r1, r5
 8002924:	4074      	eors	r4, r6
 8002926:	9e03      	ldr	r6, [sp, #12]
 8002928:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800292a:	5d96      	ldrb	r6, [r2, r6]
 800292c:	022d      	lsls	r5, r5, #8
 800292e:	4074      	eors	r4, r6
 8002930:	0624      	lsls	r4, r4, #24
 8002932:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8002934:	4321      	orrs	r1, r4
 8002936:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8002938:	9116      	str	r1, [sp, #88]	@ 0x58
 800293a:	4074      	eors	r4, r6
 800293c:	46a4      	mov	ip, r4
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 800293e:	9c02      	ldr	r4, [sp, #8]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002940:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 8002942:	4067      	eors	r7, r4
 8002944:	003c      	movs	r4, r7
 8002946:	9f01      	ldr	r7, [sp, #4]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002948:	0436      	lsls	r6, r6, #16
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 800294a:	5dd2      	ldrb	r2, [r2, r7]
	 i ] ^ xTime2 [ S_Array [3][ i ]];
	}
	memcpy(S_Array, StateArrayTmp, 4 * 4 * sizeof(unsigned char));
 800294c:	a914      	add	r1, sp, #80	@ 0x50
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 800294e:	4062      	eors	r2, r4
 8002950:	9c03      	ldr	r4, [sp, #12]
 8002952:	5d1b      	ldrb	r3, [r3, r4]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002954:	405a      	eors	r2, r3
 8002956:	4663      	mov	r3, ip
 8002958:	432b      	orrs	r3, r5
 800295a:	0612      	lsls	r2, r2, #24
 800295c:	4333      	orrs	r3, r6
 800295e:	4313      	orrs	r3, r2
	memcpy(S_Array, StateArrayTmp, 4 * 4 * sizeof(unsigned char));
 8002960:	2210      	movs	r2, #16
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 8002962:	9317      	str	r3, [sp, #92]	@ 0x5c
	memcpy(S_Array, StateArrayTmp, 4 * 4 * sizeof(unsigned char));
 8002964:	f7fd fe50 	bl	8000608 <memcpy>
}
 8002968:	b019      	add	sp, #100	@ 0x64
 800296a:	bcf0      	pop	{r4, r5, r6, r7}
 800296c:	46bb      	mov	fp, r7
 800296e:	46b2      	mov	sl, r6
 8002970:	46a9      	mov	r9, r5
 8002972:	46a0      	mov	r8, r4
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	080043b0 	.word	0x080043b0
 800297c:	080042b0 	.word	0x080042b0
 8002980:	ff00ffff 	.word	0xff00ffff

08002984 <simpleserial_put.constprop.0>:
ERROR:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
 8002984:	b530      	push	{r4, r5, lr}
 8002986:	b0c1      	sub	sp, #260	@ 0x104
{
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8002988:	466a      	mov	r2, sp
 800298a:	2300      	movs	r3, #0
 800298c:	7013      	strb	r3, [r2, #0]
	data_buf[1] = c;
	data_buf[2] = size;
 800298e:	2301      	movs	r3, #1
 8002990:	7093      	strb	r3, [r2, #2]
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8002992:	466b      	mov	r3, sp
	data_buf[1] = c;
 8002994:	7050      	strb	r0, [r2, #1]
		data_buf[i + 3] = output[i];
 8002996:	780a      	ldrb	r2, [r1, #0]
 8002998:	70da      	strb	r2, [r3, #3]
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800299a:	b243      	sxtb	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	da00      	bge.n	80029a2 <simpleserial_put.constprop.0+0x1e>
 80029a0:	e0cd      	b.n	8002b3e <simpleserial_put.constprop.0+0x1ba>
 80029a2:	0041      	lsls	r1, r0, #1
 80029a4:	b2cb      	uxtb	r3, r1
 80029a6:	b249      	sxtb	r1, r1
 80029a8:	2900      	cmp	r1, #0
 80029aa:	da00      	bge.n	80029ae <simpleserial_put.constprop.0+0x2a>
 80029ac:	e0cf      	b.n	8002b4e <simpleserial_put.constprop.0+0x1ca>
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	b2d9      	uxtb	r1, r3
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da00      	bge.n	80029ba <simpleserial_put.constprop.0+0x36>
 80029b8:	e0d1      	b.n	8002b5e <simpleserial_put.constprop.0+0x1da>
 80029ba:	0049      	lsls	r1, r1, #1
 80029bc:	b2cb      	uxtb	r3, r1
 80029be:	b249      	sxtb	r1, r1
 80029c0:	2900      	cmp	r1, #0
 80029c2:	da00      	bge.n	80029c6 <simpleserial_put.constprop.0+0x42>
 80029c4:	e0d3      	b.n	8002b6e <simpleserial_put.constprop.0+0x1ea>
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	b2d9      	uxtb	r1, r3
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da00      	bge.n	80029d2 <simpleserial_put.constprop.0+0x4e>
 80029d0:	e0d5      	b.n	8002b7e <simpleserial_put.constprop.0+0x1fa>
 80029d2:	0049      	lsls	r1, r1, #1
 80029d4:	b2cb      	uxtb	r3, r1
 80029d6:	b249      	sxtb	r1, r1
 80029d8:	2900      	cmp	r1, #0
 80029da:	da00      	bge.n	80029de <simpleserial_put.constprop.0+0x5a>
 80029dc:	e0d7      	b.n	8002b8e <simpleserial_put.constprop.0+0x20a>
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	b2dc      	uxtb	r4, r3
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	da00      	bge.n	80029ea <simpleserial_put.constprop.0+0x66>
 80029e8:	e0d9      	b.n	8002b9e <simpleserial_put.constprop.0+0x21a>
 80029ea:	0064      	lsls	r4, r4, #1
 80029ec:	b2e1      	uxtb	r1, r4
 80029ee:	b264      	sxtb	r4, r4
 80029f0:	2c00      	cmp	r4, #0
 80029f2:	da00      	bge.n	80029f6 <simpleserial_put.constprop.0+0x72>
 80029f4:	e0db      	b.n	8002bae <simpleserial_put.constprop.0+0x22a>
		crc ^= *buf++;
 80029f6:	2301      	movs	r3, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80029f8:	0049      	lsls	r1, r1, #1
 80029fa:	b2c9      	uxtb	r1, r1
		crc ^= *buf++;
 80029fc:	4059      	eors	r1, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80029fe:	b24b      	sxtb	r3, r1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da00      	bge.n	8002a06 <simpleserial_put.constprop.0+0x82>
 8002a04:	e0dd      	b.n	8002bc2 <simpleserial_put.constprop.0+0x23e>
 8002a06:	0049      	lsls	r1, r1, #1
 8002a08:	b2cb      	uxtb	r3, r1
 8002a0a:	b249      	sxtb	r1, r1
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	da00      	bge.n	8002a12 <simpleserial_put.constprop.0+0x8e>
 8002a10:	e0df      	b.n	8002bd2 <simpleserial_put.constprop.0+0x24e>
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	b2d9      	uxtb	r1, r3
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da00      	bge.n	8002a1e <simpleserial_put.constprop.0+0x9a>
 8002a1c:	e0e1      	b.n	8002be2 <simpleserial_put.constprop.0+0x25e>
 8002a1e:	0049      	lsls	r1, r1, #1
 8002a20:	b2cb      	uxtb	r3, r1
 8002a22:	b249      	sxtb	r1, r1
 8002a24:	2900      	cmp	r1, #0
 8002a26:	da00      	bge.n	8002a2a <simpleserial_put.constprop.0+0xa6>
 8002a28:	e0e3      	b.n	8002bf2 <simpleserial_put.constprop.0+0x26e>
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	b2d9      	uxtb	r1, r3
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da00      	bge.n	8002a36 <simpleserial_put.constprop.0+0xb2>
 8002a34:	e0e5      	b.n	8002c02 <simpleserial_put.constprop.0+0x27e>
 8002a36:	0049      	lsls	r1, r1, #1
 8002a38:	b2cb      	uxtb	r3, r1
 8002a3a:	b249      	sxtb	r1, r1
 8002a3c:	2900      	cmp	r1, #0
 8002a3e:	da00      	bge.n	8002a42 <simpleserial_put.constprop.0+0xbe>
 8002a40:	e0e7      	b.n	8002c12 <simpleserial_put.constprop.0+0x28e>
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	b2d9      	uxtb	r1, r3
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da00      	bge.n	8002a4e <simpleserial_put.constprop.0+0xca>
 8002a4c:	e0e9      	b.n	8002c22 <simpleserial_put.constprop.0+0x29e>
 8002a4e:	0049      	lsls	r1, r1, #1
 8002a50:	b2cb      	uxtb	r3, r1
 8002a52:	b249      	sxtb	r1, r1
 8002a54:	2900      	cmp	r1, #0
 8002a56:	da00      	bge.n	8002a5a <simpleserial_put.constprop.0+0xd6>
 8002a58:	e0eb      	b.n	8002c32 <simpleserial_put.constprop.0+0x2ae>
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
		crc ^= *buf++;
 8002a5e:	4053      	eors	r3, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002a60:	b259      	sxtb	r1, r3
 8002a62:	2900      	cmp	r1, #0
 8002a64:	da00      	bge.n	8002a68 <simpleserial_put.constprop.0+0xe4>
 8002a66:	e0ed      	b.n	8002c44 <simpleserial_put.constprop.0+0x2c0>
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da00      	bge.n	8002a74 <simpleserial_put.constprop.0+0xf0>
 8002a72:	e0ef      	b.n	8002c54 <simpleserial_put.constprop.0+0x2d0>
 8002a74:	0049      	lsls	r1, r1, #1
 8002a76:	b2cb      	uxtb	r3, r1
 8002a78:	b249      	sxtb	r1, r1
 8002a7a:	2900      	cmp	r1, #0
 8002a7c:	da00      	bge.n	8002a80 <simpleserial_put.constprop.0+0xfc>
 8002a7e:	e0f1      	b.n	8002c64 <simpleserial_put.constprop.0+0x2e0>
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	b2d9      	uxtb	r1, r3
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da00      	bge.n	8002a8c <simpleserial_put.constprop.0+0x108>
 8002a8a:	e0f3      	b.n	8002c74 <simpleserial_put.constprop.0+0x2f0>
 8002a8c:	0049      	lsls	r1, r1, #1
 8002a8e:	b2cb      	uxtb	r3, r1
 8002a90:	b249      	sxtb	r1, r1
 8002a92:	2900      	cmp	r1, #0
 8002a94:	da00      	bge.n	8002a98 <simpleserial_put.constprop.0+0x114>
 8002a96:	e0f5      	b.n	8002c84 <simpleserial_put.constprop.0+0x300>
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	b2d9      	uxtb	r1, r3
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da00      	bge.n	8002aa4 <simpleserial_put.constprop.0+0x120>
 8002aa2:	e0f7      	b.n	8002c94 <simpleserial_put.constprop.0+0x310>
 8002aa4:	0049      	lsls	r1, r1, #1
 8002aa6:	b2cb      	uxtb	r3, r1
 8002aa8:	b249      	sxtb	r1, r1
 8002aaa:	2900      	cmp	r1, #0
 8002aac:	da00      	bge.n	8002ab0 <simpleserial_put.constprop.0+0x12c>
 8002aae:	e0f9      	b.n	8002ca4 <simpleserial_put.constprop.0+0x320>
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da00      	bge.n	8002abc <simpleserial_put.constprop.0+0x138>
 8002aba:	e0fb      	b.n	8002cb4 <simpleserial_put.constprop.0+0x330>
 8002abc:	0049      	lsls	r1, r1, #1
 8002abe:	b2cb      	uxtb	r3, r1
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8002ac0:	4669      	mov	r1, sp
 8002ac2:	710b      	strb	r3, [r1, #4]
	data_buf[i + 4] = 0x00;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	714b      	strb	r3, [r1, #5]
		if (buf[i] == FRAME_BYTE) {
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d101      	bne.n	8002ad0 <simpleserial_put.constprop.0+0x14c>
			buf[last] = i - last;
 8002acc:	3301      	adds	r3, #1
 8002ace:	700b      	strb	r3, [r1, #0]
		if (buf[i] == FRAME_BYTE) {
 8002ad0:	2a00      	cmp	r2, #0
 8002ad2:	d11a      	bne.n	8002b0a <simpleserial_put.constprop.0+0x186>
			buf[last] = i - last;
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	32ff      	adds	r2, #255	@ 0xff
 8002ada:	446a      	add	r2, sp
 8002adc:	3a01      	subs	r2, #1
 8002ade:	3aff      	subs	r2, #255	@ 0xff
 8002ae0:	1acb      	subs	r3, r1, r3
 8002ae2:	7013      	strb	r3, [r2, #0]
		if (buf[i] == FRAME_BYTE) {
 8002ae4:	466b      	mov	r3, sp
 8002ae6:	791a      	ldrb	r2, [r3, #4]
 8002ae8:	2303      	movs	r3, #3
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	d011      	beq.n	8002b12 <simpleserial_put.constprop.0+0x18e>
 8002aee:	466a      	mov	r2, sp
 8002af0:	7952      	ldrb	r2, [r2, #5]
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	d01a      	beq.n	8002b2c <simpleserial_put.constprop.0+0x1a8>
	for (; i < len; i++) {
 8002af6:	466c      	mov	r4, sp
 8002af8:	1da5      	adds	r5, r4, #6
	stuff_data(data_buf, i + 5);
	for (int i = 0; i < size + 5; i++) {
		putch(data_buf[i]);
 8002afa:	7820      	ldrb	r0, [r4, #0]
	for (int i = 0; i < size + 5; i++) {
 8002afc:	3401      	adds	r4, #1
		putch(data_buf[i]);
 8002afe:	f000 fbfd 	bl	80032fc <putch>
	for (int i = 0; i < size + 5; i++) {
 8002b02:	42a5      	cmp	r5, r4
 8002b04:	d1f9      	bne.n	8002afa <simpleserial_put.constprop.0+0x176>
	}
}
 8002b06:	b041      	add	sp, #260	@ 0x104
 8002b08:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8002b0a:	466a      	mov	r2, sp
 8002b0c:	7912      	ldrb	r2, [r2, #4]
 8002b0e:	2a00      	cmp	r2, #0
 8002b10:	d10c      	bne.n	8002b2c <simpleserial_put.constprop.0+0x1a8>
			buf[last] = i - last;
 8002b12:	2104      	movs	r1, #4
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	32ff      	adds	r2, #255	@ 0xff
 8002b18:	446a      	add	r2, sp
 8002b1a:	3a01      	subs	r2, #1
 8002b1c:	3aff      	subs	r2, #255	@ 0xff
 8002b1e:	1acb      	subs	r3, r1, r3
 8002b20:	7013      	strb	r3, [r2, #0]
		if (buf[i] == FRAME_BYTE) {
 8002b22:	466a      	mov	r2, sp
 8002b24:	7952      	ldrb	r2, [r2, #5]
			last = i;
 8002b26:	2304      	movs	r3, #4
		if (buf[i] == FRAME_BYTE) {
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d1e4      	bne.n	8002af6 <simpleserial_put.constprop.0+0x172>
			buf[last] = i - last;
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	32ff      	adds	r2, #255	@ 0xff
 8002b32:	446a      	add	r2, sp
 8002b34:	3a01      	subs	r2, #1
 8002b36:	3aff      	subs	r2, #255	@ 0xff
 8002b38:	1acb      	subs	r3, r1, r3
 8002b3a:	7013      	strb	r3, [r2, #0]
			last = i;
 8002b3c:	e7db      	b.n	8002af6 <simpleserial_put.constprop.0+0x172>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002b3e:	214d      	movs	r1, #77	@ 0x4d
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	404b      	eors	r3, r1
 8002b44:	b259      	sxtb	r1, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	db00      	blt.n	8002b4e <simpleserial_put.constprop.0+0x1ca>
 8002b4c:	e72f      	b.n	80029ae <simpleserial_put.constprop.0+0x2a>
 8002b4e:	234d      	movs	r3, #77	@ 0x4d
 8002b50:	0049      	lsls	r1, r1, #1
 8002b52:	4059      	eors	r1, r3
 8002b54:	b24b      	sxtb	r3, r1
 8002b56:	b2c9      	uxtb	r1, r1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db00      	blt.n	8002b5e <simpleserial_put.constprop.0+0x1da>
 8002b5c:	e72d      	b.n	80029ba <simpleserial_put.constprop.0+0x36>
 8002b5e:	214d      	movs	r1, #77	@ 0x4d
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	404b      	eors	r3, r1
 8002b64:	b259      	sxtb	r1, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2900      	cmp	r1, #0
 8002b6a:	db00      	blt.n	8002b6e <simpleserial_put.constprop.0+0x1ea>
 8002b6c:	e72b      	b.n	80029c6 <simpleserial_put.constprop.0+0x42>
 8002b6e:	234d      	movs	r3, #77	@ 0x4d
 8002b70:	0049      	lsls	r1, r1, #1
 8002b72:	4059      	eors	r1, r3
 8002b74:	b24b      	sxtb	r3, r1
 8002b76:	b2c9      	uxtb	r1, r1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db00      	blt.n	8002b7e <simpleserial_put.constprop.0+0x1fa>
 8002b7c:	e729      	b.n	80029d2 <simpleserial_put.constprop.0+0x4e>
 8002b7e:	214d      	movs	r1, #77	@ 0x4d
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	404b      	eors	r3, r1
 8002b84:	b259      	sxtb	r1, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	db00      	blt.n	8002b8e <simpleserial_put.constprop.0+0x20a>
 8002b8c:	e727      	b.n	80029de <simpleserial_put.constprop.0+0x5a>
 8002b8e:	234d      	movs	r3, #77	@ 0x4d
 8002b90:	004c      	lsls	r4, r1, #1
 8002b92:	405c      	eors	r4, r3
 8002b94:	b263      	sxtb	r3, r4
 8002b96:	b2e4      	uxtb	r4, r4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db00      	blt.n	8002b9e <simpleserial_put.constprop.0+0x21a>
 8002b9c:	e725      	b.n	80029ea <simpleserial_put.constprop.0+0x66>
 8002b9e:	214d      	movs	r1, #77	@ 0x4d
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4059      	eors	r1, r3
 8002ba4:	b24c      	sxtb	r4, r1
 8002ba6:	b2c9      	uxtb	r1, r1
 8002ba8:	2c00      	cmp	r4, #0
 8002baa:	db00      	blt.n	8002bae <simpleserial_put.constprop.0+0x22a>
 8002bac:	e723      	b.n	80029f6 <simpleserial_put.constprop.0+0x72>
 8002bae:	234d      	movs	r3, #77	@ 0x4d
 8002bb0:	0064      	lsls	r4, r4, #1
 8002bb2:	405c      	eors	r4, r3
		crc ^= *buf++;
 8002bb4:	2301      	movs	r3, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002bb6:	b2e1      	uxtb	r1, r4
		crc ^= *buf++;
 8002bb8:	4059      	eors	r1, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002bba:	b24b      	sxtb	r3, r1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db00      	blt.n	8002bc2 <simpleserial_put.constprop.0+0x23e>
 8002bc0:	e721      	b.n	8002a06 <simpleserial_put.constprop.0+0x82>
 8002bc2:	214d      	movs	r1, #77	@ 0x4d
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	404b      	eors	r3, r1
 8002bc8:	b259      	sxtb	r1, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	db00      	blt.n	8002bd2 <simpleserial_put.constprop.0+0x24e>
 8002bd0:	e71f      	b.n	8002a12 <simpleserial_put.constprop.0+0x8e>
 8002bd2:	234d      	movs	r3, #77	@ 0x4d
 8002bd4:	0049      	lsls	r1, r1, #1
 8002bd6:	4059      	eors	r1, r3
 8002bd8:	b24b      	sxtb	r3, r1
 8002bda:	b2c9      	uxtb	r1, r1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db00      	blt.n	8002be2 <simpleserial_put.constprop.0+0x25e>
 8002be0:	e71d      	b.n	8002a1e <simpleserial_put.constprop.0+0x9a>
 8002be2:	214d      	movs	r1, #77	@ 0x4d
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	404b      	eors	r3, r1
 8002be8:	b259      	sxtb	r1, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2900      	cmp	r1, #0
 8002bee:	db00      	blt.n	8002bf2 <simpleserial_put.constprop.0+0x26e>
 8002bf0:	e71b      	b.n	8002a2a <simpleserial_put.constprop.0+0xa6>
 8002bf2:	234d      	movs	r3, #77	@ 0x4d
 8002bf4:	0049      	lsls	r1, r1, #1
 8002bf6:	4059      	eors	r1, r3
 8002bf8:	b24b      	sxtb	r3, r1
 8002bfa:	b2c9      	uxtb	r1, r1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db00      	blt.n	8002c02 <simpleserial_put.constprop.0+0x27e>
 8002c00:	e719      	b.n	8002a36 <simpleserial_put.constprop.0+0xb2>
 8002c02:	214d      	movs	r1, #77	@ 0x4d
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	404b      	eors	r3, r1
 8002c08:	b259      	sxtb	r1, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2900      	cmp	r1, #0
 8002c0e:	db00      	blt.n	8002c12 <simpleserial_put.constprop.0+0x28e>
 8002c10:	e717      	b.n	8002a42 <simpleserial_put.constprop.0+0xbe>
 8002c12:	234d      	movs	r3, #77	@ 0x4d
 8002c14:	0049      	lsls	r1, r1, #1
 8002c16:	4059      	eors	r1, r3
 8002c18:	b24b      	sxtb	r3, r1
 8002c1a:	b2c9      	uxtb	r1, r1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db00      	blt.n	8002c22 <simpleserial_put.constprop.0+0x29e>
 8002c20:	e715      	b.n	8002a4e <simpleserial_put.constprop.0+0xca>
 8002c22:	214d      	movs	r1, #77	@ 0x4d
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	404b      	eors	r3, r1
 8002c28:	b259      	sxtb	r1, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	db00      	blt.n	8002c32 <simpleserial_put.constprop.0+0x2ae>
 8002c30:	e713      	b.n	8002a5a <simpleserial_put.constprop.0+0xd6>
 8002c32:	234d      	movs	r3, #77	@ 0x4d
 8002c34:	0049      	lsls	r1, r1, #1
 8002c36:	404b      	eors	r3, r1
 8002c38:	b2db      	uxtb	r3, r3
		crc ^= *buf++;
 8002c3a:	4053      	eors	r3, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002c3c:	b259      	sxtb	r1, r3
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	db00      	blt.n	8002c44 <simpleserial_put.constprop.0+0x2c0>
 8002c42:	e711      	b.n	8002a68 <simpleserial_put.constprop.0+0xe4>
 8002c44:	234d      	movs	r3, #77	@ 0x4d
 8002c46:	0049      	lsls	r1, r1, #1
 8002c48:	4059      	eors	r1, r3
 8002c4a:	b24b      	sxtb	r3, r1
 8002c4c:	b2c9      	uxtb	r1, r1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db00      	blt.n	8002c54 <simpleserial_put.constprop.0+0x2d0>
 8002c52:	e70f      	b.n	8002a74 <simpleserial_put.constprop.0+0xf0>
 8002c54:	214d      	movs	r1, #77	@ 0x4d
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	404b      	eors	r3, r1
 8002c5a:	b259      	sxtb	r1, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2900      	cmp	r1, #0
 8002c60:	db00      	blt.n	8002c64 <simpleserial_put.constprop.0+0x2e0>
 8002c62:	e70d      	b.n	8002a80 <simpleserial_put.constprop.0+0xfc>
 8002c64:	234d      	movs	r3, #77	@ 0x4d
 8002c66:	0049      	lsls	r1, r1, #1
 8002c68:	4059      	eors	r1, r3
 8002c6a:	b24b      	sxtb	r3, r1
 8002c6c:	b2c9      	uxtb	r1, r1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db00      	blt.n	8002c74 <simpleserial_put.constprop.0+0x2f0>
 8002c72:	e70b      	b.n	8002a8c <simpleserial_put.constprop.0+0x108>
 8002c74:	214d      	movs	r1, #77	@ 0x4d
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	404b      	eors	r3, r1
 8002c7a:	b259      	sxtb	r1, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	db00      	blt.n	8002c84 <simpleserial_put.constprop.0+0x300>
 8002c82:	e709      	b.n	8002a98 <simpleserial_put.constprop.0+0x114>
 8002c84:	234d      	movs	r3, #77	@ 0x4d
 8002c86:	0049      	lsls	r1, r1, #1
 8002c88:	4059      	eors	r1, r3
 8002c8a:	b24b      	sxtb	r3, r1
 8002c8c:	b2c9      	uxtb	r1, r1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db00      	blt.n	8002c94 <simpleserial_put.constprop.0+0x310>
 8002c92:	e707      	b.n	8002aa4 <simpleserial_put.constprop.0+0x120>
 8002c94:	214d      	movs	r1, #77	@ 0x4d
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	404b      	eors	r3, r1
 8002c9a:	b259      	sxtb	r1, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	db00      	blt.n	8002ca4 <simpleserial_put.constprop.0+0x320>
 8002ca2:	e705      	b.n	8002ab0 <simpleserial_put.constprop.0+0x12c>
 8002ca4:	234d      	movs	r3, #77	@ 0x4d
 8002ca6:	0049      	lsls	r1, r1, #1
 8002ca8:	4059      	eors	r1, r3
 8002caa:	b24b      	sxtb	r3, r1
 8002cac:	b2c9      	uxtb	r1, r1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db00      	blt.n	8002cb4 <simpleserial_put.constprop.0+0x330>
 8002cb2:	e703      	b.n	8002abc <simpleserial_put.constprop.0+0x138>
 8002cb4:	214d      	movs	r1, #77	@ 0x4d
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	404b      	eors	r3, r1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e700      	b.n	8002ac0 <simpleserial_put.constprop.0+0x13c>
 8002cbe:	46c0      	nop			@ (mov r8, r8)

08002cc0 <check_version>:
{
 8002cc0:	b500      	push	{lr}
 8002cc2:	b083      	sub	sp, #12
	uint8_t ver = SS_VER;
 8002cc4:	466b      	mov	r3, sp
 8002cc6:	1dd9      	adds	r1, r3, #7
 8002cc8:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8002cca:	2072      	movs	r0, #114	@ 0x72
	uint8_t ver = SS_VER;
 8002ccc:	700b      	strb	r3, [r1, #0]
	simpleserial_put('r', 1, &ver);
 8002cce:	f7ff fe59 	bl	8002984 <simpleserial_put.constprop.0>
}
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	b003      	add	sp, #12
 8002cd6:	bd00      	pop	{pc}

08002cd8 <simpleserial_init>:
{
 8002cd8:	b510      	push	{r4, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8002cda:	4c15      	ldr	r4, [pc, #84]	@ (8002d30 <simpleserial_init+0x58>)
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	dc1c      	bgt.n	8002d1c <simpleserial_init+0x44>
	commands[num_commands].c   = c;
 8002ce2:	2076      	movs	r0, #118	@ 0x76
 8002ce4:	0059      	lsls	r1, r3, #1
 8002ce6:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <simpleserial_init+0x5c>)
 8002ce8:	18c9      	adds	r1, r1, r3
 8002cea:	0089      	lsls	r1, r1, #2
 8002cec:	5488      	strb	r0, [r1, r2]
	commands[num_commands].len = len;
 8002cee:	1852      	adds	r2, r2, r1
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	6051      	str	r1, [r2, #4]
	commands[num_commands].fp  = fp;
 8002cf4:	4910      	ldr	r1, [pc, #64]	@ (8002d38 <simpleserial_init+0x60>)
	num_commands++;
 8002cf6:	3301      	adds	r3, #1
	commands[num_commands].fp  = fp;
 8002cf8:	6091      	str	r1, [r2, #8]
	num_commands++;
 8002cfa:	6023      	str	r3, [r4, #0]
	if(num_commands >= MAX_SS_CMDS) {
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	dc13      	bgt.n	8002d28 <simpleserial_init+0x50>
	commands[num_commands].c   = c;
 8002d00:	2077      	movs	r0, #119	@ 0x77
 8002d02:	0059      	lsls	r1, r3, #1
 8002d04:	4a0b      	ldr	r2, [pc, #44]	@ (8002d34 <simpleserial_init+0x5c>)
 8002d06:	18c9      	adds	r1, r1, r3
 8002d08:	0089      	lsls	r1, r1, #2
 8002d0a:	5488      	strb	r0, [r1, r2]
	commands[num_commands].len = len;
 8002d0c:	1852      	adds	r2, r2, r1
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6051      	str	r1, [r2, #4]
	commands[num_commands].fp  = fp;
 8002d12:	490a      	ldr	r1, [pc, #40]	@ (8002d3c <simpleserial_init+0x64>)
	num_commands++;
 8002d14:	3301      	adds	r3, #1
	commands[num_commands].fp  = fp;
 8002d16:	6091      	str	r1, [r2, #8]
	num_commands++;
 8002d18:	6023      	str	r3, [r4, #0]
}
 8002d1a:	bd10      	pop	{r4, pc}
		putch('a');
 8002d1c:	2061      	movs	r0, #97	@ 0x61
 8002d1e:	f000 faed 	bl	80032fc <putch>
	if(num_commands >= MAX_SS_CMDS) {
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	ddeb      	ble.n	8002d00 <simpleserial_init+0x28>
		putch('a');
 8002d28:	2061      	movs	r0, #97	@ 0x61
 8002d2a:	f000 fae7 	bl	80032fc <putch>
		return 1;
 8002d2e:	e7f4      	b.n	8002d1a <simpleserial_init+0x42>
 8002d30:	20000190 	.word	0x20000190
 8002d34:	20000194 	.word	0x20000194
 8002d38:	08002cc1 	.word	0x08002cc1
 8002d3c:	08003101 	.word	0x08003101

08002d40 <simpleserial_addcmd>:
{
 8002d40:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8002d42:	4e0e      	ldr	r6, [pc, #56]	@ (8002d7c <simpleserial_addcmd+0x3c>)
 8002d44:	6833      	ldr	r3, [r6, #0]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	dc0d      	bgt.n	8002d66 <simpleserial_addcmd+0x26>
	if(len >= MAX_SS_LEN) {
 8002d4a:	29ff      	cmp	r1, #255	@ 0xff
 8002d4c:	d810      	bhi.n	8002d70 <simpleserial_addcmd+0x30>
	commands[num_commands].c   = c;
 8002d4e:	005d      	lsls	r5, r3, #1
 8002d50:	4c0b      	ldr	r4, [pc, #44]	@ (8002d80 <simpleserial_addcmd+0x40>)
 8002d52:	18ed      	adds	r5, r5, r3
 8002d54:	00ad      	lsls	r5, r5, #2
 8002d56:	5528      	strb	r0, [r5, r4]
	return 0;
 8002d58:	2000      	movs	r0, #0
	commands[num_commands].len = len;
 8002d5a:	1964      	adds	r4, r4, r5
	num_commands++;
 8002d5c:	3301      	adds	r3, #1
	commands[num_commands].len = len;
 8002d5e:	6061      	str	r1, [r4, #4]
	commands[num_commands].fp  = fp;
 8002d60:	60a2      	str	r2, [r4, #8]
	num_commands++;
 8002d62:	6033      	str	r3, [r6, #0]
}
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
		putch('a');
 8002d66:	2061      	movs	r0, #97	@ 0x61
 8002d68:	f000 fac8 	bl	80032fc <putch>
		return 1;
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	e7f9      	b.n	8002d64 <simpleserial_addcmd+0x24>
		putch('b');
 8002d70:	2062      	movs	r0, #98	@ 0x62
 8002d72:	f000 fac3 	bl	80032fc <putch>
		return 1;
 8002d76:	2001      	movs	r0, #1
 8002d78:	e7f4      	b.n	8002d64 <simpleserial_addcmd+0x24>
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	20000190 	.word	0x20000190
 8002d80:	20000194 	.word	0x20000194

08002d84 <simpleserial_get>:
{
 8002d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d86:	46de      	mov	lr, fp
 8002d88:	4645      	mov	r5, r8
 8002d8a:	4657      	mov	r7, sl
 8002d8c:	464e      	mov	r6, r9
 8002d8e:	b5e0      	push	{r5, r6, r7, lr}
 8002d90:	b0c3      	sub	sp, #268	@ 0x10c
	uint8_t err = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	466a      	mov	r2, sp
 8002d96:	ad02      	add	r5, sp, #8
 8002d98:	71d3      	strb	r3, [r2, #7]
	for (int i = 0; i < 4; i++) {
 8002d9a:	ab03      	add	r3, sp, #12
 8002d9c:	002c      	movs	r4, r5
 8002d9e:	469b      	mov	fp, r3
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8002da0:	f000 fa92 	bl	80032c8 <getch>
 8002da4:	7020      	strb	r0, [r4, #0]
		if (data_buf[i] == FRAME_BYTE) {
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d051      	beq.n	8002e4e <simpleserial_get+0xca>
	for (int i = 0; i < 4; i++) {
 8002daa:	3401      	adds	r4, #1
 8002dac:	45a3      	cmp	fp, r4
 8002dae:	d1f7      	bne.n	8002da0 <simpleserial_get+0x1c>
	buf[0] = 0x00;
 8002db0:	2300      	movs	r3, #0
	uint8_t next = buf[0];
 8002db2:	782c      	ldrb	r4, [r5, #0]
	buf[0] = 0x00;
 8002db4:	702b      	strb	r3, [r5, #0]
	while ((next < len) && tmp != 0) {
 8002db6:	2c03      	cmp	r4, #3
 8002db8:	d80c      	bhi.n	8002dd4 <simpleserial_get+0x50>
 8002dba:	2c00      	cmp	r4, #0
 8002dbc:	d00a      	beq.n	8002dd4 <simpleserial_get+0x50>
		buf[next] = FRAME_BYTE;
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	e001      	b.n	8002dc6 <simpleserial_get+0x42>
	while ((next < len) && tmp != 0) {
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <simpleserial_get+0x50>
		tmp = buf[next];
 8002dc6:	5d2b      	ldrb	r3, [r5, r4]
 8002dc8:	192a      	adds	r2, r5, r4
		next += tmp;
 8002dca:	191c      	adds	r4, r3, r4
 8002dcc:	b2e4      	uxtb	r4, r4
		buf[next] = FRAME_BYTE;
 8002dce:	7011      	strb	r1, [r2, #0]
	while ((next < len) && tmp != 0) {
 8002dd0:	2c03      	cmp	r4, #3
 8002dd2:	d9f6      	bls.n	8002dc2 <simpleserial_get+0x3e>
	for(c = 0; c < num_commands; c++)
 8002dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f94 <simpleserial_get+0x210>)
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	dc00      	bgt.n	8002dde <simpleserial_get+0x5a>
 8002ddc:	e0d7      	b.n	8002f8e <simpleserial_get+0x20a>
		if(commands[c].c == data_buf[1])
 8002dde:	2200      	movs	r2, #0
	for(c = 0; c < num_commands; c++)
 8002de0:	2700      	movs	r7, #0
		if(commands[c].c == data_buf[1])
 8002de2:	786e      	ldrb	r6, [r5, #1]
 8002de4:	486c      	ldr	r0, [pc, #432]	@ (8002f98 <simpleserial_get+0x214>)
 8002de6:	e004      	b.n	8002df2 <simpleserial_get+0x6e>
	for(c = 0; c < num_commands; c++)
 8002de8:	3201      	adds	r2, #1
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	0017      	movs	r7, r2
 8002dee:	428a      	cmp	r2, r1
 8002df0:	da05      	bge.n	8002dfe <simpleserial_get+0x7a>
		if(commands[c].c == data_buf[1])
 8002df2:	007b      	lsls	r3, r7, #1
 8002df4:	19db      	adds	r3, r3, r7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	5cc3      	ldrb	r3, [r0, r3]
 8002dfa:	42b3      	cmp	r3, r6
 8002dfc:	d1f4      	bne.n	8002de8 <simpleserial_get+0x64>
	if (c == num_commands) {
 8002dfe:	428f      	cmp	r7, r1
 8002e00:	d100      	bne.n	8002e04 <simpleserial_get+0x80>
 8002e02:	e0c2      	b.n	8002f8a <simpleserial_get+0x206>
	int i = 4;
 8002e04:	2204      	movs	r2, #4
	if ((data_buf[3] + 5) < next_frame) {
 8002e06:	78eb      	ldrb	r3, [r5, #3]
 8002e08:	46d9      	mov	r9, fp
 8002e0a:	3305      	adds	r3, #5
	int i = 4;
 8002e0c:	4690      	mov	r8, r2
	if ((data_buf[3] + 5) < next_frame) {
 8002e0e:	42a3      	cmp	r3, r4
 8002e10:	da17      	bge.n	8002e42 <simpleserial_get+0xbe>
		goto ERROR;
 8002e12:	2304      	movs	r3, #4
			err = SS_ERR_FRAME_BYTE;
 8002e14:	466a      	mov	r2, sp
	simpleserial_put('e', 0x01, &err);
 8002e16:	2065      	movs	r0, #101	@ 0x65
 8002e18:	1dd1      	adds	r1, r2, #7
			err = SS_ERR_FRAME_BYTE;
 8002e1a:	71d3      	strb	r3, [r2, #7]
	simpleserial_put('e', 0x01, &err);
 8002e1c:	f7ff fdb2 	bl	8002984 <simpleserial_put.constprop.0>
}
 8002e20:	b043      	add	sp, #268	@ 0x10c
 8002e22:	bcf0      	pop	{r4, r5, r6, r7}
 8002e24:	46bb      	mov	fp, r7
 8002e26:	46b2      	mov	sl, r6
 8002e28:	46a9      	mov	r9, r5
 8002e2a:	46a0      	mov	r8, r4
 8002e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (; i < data_buf[3] + 5; i++) {
 8002e2e:	4643      	mov	r3, r8
 8002e30:	1c5e      	adds	r6, r3, #1
 8002e32:	2301      	movs	r3, #1
 8002e34:	469c      	mov	ip, r3
 8002e36:	78eb      	ldrb	r3, [r5, #3]
 8002e38:	44e1      	add	r9, ip
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	42b3      	cmp	r3, r6
 8002e3e:	db08      	blt.n	8002e52 <simpleserial_get+0xce>
 8002e40:	46b0      	mov	r8, r6
		data_buf[i] = getch();
 8002e42:	f000 fa41 	bl	80032c8 <getch>
 8002e46:	464b      	mov	r3, r9
 8002e48:	7018      	strb	r0, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d1ef      	bne.n	8002e2e <simpleserial_get+0xaa>
			goto ERROR;
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e7e0      	b.n	8002e14 <simpleserial_get+0x90>
	data_buf[i] = getch();
 8002e52:	f000 fa39 	bl	80032c8 <getch>
 8002e56:	55a8      	strb	r0, [r5, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d1da      	bne.n	8002e12 <simpleserial_get+0x8e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8002e5c:	192b      	adds	r3, r5, r4
 8002e5e:	469c      	mov	ip, r3
 8002e60:	b2f2      	uxtb	r2, r6
 8002e62:	1b13      	subs	r3, r2, r4
 8002e64:	3301      	adds	r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4699      	mov	r9, r3
	buf[0] = 0x00;
 8002e6a:	4661      	mov	r1, ip
	uint8_t next = buf[0];
 8002e6c:	5d2b      	ldrb	r3, [r5, r4]
	while (len--) {
 8002e6e:	3a03      	subs	r2, #3
	buf[0] = 0x00;
 8002e70:	7008      	strb	r0, [r1, #0]
	while (len--) {
 8002e72:	b2d2      	uxtb	r2, r2
	while ((next < len) && tmp != 0) {
 8002e74:	4599      	cmp	r9, r3
 8002e76:	d90f      	bls.n	8002e98 <simpleserial_get+0x114>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <simpleserial_get+0x114>
		buf[next] = FRAME_BYTE;
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	468a      	mov	sl, r1
 8002e80:	e001      	b.n	8002e86 <simpleserial_get+0x102>
	while ((next < len) && tmp != 0) {
 8002e82:	2900      	cmp	r1, #0
 8002e84:	d008      	beq.n	8002e98 <simpleserial_get+0x114>
		tmp = buf[next];
 8002e86:	4661      	mov	r1, ip
		buf[next] = FRAME_BYTE;
 8002e88:	4656      	mov	r6, sl
		tmp = buf[next];
 8002e8a:	18cc      	adds	r4, r1, r3
 8002e8c:	5cc9      	ldrb	r1, [r1, r3]
		buf[next] = FRAME_BYTE;
 8002e8e:	7026      	strb	r6, [r4, #0]
		next += tmp;
 8002e90:	18cb      	adds	r3, r1, r3
 8002e92:	b2db      	uxtb	r3, r3
	while ((next < len) && tmp != 0) {
 8002e94:	4599      	cmp	r9, r3
 8002e96:	d8f4      	bhi.n	8002e82 <simpleserial_get+0xfe>
 8002e98:	2409      	movs	r4, #9
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002e9a:	214d      	movs	r1, #77	@ 0x4d
 8002e9c:	446c      	add	r4, sp
 8002e9e:	e029      	b.n	8002ef4 <simpleserial_get+0x170>
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	b2d8      	uxtb	r0, r3
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db30      	blt.n	8002f0c <simpleserial_get+0x188>
 8002eaa:	0040      	lsls	r0, r0, #1
 8002eac:	b2c3      	uxtb	r3, r0
 8002eae:	b240      	sxtb	r0, r0
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	db31      	blt.n	8002f18 <simpleserial_get+0x194>
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	b2d8      	uxtb	r0, r3
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	db32      	blt.n	8002f24 <simpleserial_get+0x1a0>
 8002ebe:	0040      	lsls	r0, r0, #1
 8002ec0:	b2c3      	uxtb	r3, r0
 8002ec2:	b240      	sxtb	r0, r0
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	db33      	blt.n	8002f30 <simpleserial_get+0x1ac>
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	b2d8      	uxtb	r0, r3
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db34      	blt.n	8002f3c <simpleserial_get+0x1b8>
 8002ed2:	0040      	lsls	r0, r0, #1
 8002ed4:	b2c3      	uxtb	r3, r0
 8002ed6:	b240      	sxtb	r0, r0
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	db35      	blt.n	8002f48 <simpleserial_get+0x1c4>
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b2d8      	uxtb	r0, r3
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db36      	blt.n	8002f54 <simpleserial_get+0x1d0>
	while (len--) {
 8002ee6:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002ee8:	0040      	lsls	r0, r0, #1
	while (len--) {
 8002eea:	b2d2      	uxtb	r2, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002eec:	b2c0      	uxtb	r0, r0
	while (len--) {
 8002eee:	3401      	adds	r4, #1
 8002ef0:	2aff      	cmp	r2, #255	@ 0xff
 8002ef2:	d037      	beq.n	8002f64 <simpleserial_get+0x1e0>
		crc ^= *buf++;
 8002ef4:	7826      	ldrb	r6, [r4, #0]
 8002ef6:	4046      	eors	r6, r0
 8002ef8:	b2f3      	uxtb	r3, r6
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002efa:	b270      	sxtb	r0, r6
 8002efc:	0636      	lsls	r6, r6, #24
 8002efe:	d5cf      	bpl.n	8002ea0 <simpleserial_get+0x11c>
 8002f00:	0040      	lsls	r0, r0, #1
 8002f02:	4048      	eors	r0, r1
 8002f04:	b243      	sxtb	r3, r0
 8002f06:	b2c0      	uxtb	r0, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	dace      	bge.n	8002eaa <simpleserial_get+0x126>
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	404b      	eors	r3, r1
 8002f10:	b258      	sxtb	r0, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2800      	cmp	r0, #0
 8002f16:	dacd      	bge.n	8002eb4 <simpleserial_get+0x130>
 8002f18:	0040      	lsls	r0, r0, #1
 8002f1a:	4048      	eors	r0, r1
 8002f1c:	b243      	sxtb	r3, r0
 8002f1e:	b2c0      	uxtb	r0, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	dacc      	bge.n	8002ebe <simpleserial_get+0x13a>
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	404b      	eors	r3, r1
 8002f28:	b258      	sxtb	r0, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	dacb      	bge.n	8002ec8 <simpleserial_get+0x144>
 8002f30:	0040      	lsls	r0, r0, #1
 8002f32:	4048      	eors	r0, r1
 8002f34:	b243      	sxtb	r3, r0
 8002f36:	b2c0      	uxtb	r0, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	daca      	bge.n	8002ed2 <simpleserial_get+0x14e>
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	404b      	eors	r3, r1
 8002f40:	b258      	sxtb	r0, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2800      	cmp	r0, #0
 8002f46:	dac9      	bge.n	8002edc <simpleserial_get+0x158>
 8002f48:	0040      	lsls	r0, r0, #1
 8002f4a:	4048      	eors	r0, r1
 8002f4c:	b243      	sxtb	r3, r0
 8002f4e:	b2c0      	uxtb	r0, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dac8      	bge.n	8002ee6 <simpleserial_get+0x162>
 8002f54:	005b      	lsls	r3, r3, #1
	while (len--) {
 8002f56:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002f58:	404b      	eors	r3, r1
	while (len--) {
 8002f5a:	b2d2      	uxtb	r2, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002f5c:	b2d8      	uxtb	r0, r3
	while (len--) {
 8002f5e:	3401      	adds	r4, #1
 8002f60:	2aff      	cmp	r2, #255	@ 0xff
 8002f62:	d1c7      	bne.n	8002ef4 <simpleserial_get+0x170>
	if (crc != data_buf[i-1]) {
 8002f64:	4643      	mov	r3, r8
 8002f66:	5cea      	ldrb	r2, [r5, r3]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	4282      	cmp	r2, r0
 8002f6c:	d000      	beq.n	8002f70 <simpleserial_get+0x1ec>
 8002f6e:	e751      	b.n	8002e14 <simpleserial_get+0x90>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8002f70:	007c      	lsls	r4, r7, #1
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <simpleserial_get+0x214>)
 8002f74:	19e4      	adds	r4, r4, r7
 8002f76:	00a4      	lsls	r4, r4, #2
 8002f78:	191b      	adds	r3, r3, r4
 8002f7a:	689c      	ldr	r4, [r3, #8]
 8002f7c:	78ea      	ldrb	r2, [r5, #3]
 8002f7e:	465b      	mov	r3, fp
 8002f80:	78a9      	ldrb	r1, [r5, #2]
 8002f82:	7868      	ldrb	r0, [r5, #1]
 8002f84:	47a0      	blx	r4
 8002f86:	0003      	movs	r3, r0
 8002f88:	e744      	b.n	8002e14 <simpleserial_get+0x90>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e742      	b.n	8002e14 <simpleserial_get+0x90>
	for(c = 0; c < num_commands; c++)
 8002f8e:	2700      	movs	r7, #0
 8002f90:	e735      	b.n	8002dfe <simpleserial_get+0x7a>
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	20000190 	.word	0x20000190
 8002f98:	20000194 	.word	0x20000194

08002f9c <simpleserial_put>:
{
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9e:	46c6      	mov	lr, r8
 8002fa0:	b500      	push	{lr}
 8002fa2:	b0c0      	sub	sp, #256	@ 0x100
 8002fa4:	000e      	movs	r6, r1
	data_buf[0] = 0x00;
 8002fa6:	2300      	movs	r3, #0
{
 8002fa8:	0011      	movs	r1, r2
	data_buf[0] = 0x00;
 8002faa:	466a      	mov	r2, sp
 8002fac:	7013      	strb	r3, [r2, #0]
	data_buf[1] = c;
 8002fae:	7050      	strb	r0, [r2, #1]
 8002fb0:	466b      	mov	r3, sp
	data_buf[2] = size;
 8002fb2:	7096      	strb	r6, [r2, #2]
	for (; i < size; i++) {
 8002fb4:	2e00      	cmp	r6, #0
 8002fb6:	d100      	bne.n	8002fba <simpleserial_put+0x1e>
 8002fb8:	e099      	b.n	80030ee <simpleserial_put+0x152>
		data_buf[i + 3] = output[i];
 8002fba:	0032      	movs	r2, r6
 8002fbc:	1cd8      	adds	r0, r3, #3
 8002fbe:	f7fd fb23 	bl	8000608 <memcpy>
	data_buf[i + 4] = 0x00;
 8002fc2:	1d34      	adds	r4, r6, #4
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8002fc4:	1cf3      	adds	r3, r6, #3
 8002fc6:	469c      	mov	ip, r3
	data_buf[i + 4] = 0x00;
 8002fc8:	46a0      	mov	r8, r4
	while (len--) {
 8002fca:	1c70      	adds	r0, r6, #1
	stuff_data(data_buf, i + 5);
 8002fcc:	3605      	adds	r6, #5
	while (len--) {
 8002fce:	b2c0      	uxtb	r0, r0
	stuff_data(data_buf, i + 5);
 8002fd0:	b2f6      	uxtb	r6, r6
 8002fd2:	466b      	mov	r3, sp
 8002fd4:	1c59      	adds	r1, r3, #1
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8002fd6:	000d      	movs	r5, r1
	uint8_t crc = 0x00;
 8002fd8:	2300      	movs	r3, #0
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002fda:	224d      	movs	r2, #77	@ 0x4d
 8002fdc:	e029      	b.n	8003032 <simpleserial_put+0x96>
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	b2df      	uxtb	r7, r3
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	db2f      	blt.n	8003048 <simpleserial_put+0xac>
 8002fe8:	007f      	lsls	r7, r7, #1
 8002fea:	b2fb      	uxtb	r3, r7
 8002fec:	b27f      	sxtb	r7, r7
 8002fee:	2f00      	cmp	r7, #0
 8002ff0:	db30      	blt.n	8003054 <simpleserial_put+0xb8>
 8002ff2:	005f      	lsls	r7, r3, #1
 8002ff4:	b2fb      	uxtb	r3, r7
 8002ff6:	b27f      	sxtb	r7, r7
 8002ff8:	2f00      	cmp	r7, #0
 8002ffa:	db31      	blt.n	8003060 <simpleserial_put+0xc4>
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	b2df      	uxtb	r7, r3
 8003000:	b25b      	sxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	db32      	blt.n	800306c <simpleserial_put+0xd0>
 8003006:	007f      	lsls	r7, r7, #1
 8003008:	b2fb      	uxtb	r3, r7
 800300a:	b27f      	sxtb	r7, r7
 800300c:	2f00      	cmp	r7, #0
 800300e:	db33      	blt.n	8003078 <simpleserial_put+0xdc>
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	b2df      	uxtb	r7, r3
 8003014:	b25b      	sxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	db34      	blt.n	8003084 <simpleserial_put+0xe8>
 800301a:	007f      	lsls	r7, r7, #1
 800301c:	b2fb      	uxtb	r3, r7
 800301e:	b27f      	sxtb	r7, r7
 8003020:	2f00      	cmp	r7, #0
 8003022:	db35      	blt.n	8003090 <simpleserial_put+0xf4>
	while (len--) {
 8003024:	3801      	subs	r0, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003026:	005b      	lsls	r3, r3, #1
	while (len--) {
 8003028:	b2c0      	uxtb	r0, r0
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800302a:	b2db      	uxtb	r3, r3
	while (len--) {
 800302c:	3501      	adds	r5, #1
 800302e:	28ff      	cmp	r0, #255	@ 0xff
 8003030:	d036      	beq.n	80030a0 <simpleserial_put+0x104>
		crc ^= *buf++;
 8003032:	782f      	ldrb	r7, [r5, #0]
 8003034:	407b      	eors	r3, r7
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003036:	b25f      	sxtb	r7, r3
 8003038:	2f00      	cmp	r7, #0
 800303a:	dad0      	bge.n	8002fde <simpleserial_put+0x42>
 800303c:	007f      	lsls	r7, r7, #1
 800303e:	4057      	eors	r7, r2
 8003040:	b27b      	sxtb	r3, r7
 8003042:	b2ff      	uxtb	r7, r7
 8003044:	2b00      	cmp	r3, #0
 8003046:	dacf      	bge.n	8002fe8 <simpleserial_put+0x4c>
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4053      	eors	r3, r2
 800304c:	b25f      	sxtb	r7, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2f00      	cmp	r7, #0
 8003052:	dace      	bge.n	8002ff2 <simpleserial_put+0x56>
 8003054:	007b      	lsls	r3, r7, #1
 8003056:	4053      	eors	r3, r2
 8003058:	b25f      	sxtb	r7, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2f00      	cmp	r7, #0
 800305e:	dacd      	bge.n	8002ffc <simpleserial_put+0x60>
 8003060:	007f      	lsls	r7, r7, #1
 8003062:	4057      	eors	r7, r2
 8003064:	b27b      	sxtb	r3, r7
 8003066:	b2ff      	uxtb	r7, r7
 8003068:	2b00      	cmp	r3, #0
 800306a:	dacc      	bge.n	8003006 <simpleserial_put+0x6a>
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4053      	eors	r3, r2
 8003070:	b25f      	sxtb	r7, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2f00      	cmp	r7, #0
 8003076:	dacb      	bge.n	8003010 <simpleserial_put+0x74>
 8003078:	007f      	lsls	r7, r7, #1
 800307a:	4057      	eors	r7, r2
 800307c:	b27b      	sxtb	r3, r7
 800307e:	b2ff      	uxtb	r7, r7
 8003080:	2b00      	cmp	r3, #0
 8003082:	daca      	bge.n	800301a <simpleserial_put+0x7e>
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4053      	eors	r3, r2
 8003088:	b25f      	sxtb	r7, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2f00      	cmp	r7, #0
 800308e:	dac9      	bge.n	8003024 <simpleserial_put+0x88>
 8003090:	007b      	lsls	r3, r7, #1
	while (len--) {
 8003092:	3801      	subs	r0, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003094:	4053      	eors	r3, r2
	while (len--) {
 8003096:	b2c0      	uxtb	r0, r0
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003098:	b2db      	uxtb	r3, r3
	while (len--) {
 800309a:	3501      	adds	r5, #1
 800309c:	28ff      	cmp	r0, #255	@ 0xff
 800309e:	d1c8      	bne.n	8003032 <simpleserial_put+0x96>
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80030a0:	466a      	mov	r2, sp
 80030a2:	4660      	mov	r0, ip
 80030a4:	5413      	strb	r3, [r2, r0]
	data_buf[i + 4] = 0x00;
 80030a6:	2300      	movs	r3, #0
 80030a8:	4640      	mov	r0, r8
 80030aa:	5413      	strb	r3, [r2, r0]
	for (; i < len; i++) {
 80030ac:	2e01      	cmp	r6, #1
 80030ae:	d911      	bls.n	80030d4 <simpleserial_put+0x138>
	uint8_t last = 0;
 80030b0:	2200      	movs	r2, #0
	uint8_t i = 1;
 80030b2:	3301      	adds	r3, #1
		if (buf[i] == FRAME_BYTE) {
 80030b4:	7808      	ldrb	r0, [r1, #0]
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d107      	bne.n	80030ca <simpleserial_put+0x12e>
			buf[last] = i - last;
 80030ba:	1c50      	adds	r0, r2, #1
 80030bc:	30ff      	adds	r0, #255	@ 0xff
 80030be:	4468      	add	r0, sp
 80030c0:	3801      	subs	r0, #1
 80030c2:	1a9a      	subs	r2, r3, r2
 80030c4:	38ff      	subs	r0, #255	@ 0xff
 80030c6:	7002      	strb	r2, [r0, #0]
			last = i;
 80030c8:	001a      	movs	r2, r3
	for (; i < len; i++) {
 80030ca:	3301      	adds	r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3101      	adds	r1, #1
 80030d0:	429e      	cmp	r6, r3
 80030d2:	d1ef      	bne.n	80030b4 <simpleserial_put+0x118>
 80030d4:	466d      	mov	r5, sp
	for (int i = 0; i < size + 5; i++) {
 80030d6:	2600      	movs	r6, #0
		putch(data_buf[i]);
 80030d8:	7828      	ldrb	r0, [r5, #0]
	for (int i = 0; i < size + 5; i++) {
 80030da:	3601      	adds	r6, #1
		putch(data_buf[i]);
 80030dc:	f000 f90e 	bl	80032fc <putch>
	for (int i = 0; i < size + 5; i++) {
 80030e0:	3501      	adds	r5, #1
 80030e2:	42a6      	cmp	r6, r4
 80030e4:	ddf8      	ble.n	80030d8 <simpleserial_put+0x13c>
}
 80030e6:	b040      	add	sp, #256	@ 0x100
 80030e8:	bc80      	pop	{r7}
 80030ea:	46b8      	mov	r8, r7
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (; i < size; i++) {
 80030ee:	2304      	movs	r3, #4
 80030f0:	4698      	mov	r8, r3
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80030f2:	3b01      	subs	r3, #1
	for (; i < size; i++) {
 80030f4:	2605      	movs	r6, #5
	while (len--) {
 80030f6:	2001      	movs	r0, #1
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80030f8:	469c      	mov	ip, r3
 80030fa:	2404      	movs	r4, #4
 80030fc:	e769      	b.n	8002fd2 <simpleserial_put+0x36>
 80030fe:	46c0      	nop			@ (mov r8, r8)

08003100 <ss_get_commands>:
{
 8003100:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003102:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <ss_get_commands+0x3c>)
{
 8003104:	b084      	sub	sp, #16
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003106:	781d      	ldrb	r5, [r3, #0]
 8003108:	466a      	mov	r2, sp
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	2d00      	cmp	r5, #0
 800310e:	d00d      	beq.n	800312c <ss_get_commands+0x2c>
 8003110:	2300      	movs	r3, #0
 8003112:	2400      	movs	r4, #0
 8003114:	466a      	mov	r2, sp
 8003116:	4e0a      	ldr	r6, [pc, #40]	@ (8003140 <ss_get_commands+0x40>)
        cmd_chars[i] = commands[i].c;
 8003118:	0060      	lsls	r0, r4, #1
 800311a:	1900      	adds	r0, r0, r4
 800311c:	0080      	lsls	r0, r0, #2
 800311e:	5c30      	ldrb	r0, [r6, r0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003120:	3301      	adds	r3, #1
 8003122:	b2db      	uxtb	r3, r3
        cmd_chars[i] = commands[i].c;
 8003124:	5510      	strb	r0, [r2, r4]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003126:	001c      	movs	r4, r3
 8003128:	42ab      	cmp	r3, r5
 800312a:	dbf5      	blt.n	8003118 <ss_get_commands+0x18>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 800312c:	2072      	movs	r0, #114	@ 0x72
 800312e:	b2c9      	uxtb	r1, r1
 8003130:	f7ff ff34 	bl	8002f9c <simpleserial_put>
}
 8003134:	2000      	movs	r0, #0
 8003136:	b004      	add	sp, #16
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	20000190 	.word	0x20000190
 8003140:	20000194 	.word	0x20000194

08003144 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003146:	2690      	movs	r6, #144	@ 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 8003148:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800314a:	2501      	movs	r5, #1
	GpioInit.Pin       = GPIO_PIN_2;
 800314c:	2304      	movs	r3, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800314e:	2703      	movs	r7, #3
{
 8003150:	b097      	sub	sp, #92	@ 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003152:	05f6      	lsls	r6, r6, #23
 8003154:	0030      	movs	r0, r6
 8003156:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 8003158:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800315a:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 800315c:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800315e:	9708      	str	r7, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003160:	f000 fc24 	bl	80039ac <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 8003164:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003166:	a905      	add	r1, sp, #20
 8003168:	0030      	movs	r0, r6
	GpioInit.Pin       = GPIO_PIN_4;
 800316a:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800316c:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 800316e:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003170:	9708      	str	r7, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003172:	f000 fc1b 	bl	80039ac <HAL_GPIO_Init>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8003176:	2203      	movs	r2, #3
 8003178:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800317a:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 800317c:	920a      	str	r2, [sp, #40]	@ 0x28
 800317e:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8003180:	940d      	str	r4, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8003182:	9413      	str	r4, [sp, #76]	@ 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003184:	f000 f8ca 	bl	800331c <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8003188:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800318a:	2100      	movs	r1, #0
 800318c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800318e:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003190:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8003192:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003194:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8003196:	f000 fb45 	bl	8003824 <HAL_RCC_ClockConfig>
#endif
}
 800319a:	b017      	add	sp, #92	@ 0x5c
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800319e:	46c0      	nop			@ (mov r8, r8)

080031a0 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	2280      	movs	r2, #128	@ 0x80
{
 80031a2:	b530      	push	{r4, r5, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031a4:	4c1c      	ldr	r4, [pc, #112]	@ (8003218 <init_uart+0x78>)
 80031a6:	0292      	lsls	r2, r2, #10
 80031a8:	6963      	ldr	r3, [r4, #20]
{
 80031aa:	b089      	sub	sp, #36	@ 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031ac:	4313      	orrs	r3, r2
 80031ae:	6163      	str	r3, [r4, #20]
 80031b0:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80031b2:	2090      	movs	r0, #144	@ 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031b4:	4013      	ands	r3, r2
 80031b6:	9300      	str	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80031b8:	22c0      	movs	r2, #192	@ 0xc0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031ba:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80031bc:	2302      	movs	r3, #2
 80031be:	00d2      	lsls	r2, r2, #3
 80031c0:	9202      	str	r2, [sp, #8]
 80031c2:	9303      	str	r3, [sp, #12]
	GpioInit.Alternate = GPIO_AF1_USART1;
 80031c4:	2501      	movs	r5, #1
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80031c6:	2201      	movs	r2, #1
 80031c8:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80031ca:	a902      	add	r1, sp, #8
 80031cc:	05c0      	lsls	r0, r0, #23
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80031ce:	9204      	str	r2, [sp, #16]
 80031d0:	9305      	str	r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 80031d2:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80031d4:	f000 fbea 	bl	80039ac <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 80031d8:	2280      	movs	r2, #128	@ 0x80
 80031da:	69a3      	ldr	r3, [r4, #24]
 80031dc:	01d2      	lsls	r2, r2, #7
 80031de:	4313      	orrs	r3, r2
 80031e0:	61a3      	str	r3, [r4, #24]
 80031e2:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 80031e4:	480d      	ldr	r0, [pc, #52]	@ (800321c <init_uart+0x7c>)
	__HAL_RCC_USART1_CLK_ENABLE();
 80031e6:	4013      	ands	r3, r2
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80031e8:	2203      	movs	r2, #3
	__HAL_RCC_USART1_CLK_ENABLE();
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80031ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031f0:	4393      	bics	r3, r2
 80031f2:	432b      	orrs	r3, r5
 80031f4:	6323      	str	r3, [r4, #48]	@ 0x30
	UartHandle.Instance        = USART1;
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <init_uart+0x80>)
 80031f8:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80031fa:	23e1      	movs	r3, #225	@ 0xe1
 80031fc:	029b      	lsls	r3, r3, #10
 80031fe:	6043      	str	r3, [r0, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8003200:	2300      	movs	r3, #0
 8003202:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8003204:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8003206:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003208:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800320a:	330c      	adds	r3, #12
 800320c:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 800320e:	f000 fd8d 	bl	8003d2c <HAL_UART_Init>
}
 8003212:	b009      	add	sp, #36	@ 0x24
 8003214:	bd30      	pop	{r4, r5, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	40021000 	.word	0x40021000
 800321c:	20000254 	.word	0x20000254
 8003220:	40013800 	.word	0x40013800

08003224 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	4b1f      	ldr	r3, [pc, #124]	@ (80032a4 <trigger_setup+0x80>)
{
 8003228:	b5d0      	push	{r4, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	0289      	lsls	r1, r1, #10
 800322e:	430a      	orrs	r2, r1
 8003230:	615a      	str	r2, [r3, #20]
 8003232:	695b      	ldr	r3, [r3, #20]
{
 8003234:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	400b      	ands	r3, r1
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003238:	2490      	movs	r4, #144	@ 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	9301      	str	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_7;
 800323c:	2600      	movs	r6, #0
 800323e:	2703      	movs	r7, #3
 8003240:	2280      	movs	r2, #128	@ 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_7;
 8003244:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003246:	05e4      	lsls	r4, r4, #23
 8003248:	0020      	movs	r0, r4
 800324a:	a902      	add	r1, sp, #8
	GpioInit.Pin       = GPIO_PIN_7;
 800324c:	9202      	str	r2, [sp, #8]
 800324e:	9303      	str	r3, [sp, #12]
 8003250:	9604      	str	r6, [sp, #16]
 8003252:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003254:	f000 fbaa 	bl	80039ac <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 8003258:	2210      	movs	r2, #16
 800325a:	2301      	movs	r3, #1
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800325c:	0020      	movs	r0, r4
 800325e:	a902      	add	r1, sp, #8
	GpioInit.Pin       = GPIO_PIN_4;
 8003260:	9202      	str	r2, [sp, #8]
 8003262:	9303      	str	r3, [sp, #12]
 8003264:	9604      	str	r6, [sp, #16]
 8003266:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003268:	f000 fba0 	bl	80039ac <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 800326c:	2301      	movs	r3, #1
 800326e:	2204      	movs	r2, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003270:	0020      	movs	r0, r4
 8003272:	a902      	add	r1, sp, #8
	GpioInit.Pin       = GPIO_PIN_2;
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	9303      	str	r3, [sp, #12]
 8003278:	9604      	str	r6, [sp, #16]
 800327a:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800327c:	f000 fb96 	bl	80039ac <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8003280:	0020      	movs	r0, r4
 8003282:	2200      	movs	r2, #0
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	f000 fd4b 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 800328a:	0020      	movs	r0, r4
 800328c:	2201      	movs	r2, #1
 800328e:	2110      	movs	r1, #16
 8003290:	f000 fd46 	bl	8003d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8003294:	2201      	movs	r2, #1
 8003296:	2104      	movs	r1, #4
 8003298:	0020      	movs	r0, r4
 800329a:	f000 fd41 	bl	8003d20 <HAL_GPIO_WritePin>
}
 800329e:	b008      	add	sp, #32
 80032a0:	bdd0      	pop	{r4, r6, r7, pc}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	40021000 	.word	0x40021000

080032a8 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80032a8:	2090      	movs	r0, #144	@ 0x90
{
 80032aa:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80032ac:	2201      	movs	r2, #1
 80032ae:	2180      	movs	r1, #128	@ 0x80
 80032b0:	05c0      	lsls	r0, r0, #23
 80032b2:	f000 fd35 	bl	8003d20 <HAL_GPIO_WritePin>
}
 80032b6:	bd10      	pop	{r4, pc}

080032b8 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80032b8:	2090      	movs	r0, #144	@ 0x90
{
 80032ba:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	@ 0x80
 80032c0:	05c0      	lsls	r0, r0, #23
 80032c2:	f000 fd2d 	bl	8003d20 <HAL_GPIO_WritePin>
}   
 80032c6:	bd10      	pop	{r4, pc}

080032c8 <getch>:

char getch(void)
{
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	b083      	sub	sp, #12
 80032cc:	466b      	mov	r3, sp
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80032ce:	2708      	movs	r7, #8
 80032d0:	4e08      	ldr	r6, [pc, #32]	@ (80032f4 <getch+0x2c>)
 80032d2:	4c09      	ldr	r4, [pc, #36]	@ (80032f8 <getch+0x30>)
 80032d4:	1ddd      	adds	r5, r3, #7
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 80032d6:	e002      	b.n	80032de <getch+0x16>
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80032d8:	6a23      	ldr	r3, [r4, #32]
 80032da:	433b      	orrs	r3, r7
 80032dc:	6223      	str	r3, [r4, #32]
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 80032de:	2332      	movs	r3, #50	@ 0x32
 80032e0:	2201      	movs	r2, #1
 80032e2:	0029      	movs	r1, r5
 80032e4:	0030      	movs	r0, r6
 80032e6:	f000 fdcb 	bl	8003e80 <HAL_UART_Receive>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d1f4      	bne.n	80032d8 <getch+0x10>
	return d;
 80032ee:	7828      	ldrb	r0, [r5, #0]
}
 80032f0:	b003      	add	sp, #12
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	20000254 	.word	0x20000254
 80032f8:	40013800 	.word	0x40013800

080032fc <putch>:

void putch(char c)
{
 80032fc:	b500      	push	{lr}
 80032fe:	b083      	sub	sp, #12
	uint8_t d  = c;
 8003300:	466b      	mov	r3, sp
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8003302:	2201      	movs	r2, #1
	uint8_t d  = c;
 8003304:	1dd9      	adds	r1, r3, #7
 8003306:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8003308:	4b02      	ldr	r3, [pc, #8]	@ (8003314 <putch+0x18>)
 800330a:	4803      	ldr	r0, [pc, #12]	@ (8003318 <putch+0x1c>)
 800330c:	f000 fec2 	bl	8004094 <HAL_UART_Transmit>
}
 8003310:	b003      	add	sp, #12
 8003312:	bd00      	pop	{pc}
 8003314:	00001388 	.word	0x00001388
 8003318:	20000254 	.word	0x20000254

0800331c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331e:	46ce      	mov	lr, r9
 8003320:	4647      	mov	r7, r8
 8003322:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003324:	6805      	ldr	r5, [r0, #0]
{
 8003326:	b083      	sub	sp, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003328:	07eb      	lsls	r3, r5, #31
 800332a:	d52f      	bpl.n	800338c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800332c:	220c      	movs	r2, #12
 800332e:	49b6      	ldr	r1, [pc, #728]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 8003330:	684b      	ldr	r3, [r1, #4]
 8003332:	4013      	ands	r3, r2
 8003334:	2b04      	cmp	r3, #4
 8003336:	d100      	bne.n	800333a <HAL_RCC_OscConfig+0x1e>
 8003338:	e145      	b.n	80035c6 <HAL_RCC_OscConfig+0x2aa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800333a:	684b      	ldr	r3, [r1, #4]
 800333c:	401a      	ands	r2, r3
 800333e:	2a08      	cmp	r2, #8
 8003340:	d100      	bne.n	8003344 <HAL_RCC_OscConfig+0x28>
 8003342:	e13c      	b.n	80035be <HAL_RCC_OscConfig+0x2a2>
	return tick++;;
 8003344:	4bb1      	ldr	r3, [pc, #708]	@ (800360c <HAL_RCC_OscConfig+0x2f0>)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003346:	6842      	ldr	r2, [r0, #4]
	return tick++;;
 8003348:	681c      	ldr	r4, [r3, #0]
 800334a:	1c61      	adds	r1, r4, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334c:	2a01      	cmp	r2, #1
 800334e:	d100      	bne.n	8003352 <HAL_RCC_OscConfig+0x36>
 8003350:	e1ba      	b.n	80036c8 <HAL_RCC_OscConfig+0x3ac>
 8003352:	2a00      	cmp	r2, #0
 8003354:	d100      	bne.n	8003358 <HAL_RCC_OscConfig+0x3c>
 8003356:	e1be      	b.n	80036d6 <HAL_RCC_OscConfig+0x3ba>
 8003358:	2a05      	cmp	r2, #5
 800335a:	d100      	bne.n	800335e <HAL_RCC_OscConfig+0x42>
 800335c:	e23d      	b.n	80037da <HAL_RCC_OscConfig+0x4be>
 800335e:	4aaa      	ldr	r2, [pc, #680]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 8003360:	4fab      	ldr	r7, [pc, #684]	@ (8003610 <HAL_RCC_OscConfig+0x2f4>)
 8003362:	6816      	ldr	r6, [r2, #0]
 8003364:	403e      	ands	r6, r7
 8003366:	6016      	str	r6, [r2, #0]
 8003368:	6816      	ldr	r6, [r2, #0]
 800336a:	4faa      	ldr	r7, [pc, #680]	@ (8003614 <HAL_RCC_OscConfig+0x2f8>)
 800336c:	403e      	ands	r6, r7
 800336e:	6016      	str	r6, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003370:	2680      	movs	r6, #128	@ 0x80
 8003372:	1ca2      	adds	r2, r4, #2
 8003374:	4fa4      	ldr	r7, [pc, #656]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
	return tick++;;
 8003376:	6019      	str	r1, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003378:	3467      	adds	r4, #103	@ 0x67
 800337a:	02b6      	lsls	r6, r6, #10
 800337c:	e003      	b.n	8003386 <HAL_RCC_OscConfig+0x6a>
	return tick++;;
 800337e:	601a      	str	r2, [r3, #0]
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003380:	3201      	adds	r2, #1
 8003382:	4294      	cmp	r4, r2
 8003384:	d02a      	beq.n	80033dc <HAL_RCC_OscConfig+0xc0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	4231      	tst	r1, r6
 800338a:	d0f8      	beq.n	800337e <HAL_RCC_OscConfig+0x62>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338c:	07ab      	lsls	r3, r5, #30
 800338e:	d53b      	bpl.n	8003408 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003390:	230c      	movs	r3, #12
 8003392:	4a9d      	ldr	r2, [pc, #628]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 8003394:	6851      	ldr	r1, [r2, #4]
 8003396:	420b      	tst	r3, r1
 8003398:	d029      	beq.n	80033ee <HAL_RCC_OscConfig+0xd2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800339a:	6851      	ldr	r1, [r2, #4]
 800339c:	400b      	ands	r3, r1
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d022      	beq.n	80033e8 <HAL_RCC_OscConfig+0xcc>
	return tick++;;
 80033a2:	4a9a      	ldr	r2, [pc, #616]	@ (800360c <HAL_RCC_OscConfig+0x2f0>)
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a4:	68c1      	ldr	r1, [r0, #12]
	return tick++;;
 80033a6:	6813      	ldr	r3, [r2, #0]
 80033a8:	1c5c      	adds	r4, r3, #1
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033aa:	2900      	cmp	r1, #0
 80033ac:	d100      	bne.n	80033b0 <HAL_RCC_OscConfig+0x94>
 80033ae:	e1c3      	b.n	8003738 <HAL_RCC_OscConfig+0x41c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b0:	2701      	movs	r7, #1
 80033b2:	4995      	ldr	r1, [pc, #596]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80033b4:	680e      	ldr	r6, [r1, #0]
 80033b6:	433e      	orrs	r6, r7
 80033b8:	600e      	str	r6, [r1, #0]
	return tick++;;
 80033ba:	6014      	str	r4, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	2402      	movs	r4, #2
 80033be:	680e      	ldr	r6, [r1, #0]
 80033c0:	4234      	tst	r4, r6
 80033c2:	d119      	bne.n	80033f8 <HAL_RCC_OscConfig+0xdc>
	return tick++;;
 80033c4:	1c9e      	adds	r6, r3, #2
 80033c6:	6016      	str	r6, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c8:	680e      	ldr	r6, [r1, #0]
 80033ca:	4234      	tst	r4, r6
 80033cc:	d114      	bne.n	80033f8 <HAL_RCC_OscConfig+0xdc>
	return tick++;;
 80033ce:	1cde      	adds	r6, r3, #3
 80033d0:	6016      	str	r6, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	6809      	ldr	r1, [r1, #0]
 80033d4:	420c      	tst	r4, r1
 80033d6:	d10f      	bne.n	80033f8 <HAL_RCC_OscConfig+0xdc>
	return tick++;;
 80033d8:	3304      	adds	r3, #4
 80033da:	6013      	str	r3, [r2, #0]
            return HAL_TIMEOUT;
 80033dc:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80033de:	b003      	add	sp, #12
 80033e0:	bcc0      	pop	{r6, r7}
 80033e2:	46b9      	mov	r9, r7
 80033e4:	46b0      	mov	r8, r6
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033e8:	6853      	ldr	r3, [r2, #4]
 80033ea:	03db      	lsls	r3, r3, #15
 80033ec:	d4d9      	bmi.n	80033a2 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	4b86      	ldr	r3, [pc, #536]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	079b      	lsls	r3, r3, #30
 80033f4:	d500      	bpl.n	80033f8 <HAL_RCC_OscConfig+0xdc>
 80033f6:	e161      	b.n	80036bc <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	24f8      	movs	r4, #248	@ 0xf8
 80033fa:	4983      	ldr	r1, [pc, #524]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80033fc:	6903      	ldr	r3, [r0, #16]
 80033fe:	680a      	ldr	r2, [r1, #0]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	43a2      	bics	r2, r4
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003408:	072b      	lsls	r3, r5, #28
 800340a:	d51c      	bpl.n	8003446 <HAL_RCC_OscConfig+0x12a>
	return tick++;;
 800340c:	4b7f      	ldr	r3, [pc, #508]	@ (800360c <HAL_RCC_OscConfig+0x2f0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340e:	69c1      	ldr	r1, [r0, #28]
	return tick++;;
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	1c54      	adds	r4, r2, #1
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003414:	2900      	cmp	r1, #0
 8003416:	d000      	beq.n	800341a <HAL_RCC_OscConfig+0xfe>
 8003418:	e0e0      	b.n	80035dc <HAL_RCC_OscConfig+0x2c0>
      __HAL_RCC_LSI_DISABLE();
 800341a:	2701      	movs	r7, #1
 800341c:	497a      	ldr	r1, [pc, #488]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 800341e:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8003420:	43be      	bics	r6, r7
 8003422:	624e      	str	r6, [r1, #36]	@ 0x24
	return tick++;;
 8003424:	601c      	str	r4, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003426:	2402      	movs	r4, #2
 8003428:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800342a:	4234      	tst	r4, r6
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_OscConfig+0x12a>
 800342e:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8003430:	4234      	tst	r4, r6
 8003432:	d006      	beq.n	8003442 <HAL_RCC_OscConfig+0x126>
 8003434:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8003436:	420c      	tst	r4, r1
 8003438:	d100      	bne.n	800343c <HAL_RCC_OscConfig+0x120>
 800343a:	e0e2      	b.n	8003602 <HAL_RCC_OscConfig+0x2e6>
	return tick++;;
 800343c:	3204      	adds	r2, #4
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e7cc      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
 8003442:	3202      	adds	r2, #2
 8003444:	601a      	str	r2, [r3, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003446:	076b      	lsls	r3, r5, #29
 8003448:	d561      	bpl.n	800350e <HAL_RCC_OscConfig+0x1f2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344a:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800344c:	2400      	movs	r4, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b6e      	ldr	r3, [pc, #440]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 8003450:	0552      	lsls	r2, r2, #21
 8003452:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003454:	46a1      	mov	r9, r4
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4211      	tst	r1, r2
 8003458:	d108      	bne.n	800346c <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	4311      	orrs	r1, r2
 800345e:	61d9      	str	r1, [r3, #28]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4013      	ands	r3, r2
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003468:	2301      	movs	r3, #1
 800346a:	4699      	mov	r9, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	2680      	movs	r6, #128	@ 0x80
 800346e:	4c6a      	ldr	r4, [pc, #424]	@ (8003618 <HAL_RCC_OscConfig+0x2fc>)
	return tick++;;
 8003470:	4b66      	ldr	r3, [pc, #408]	@ (800360c <HAL_RCC_OscConfig+0x2f0>)
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003472:	6821      	ldr	r1, [r4, #0]
 8003474:	0076      	lsls	r6, r6, #1
	return tick++;;
 8003476:	681a      	ldr	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4231      	tst	r1, r6
 800347a:	d118      	bne.n	80034ae <HAL_RCC_OscConfig+0x192>
	return tick++;;
 800347c:	1c51      	adds	r1, r2, #1
 800347e:	468c      	mov	ip, r1
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003480:	6821      	ldr	r1, [r4, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	2700      	movs	r7, #0
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003484:	4331      	orrs	r1, r6
 8003486:	6021      	str	r1, [r4, #0]
	return tick++;;
 8003488:	4661      	mov	r1, ip
 800348a:	6019      	str	r1, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	2166      	movs	r1, #102	@ 0x66
 800348e:	4688      	mov	r8, r1
 8003490:	4490      	add	r8, r2
 8003492:	4662      	mov	r2, ip
 8003494:	e004      	b.n	80034a0 <HAL_RCC_OscConfig+0x184>
	return tick++;;
 8003496:	3201      	adds	r2, #1
 8003498:	2701      	movs	r7, #1
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	4590      	cmp	r8, r2
 800349c:	d100      	bne.n	80034a0 <HAL_RCC_OscConfig+0x184>
 800349e:	e163      	b.n	8003768 <HAL_RCC_OscConfig+0x44c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	6821      	ldr	r1, [r4, #0]
 80034a2:	4231      	tst	r1, r6
 80034a4:	d0f7      	beq.n	8003496 <HAL_RCC_OscConfig+0x17a>
 80034a6:	2f00      	cmp	r7, #0
 80034a8:	d100      	bne.n	80034ac <HAL_RCC_OscConfig+0x190>
 80034aa:	e187      	b.n	80037bc <HAL_RCC_OscConfig+0x4a0>
 80034ac:	601a      	str	r2, [r3, #0]
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ae:	6884      	ldr	r4, [r0, #8]
	return tick++;;
 80034b0:	1c51      	adds	r1, r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b2:	2c01      	cmp	r4, #1
 80034b4:	d00f      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1ba>
 80034b6:	2c00      	cmp	r4, #0
 80034b8:	d100      	bne.n	80034bc <HAL_RCC_OscConfig+0x1a0>
 80034ba:	e124      	b.n	8003706 <HAL_RCC_OscConfig+0x3ea>
 80034bc:	2c05      	cmp	r4, #5
 80034be:	d100      	bne.n	80034c2 <HAL_RCC_OscConfig+0x1a6>
 80034c0:	e17e      	b.n	80037c0 <HAL_RCC_OscConfig+0x4a4>
 80034c2:	2701      	movs	r7, #1
 80034c4:	4c50      	ldr	r4, [pc, #320]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80034c6:	6a26      	ldr	r6, [r4, #32]
 80034c8:	43be      	bics	r6, r7
 80034ca:	6226      	str	r6, [r4, #32]
 80034cc:	6a26      	ldr	r6, [r4, #32]
 80034ce:	3703      	adds	r7, #3
 80034d0:	43be      	bics	r6, r7
 80034d2:	6226      	str	r6, [r4, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d4:	e003      	b.n	80034de <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d6:	4f4c      	ldr	r7, [pc, #304]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80034d8:	6a3e      	ldr	r6, [r7, #32]
 80034da:	4334      	orrs	r4, r6
 80034dc:	623c      	str	r4, [r7, #32]
	return tick++;;
 80034de:	4c4f      	ldr	r4, [pc, #316]	@ (800361c <HAL_RCC_OscConfig+0x300>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	2700      	movs	r7, #0
 80034e2:	46a4      	mov	ip, r4
 80034e4:	4c48      	ldr	r4, [pc, #288]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80034e6:	4462      	add	r2, ip
 80034e8:	2602      	movs	r6, #2
 80034ea:	46a4      	mov	ip, r4
	return tick++;;
 80034ec:	6019      	str	r1, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e003      	b.n	80034f8 <HAL_RCC_OscConfig+0x1dc>
	return tick++;;
 80034f0:	3101      	adds	r1, #1
 80034f2:	2701      	movs	r7, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	4291      	cmp	r1, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_RCC_OscConfig+0x236>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	4664      	mov	r4, ip
 80034fa:	6a24      	ldr	r4, [r4, #32]
 80034fc:	4226      	tst	r6, r4
 80034fe:	d0f7      	beq.n	80034f0 <HAL_RCC_OscConfig+0x1d4>
 8003500:	2f00      	cmp	r7, #0
 8003502:	d000      	beq.n	8003506 <HAL_RCC_OscConfig+0x1ea>
 8003504:	6019      	str	r1, [r3, #0]
    if(pwrclkchanged == SET)
 8003506:	464b      	mov	r3, r9
 8003508:	2b01      	cmp	r3, #1
 800350a:	d100      	bne.n	800350e <HAL_RCC_OscConfig+0x1f2>
 800350c:	e150      	b.n	80037b0 <HAL_RCC_OscConfig+0x494>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800350e:	06ed      	lsls	r5, r5, #27
 8003510:	d52c      	bpl.n	800356c <HAL_RCC_OscConfig+0x250>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003512:	6943      	ldr	r3, [r0, #20]
      __HAL_RCC_HSI14ADC_DISABLE();
 8003514:	4a3c      	ldr	r2, [pc, #240]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003516:	2b01      	cmp	r3, #1
 8003518:	d100      	bne.n	800351c <HAL_RCC_OscConfig+0x200>
 800351a:	e128      	b.n	800376e <HAL_RCC_OscConfig+0x452>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800351c:	3305      	adds	r3, #5
 800351e:	d01a      	beq.n	8003556 <HAL_RCC_OscConfig+0x23a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003520:	2104      	movs	r1, #4
 8003522:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003524:	430b      	orrs	r3, r1
 8003526:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003528:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800352a:	3903      	subs	r1, #3
 800352c:	438b      	bics	r3, r1
 800352e:	6353      	str	r3, [r2, #52]	@ 0x34
	return tick++;;
 8003530:	4b36      	ldr	r3, [pc, #216]	@ (800360c <HAL_RCC_OscConfig+0x2f0>)
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	1c4c      	adds	r4, r1, #1
 8003536:	601c      	str	r4, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003538:	2402      	movs	r4, #2
 800353a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800353c:	422c      	tst	r4, r5
 800353e:	d015      	beq.n	800356c <HAL_RCC_OscConfig+0x250>
 8003540:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8003542:	422c      	tst	r4, r5
 8003544:	d100      	bne.n	8003548 <HAL_RCC_OscConfig+0x22c>
 8003546:	e154      	b.n	80037f2 <HAL_RCC_OscConfig+0x4d6>
 8003548:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800354a:	4214      	tst	r4, r2
 800354c:	d100      	bne.n	8003550 <HAL_RCC_OscConfig+0x234>
 800354e:	e141      	b.n	80037d4 <HAL_RCC_OscConfig+0x4b8>
	return tick++;;
 8003550:	3104      	adds	r1, #4
 8003552:	6019      	str	r1, [r3, #0]
 8003554:	e742      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003556:	2104      	movs	r1, #4
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003558:	24f8      	movs	r4, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 800355a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800355c:	438b      	bics	r3, r1
 800355e:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003560:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003562:	6983      	ldr	r3, [r0, #24]
 8003564:	43a1      	bics	r1, r4
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	430b      	orrs	r3, r1
 800356a:	6353      	str	r3, [r2, #52]	@ 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356c:	6a01      	ldr	r1, [r0, #32]
 800356e:	2900      	cmp	r1, #0
 8003570:	d100      	bne.n	8003574 <HAL_RCC_OscConfig+0x258>
 8003572:	e0a1      	b.n	80036b8 <HAL_RCC_OscConfig+0x39c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	230c      	movs	r3, #12
 8003576:	4a24      	ldr	r2, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 8003578:	6854      	ldr	r4, [r2, #4]
 800357a:	4023      	ands	r3, r4
 800357c:	2b08      	cmp	r3, #8
 800357e:	d02b      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2bc>
	return tick++;;
 8003580:	4b22      	ldr	r3, [pc, #136]	@ (800360c <HAL_RCC_OscConfig+0x2f0>)
 8003582:	681c      	ldr	r4, [r3, #0]
 8003584:	1c65      	adds	r5, r4, #1
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003586:	2902      	cmp	r1, #2
 8003588:	d04c      	beq.n	8003624 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800358a:	6811      	ldr	r1, [r2, #0]
 800358c:	4824      	ldr	r0, [pc, #144]	@ (8003620 <HAL_RCC_OscConfig+0x304>)
 800358e:	4001      	ands	r1, r0
 8003590:	6011      	str	r1, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003592:	2180      	movs	r1, #128	@ 0x80
	return tick++;;
 8003594:	601d      	str	r5, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003596:	6810      	ldr	r0, [r2, #0]
 8003598:	0489      	lsls	r1, r1, #18
 800359a:	4208      	tst	r0, r1
 800359c:	d100      	bne.n	80035a0 <HAL_RCC_OscConfig+0x284>
 800359e:	e08b      	b.n	80036b8 <HAL_RCC_OscConfig+0x39c>
	return tick++;;
 80035a0:	1ca0      	adds	r0, r4, #2
 80035a2:	6018      	str	r0, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a4:	6810      	ldr	r0, [r2, #0]
 80035a6:	4208      	tst	r0, r1
 80035a8:	d100      	bne.n	80035ac <HAL_RCC_OscConfig+0x290>
 80035aa:	e085      	b.n	80036b8 <HAL_RCC_OscConfig+0x39c>
	return tick++;;
 80035ac:	1ce0      	adds	r0, r4, #3
 80035ae:	6018      	str	r0, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	420a      	tst	r2, r1
 80035b4:	d100      	bne.n	80035b8 <HAL_RCC_OscConfig+0x29c>
 80035b6:	e07f      	b.n	80036b8 <HAL_RCC_OscConfig+0x39c>
	return tick++;;
 80035b8:	3404      	adds	r4, #4
 80035ba:	601c      	str	r4, [r3, #0]
 80035bc:	e70e      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035be:	684b      	ldr	r3, [r1, #4]
 80035c0:	03db      	lsls	r3, r3, #15
 80035c2:	d400      	bmi.n	80035c6 <HAL_RCC_OscConfig+0x2aa>
 80035c4:	e6be      	b.n	8003344 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	039b      	lsls	r3, r3, #14
 80035cc:	d400      	bmi.n	80035d0 <HAL_RCC_OscConfig+0x2b4>
 80035ce:	e6dd      	b.n	800338c <HAL_RCC_OscConfig+0x70>
 80035d0:	6843      	ldr	r3, [r0, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d000      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2bc>
 80035d6:	e6d9      	b.n	800338c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80035d8:	2001      	movs	r0, #1
 80035da:	e700      	b.n	80033de <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_ENABLE();
 80035dc:	2701      	movs	r7, #1
 80035de:	490a      	ldr	r1, [pc, #40]	@ (8003608 <HAL_RCC_OscConfig+0x2ec>)
 80035e0:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 80035e2:	433e      	orrs	r6, r7
 80035e4:	624e      	str	r6, [r1, #36]	@ 0x24
	return tick++;;
 80035e6:	601c      	str	r4, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e8:	2402      	movs	r4, #2
 80035ea:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 80035ec:	4234      	tst	r4, r6
 80035ee:	d000      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2d6>
 80035f0:	e729      	b.n	8003446 <HAL_RCC_OscConfig+0x12a>
 80035f2:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 80035f4:	4234      	tst	r4, r6
 80035f6:	d000      	beq.n	80035fa <HAL_RCC_OscConfig+0x2de>
 80035f8:	e723      	b.n	8003442 <HAL_RCC_OscConfig+0x126>
 80035fa:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80035fc:	420c      	tst	r4, r1
 80035fe:	d100      	bne.n	8003602 <HAL_RCC_OscConfig+0x2e6>
 8003600:	e71c      	b.n	800343c <HAL_RCC_OscConfig+0x120>
	return tick++;;
 8003602:	3203      	adds	r2, #3
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e71e      	b.n	8003446 <HAL_RCC_OscConfig+0x12a>
 8003608:	40021000 	.word	0x40021000
 800360c:	200002c4 	.word	0x200002c4
 8003610:	fffeffff 	.word	0xfffeffff
 8003614:	fffbffff 	.word	0xfffbffff
 8003618:	40007000 	.word	0x40007000
 800361c:	0000138a 	.word	0x0000138a
 8003620:	feffffff 	.word	0xfeffffff
        __HAL_RCC_PLL_DISABLE();
 8003624:	6811      	ldr	r1, [r2, #0]
 8003626:	4e77      	ldr	r6, [pc, #476]	@ (8003804 <HAL_RCC_OscConfig+0x4e8>)
 8003628:	4031      	ands	r1, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800362c:	6011      	str	r1, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	6817      	ldr	r7, [r2, #0]
 8003630:	04b6      	lsls	r6, r6, #18
	return tick++;;
 8003632:	1ca1      	adds	r1, r4, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003634:	4237      	tst	r7, r6
 8003636:	d009      	beq.n	800364c <HAL_RCC_OscConfig+0x330>
 8003638:	6817      	ldr	r7, [r2, #0]
	return tick++;;
 800363a:	1ce5      	adds	r5, r4, #3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	4237      	tst	r7, r6
 800363e:	d100      	bne.n	8003642 <HAL_RCC_OscConfig+0x326>
 8003640:	e0dc      	b.n	80037fc <HAL_RCC_OscConfig+0x4e0>
 8003642:	6812      	ldr	r2, [r2, #0]
	return tick++;;
 8003644:	1d21      	adds	r1, r4, #4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003646:	4232      	tst	r2, r6
 8003648:	d000      	beq.n	800364c <HAL_RCC_OscConfig+0x330>
 800364a:	e782      	b.n	8003552 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364c:	260f      	movs	r6, #15
 800364e:	4a6e      	ldr	r2, [pc, #440]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 8003650:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 8003652:	43b4      	bics	r4, r6
 8003654:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 8003656:	4334      	orrs	r4, r6
 8003658:	62d4      	str	r4, [r2, #44]	@ 0x2c
 800365a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800365c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800365e:	6856      	ldr	r6, [r2, #4]
 8003660:	4320      	orrs	r0, r4
 8003662:	4c6a      	ldr	r4, [pc, #424]	@ (800380c <HAL_RCC_OscConfig+0x4f0>)
 8003664:	4034      	ands	r4, r6
 8003666:	4320      	orrs	r0, r4
 8003668:	6050      	str	r0, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800366a:	2080      	movs	r0, #128	@ 0x80
 800366c:	6814      	ldr	r4, [r2, #0]
 800366e:	0440      	lsls	r0, r0, #17
 8003670:	4320      	orrs	r0, r4
 8003672:	6010      	str	r0, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003674:	2080      	movs	r0, #128	@ 0x80
	return tick++;;
 8003676:	6019      	str	r1, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	6814      	ldr	r4, [r2, #0]
 800367a:	0480      	lsls	r0, r0, #18
 800367c:	4204      	tst	r4, r0
 800367e:	d11b      	bne.n	80036b8 <HAL_RCC_OscConfig+0x39c>
	return tick++;;
 8003680:	1c4c      	adds	r4, r1, #1
 8003682:	601c      	str	r4, [r3, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	1b4e      	subs	r6, r1, r5
 8003686:	2e02      	cmp	r6, #2
 8003688:	d900      	bls.n	800368c <HAL_RCC_OscConfig+0x370>
 800368a:	e6a7      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	6816      	ldr	r6, [r2, #0]
 800368e:	4206      	tst	r6, r0
 8003690:	d112      	bne.n	80036b8 <HAL_RCC_OscConfig+0x39c>
	return tick++;;
 8003692:	1c8e      	adds	r6, r1, #2
 8003694:	601e      	str	r6, [r3, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	2c02      	cmp	r4, #2
 800369a:	d900      	bls.n	800369e <HAL_RCC_OscConfig+0x382>
 800369c:	e69e      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369e:	6814      	ldr	r4, [r2, #0]
 80036a0:	4204      	tst	r4, r0
 80036a2:	d109      	bne.n	80036b8 <HAL_RCC_OscConfig+0x39c>
	return tick++;;
 80036a4:	1ccc      	adds	r4, r1, #3
 80036a6:	601c      	str	r4, [r3, #0]
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a8:	1b76      	subs	r6, r6, r5
 80036aa:	2e02      	cmp	r6, #2
 80036ac:	d900      	bls.n	80036b0 <HAL_RCC_OscConfig+0x394>
 80036ae:	e695      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4202      	tst	r2, r0
 80036b4:	d100      	bne.n	80036b8 <HAL_RCC_OscConfig+0x39c>
 80036b6:	e74b      	b.n	8003550 <HAL_RCC_OscConfig+0x234>
  return HAL_OK;
 80036b8:	2000      	movs	r0, #0
 80036ba:	e690      	b.n	80033de <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036bc:	68c3      	ldr	r3, [r0, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d100      	bne.n	80036c4 <HAL_RCC_OscConfig+0x3a8>
 80036c2:	e699      	b.n	80033f8 <HAL_RCC_OscConfig+0xdc>
        return HAL_ERROR;
 80036c4:	2001      	movs	r0, #1
 80036c6:	e68a      	b.n	80033de <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	4e4f      	ldr	r6, [pc, #316]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 80036cc:	0252      	lsls	r2, r2, #9
 80036ce:	6837      	ldr	r7, [r6, #0]
 80036d0:	433a      	orrs	r2, r7
 80036d2:	6032      	str	r2, [r6, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	e64c      	b.n	8003370 <HAL_RCC_OscConfig+0x54>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	4f4c      	ldr	r7, [pc, #304]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 80036d8:	4e4d      	ldr	r6, [pc, #308]	@ (8003810 <HAL_RCC_OscConfig+0x4f4>)
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4032      	ands	r2, r6
 80036de:	603a      	str	r2, [r7, #0]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	4e4c      	ldr	r6, [pc, #304]	@ (8003814 <HAL_RCC_OscConfig+0x4f8>)
 80036e4:	4032      	ands	r2, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	2680      	movs	r6, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e8:	603a      	str	r2, [r7, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	02b6      	lsls	r6, r6, #10
 80036ec:	1ca2      	adds	r2, r4, #2
	return tick++;;
 80036ee:	6019      	str	r1, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f0:	3467      	adds	r4, #103	@ 0x67
 80036f2:	e004      	b.n	80036fe <HAL_RCC_OscConfig+0x3e2>
	return tick++;;
 80036f4:	601a      	str	r2, [r3, #0]
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f6:	3201      	adds	r2, #1
 80036f8:	42a2      	cmp	r2, r4
 80036fa:	d100      	bne.n	80036fe <HAL_RCC_OscConfig+0x3e2>
 80036fc:	e66e      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	6839      	ldr	r1, [r7, #0]
 8003700:	4231      	tst	r1, r6
 8003702:	d1f7      	bne.n	80036f4 <HAL_RCC_OscConfig+0x3d8>
 8003704:	e642      	b.n	800338c <HAL_RCC_OscConfig+0x70>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003706:	2701      	movs	r7, #1
 8003708:	4e3f      	ldr	r6, [pc, #252]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 800370a:	6a34      	ldr	r4, [r6, #32]
 800370c:	43bc      	bics	r4, r7
 800370e:	6234      	str	r4, [r6, #32]
 8003710:	6a34      	ldr	r4, [r6, #32]
 8003712:	3703      	adds	r7, #3
 8003714:	43bc      	bics	r4, r7
 8003716:	6234      	str	r4, [r6, #32]
	return tick++;;
 8003718:	4c3f      	ldr	r4, [pc, #252]	@ (8003818 <HAL_RCC_OscConfig+0x4fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371a:	2700      	movs	r7, #0
 800371c:	46a0      	mov	r8, r4
	return tick++;;
 800371e:	6019      	str	r1, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003720:	4490      	add	r8, r2
 8003722:	2202      	movs	r2, #2
 8003724:	e004      	b.n	8003730 <HAL_RCC_OscConfig+0x414>
	return tick++;;
 8003726:	3101      	adds	r1, #1
 8003728:	2701      	movs	r7, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	4541      	cmp	r1, r8
 800372c:	d100      	bne.n	8003730 <HAL_RCC_OscConfig+0x414>
 800372e:	e710      	b.n	8003552 <HAL_RCC_OscConfig+0x236>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	6a34      	ldr	r4, [r6, #32]
 8003732:	4222      	tst	r2, r4
 8003734:	d1f7      	bne.n	8003726 <HAL_RCC_OscConfig+0x40a>
 8003736:	e6e3      	b.n	8003500 <HAL_RCC_OscConfig+0x1e4>
        __HAL_RCC_HSI_DISABLE();
 8003738:	2701      	movs	r7, #1
 800373a:	4933      	ldr	r1, [pc, #204]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 800373c:	680e      	ldr	r6, [r1, #0]
 800373e:	43be      	bics	r6, r7
 8003740:	600e      	str	r6, [r1, #0]
	return tick++;;
 8003742:	6014      	str	r4, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003744:	2402      	movs	r4, #2
 8003746:	680e      	ldr	r6, [r1, #0]
 8003748:	4234      	tst	r4, r6
 800374a:	d100      	bne.n	800374e <HAL_RCC_OscConfig+0x432>
 800374c:	e65c      	b.n	8003408 <HAL_RCC_OscConfig+0xec>
	return tick++;;
 800374e:	1c9e      	adds	r6, r3, #2
 8003750:	6016      	str	r6, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	680e      	ldr	r6, [r1, #0]
 8003754:	4234      	tst	r4, r6
 8003756:	d100      	bne.n	800375a <HAL_RCC_OscConfig+0x43e>
 8003758:	e656      	b.n	8003408 <HAL_RCC_OscConfig+0xec>
	return tick++;;
 800375a:	1cde      	adds	r6, r3, #3
 800375c:	6016      	str	r6, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	6809      	ldr	r1, [r1, #0]
 8003760:	420c      	tst	r4, r1
 8003762:	d000      	beq.n	8003766 <HAL_RCC_OscConfig+0x44a>
 8003764:	e638      	b.n	80033d8 <HAL_RCC_OscConfig+0xbc>
 8003766:	e64f      	b.n	8003408 <HAL_RCC_OscConfig+0xec>
 8003768:	4642      	mov	r2, r8
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e636      	b.n	80033dc <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_HSI14ADC_DISABLE();
 800376e:	2404      	movs	r4, #4
 8003770:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003772:	4321      	orrs	r1, r4
 8003774:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003776:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003778:	430b      	orrs	r3, r1
 800377a:	6353      	str	r3, [r2, #52]	@ 0x34
	return tick++;;
 800377c:	4b27      	ldr	r3, [pc, #156]	@ (800381c <HAL_RCC_OscConfig+0x500>)
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	1c4c      	adds	r4, r1, #1
 8003782:	601c      	str	r4, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003784:	2402      	movs	r4, #2
 8003786:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8003788:	422c      	tst	r4, r5
 800378a:	d108      	bne.n	800379e <HAL_RCC_OscConfig+0x482>
 800378c:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800378e:	422c      	tst	r4, r5
 8003790:	d132      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
 8003792:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003794:	4214      	tst	r4, r2
 8003796:	d100      	bne.n	800379a <HAL_RCC_OscConfig+0x47e>
 8003798:	e6da      	b.n	8003550 <HAL_RCC_OscConfig+0x234>
	return tick++;;
 800379a:	3103      	adds	r1, #3
 800379c:	6019      	str	r1, [r3, #0]
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800379e:	24f8      	movs	r4, #248	@ 0xf8
 80037a0:	4919      	ldr	r1, [pc, #100]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 80037a2:	6983      	ldr	r3, [r0, #24]
 80037a4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	43a2      	bics	r2, r4
 80037aa:	4313      	orrs	r3, r2
 80037ac:	634b      	str	r3, [r1, #52]	@ 0x34
 80037ae:	e6dd      	b.n	800356c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 80037b2:	491b      	ldr	r1, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x504>)
 80037b4:	69d3      	ldr	r3, [r2, #28]
 80037b6:	400b      	ands	r3, r1
 80037b8:	61d3      	str	r3, [r2, #28]
 80037ba:	e6a8      	b.n	800350e <HAL_RCC_OscConfig+0x1f2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4662      	mov	r2, ip
 80037be:	e676      	b.n	80034ae <HAL_RCC_OscConfig+0x192>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	2704      	movs	r7, #4
 80037c2:	4c11      	ldr	r4, [pc, #68]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 80037c4:	6a26      	ldr	r6, [r4, #32]
 80037c6:	433e      	orrs	r6, r7
 80037c8:	6226      	str	r6, [r4, #32]
 80037ca:	6a26      	ldr	r6, [r4, #32]
 80037cc:	3f03      	subs	r7, #3
 80037ce:	433e      	orrs	r6, r7
 80037d0:	6226      	str	r6, [r4, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d2:	e684      	b.n	80034de <HAL_RCC_OscConfig+0x1c2>
	return tick++;;
 80037d4:	3103      	adds	r1, #3
 80037d6:	6019      	str	r1, [r3, #0]
 80037d8:	e6c8      	b.n	800356c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037da:	2680      	movs	r6, #128	@ 0x80
 80037dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <HAL_RCC_OscConfig+0x4ec>)
 80037de:	02f6      	lsls	r6, r6, #11
 80037e0:	6817      	ldr	r7, [r2, #0]
 80037e2:	433e      	orrs	r6, r7
 80037e4:	6016      	str	r6, [r2, #0]
 80037e6:	2680      	movs	r6, #128	@ 0x80
 80037e8:	6817      	ldr	r7, [r2, #0]
 80037ea:	0276      	lsls	r6, r6, #9
 80037ec:	433e      	orrs	r6, r7
 80037ee:	6016      	str	r6, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f0:	e5be      	b.n	8003370 <HAL_RCC_OscConfig+0x54>
	return tick++;;
 80037f2:	3102      	adds	r1, #2
 80037f4:	6019      	str	r1, [r3, #0]
 80037f6:	e6b9      	b.n	800356c <HAL_RCC_OscConfig+0x250>
 80037f8:	3102      	adds	r1, #2
 80037fa:	e7cf      	b.n	800379c <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fc:	002a      	movs	r2, r5
	return tick++;;
 80037fe:	000d      	movs	r5, r1
 8003800:	0011      	movs	r1, r2
 8003802:	e723      	b.n	800364c <HAL_RCC_OscConfig+0x330>
 8003804:	feffffff 	.word	0xfeffffff
 8003808:	40021000 	.word	0x40021000
 800380c:	ffc2ffff 	.word	0xffc2ffff
 8003810:	fffeffff 	.word	0xfffeffff
 8003814:	fffbffff 	.word	0xfffbffff
 8003818:	0000138a 	.word	0x0000138a
 800381c:	200002c4 	.word	0x200002c4
 8003820:	efffffff 	.word	0xefffffff

08003824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003826:	2301      	movs	r3, #1
{
 8003828:	46d6      	mov	lr, sl
 800382a:	464f      	mov	r7, r9
 800382c:	4646      	mov	r6, r8
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800382e:	4c58      	ldr	r4, [pc, #352]	@ (8003990 <HAL_RCC_ClockConfig+0x16c>)
{
 8003830:	b5c0      	push	{r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003832:	6822      	ldr	r2, [r4, #0]
 8003834:	401a      	ands	r2, r3
 8003836:	428a      	cmp	r2, r1
 8003838:	d209      	bcs.n	800384e <HAL_RCC_ClockConfig+0x2a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	439a      	bics	r2, r3
 800383e:	430a      	orrs	r2, r1
 8003840:	6022      	str	r2, [r4, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	4013      	ands	r3, r2
 8003846:	428b      	cmp	r3, r1
 8003848:	d001      	beq.n	800384e <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
 800384c:	e04a      	b.n	80038e4 <HAL_RCC_ClockConfig+0xc0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384e:	6804      	ldr	r4, [r0, #0]
 8003850:	07a3      	lsls	r3, r4, #30
 8003852:	d506      	bpl.n	8003862 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	25f0      	movs	r5, #240	@ 0xf0
 8003856:	4a4f      	ldr	r2, [pc, #316]	@ (8003994 <HAL_RCC_ClockConfig+0x170>)
 8003858:	6853      	ldr	r3, [r2, #4]
 800385a:	43ab      	bics	r3, r5
 800385c:	6885      	ldr	r5, [r0, #8]
 800385e:	432b      	orrs	r3, r5
 8003860:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003862:	07e3      	lsls	r3, r4, #31
 8003864:	d52a      	bpl.n	80038bc <HAL_RCC_ClockConfig+0x98>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4e4b      	ldr	r6, [pc, #300]	@ (8003994 <HAL_RCC_ClockConfig+0x170>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003868:	6843      	ldr	r3, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	6832      	ldr	r2, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386c:	2b01      	cmp	r3, #1
 800386e:	d06a      	beq.n	8003946 <HAL_RCC_ClockConfig+0x122>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003870:	2b02      	cmp	r3, #2
 8003872:	d044      	beq.n	80038fe <HAL_RCC_ClockConfig+0xda>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	0792      	lsls	r2, r2, #30
 8003876:	d5e8      	bpl.n	800384a <HAL_RCC_ClockConfig+0x26>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003878:	2503      	movs	r5, #3
 800387a:	6872      	ldr	r2, [r6, #4]
 800387c:	43aa      	bics	r2, r5
 800387e:	4313      	orrs	r3, r2
 8003880:	6073      	str	r3, [r6, #4]
	return tick++;;
 8003882:	4b45      	ldr	r3, [pc, #276]	@ (8003998 <HAL_RCC_ClockConfig+0x174>)
 8003884:	469a      	mov	sl, r3
 8003886:	4652      	mov	r2, sl
 8003888:	681f      	ldr	r7, [r3, #0]
 800388a:	1c7b      	adds	r3, r7, #1
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	4694      	mov	ip, r2
      }
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003892:	320c      	adds	r2, #12
 8003894:	4690      	mov	r8, r2
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003896:	4a41      	ldr	r2, [pc, #260]	@ (800399c <HAL_RCC_ClockConfig+0x178>)
 8003898:	4691      	mov	r9, r2
 800389a:	e006      	b.n	80038aa <HAL_RCC_ClockConfig+0x86>
	return tick++;;
 800389c:	2201      	movs	r2, #1
 800389e:	3301      	adds	r3, #1
 80038a0:	4694      	mov	ip, r2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a2:	1bda      	subs	r2, r3, r7
 80038a4:	3a01      	subs	r2, #1
 80038a6:	454a      	cmp	r2, r9
 80038a8:	d86e      	bhi.n	8003988 <HAL_RCC_ClockConfig+0x164>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038aa:	4645      	mov	r5, r8
 80038ac:	6872      	ldr	r2, [r6, #4]
 80038ae:	4215      	tst	r5, r2
 80038b0:	d1f4      	bne.n	800389c <HAL_RCC_ClockConfig+0x78>
 80038b2:	4662      	mov	r2, ip
 80038b4:	2a00      	cmp	r2, #0
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x98>
 80038b8:	4652      	mov	r2, sl
 80038ba:	6013      	str	r3, [r2, #0]
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80038bc:	2501      	movs	r5, #1
 80038be:	4a34      	ldr	r2, [pc, #208]	@ (8003990 <HAL_RCC_ClockConfig+0x16c>)
 80038c0:	6813      	ldr	r3, [r2, #0]
 80038c2:	402b      	ands	r3, r5
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d812      	bhi.n	80038ee <HAL_RCC_ClockConfig+0xca>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	0764      	lsls	r4, r4, #29
 80038ca:	d506      	bpl.n	80038da <HAL_RCC_ClockConfig+0xb6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4a31      	ldr	r2, [pc, #196]	@ (8003994 <HAL_RCC_ClockConfig+0x170>)
 80038ce:	4934      	ldr	r1, [pc, #208]	@ (80039a0 <HAL_RCC_ClockConfig+0x17c>)
 80038d0:	6853      	ldr	r3, [r2, #4]
 80038d2:	400b      	ands	r3, r1
 80038d4:	68c1      	ldr	r1, [r0, #12]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 80038da:	22e1      	movs	r2, #225	@ 0xe1
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80038dc:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 80038de:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <HAL_RCC_ClockConfig+0x180>)
 80038e0:	03d2      	lsls	r2, r2, #15
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	bce0      	pop	{r5, r6, r7}
 80038e6:	46ba      	mov	sl, r7
 80038e8:	46b1      	mov	r9, r6
 80038ea:	46a8      	mov	r8, r5
 80038ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	43ab      	bics	r3, r5
 80038f2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	421d      	tst	r5, r3
 80038f8:	d0e6      	beq.n	80038c8 <HAL_RCC_ClockConfig+0xa4>
      return HAL_ERROR;
 80038fa:	2001      	movs	r0, #1
 80038fc:	e7f2      	b.n	80038e4 <HAL_RCC_ClockConfig+0xc0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	0192      	lsls	r2, r2, #6
 8003900:	d5a3      	bpl.n	800384a <HAL_RCC_ClockConfig+0x26>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003902:	2503      	movs	r5, #3
 8003904:	6872      	ldr	r2, [r6, #4]
 8003906:	43aa      	bics	r2, r5
 8003908:	4313      	orrs	r3, r2
 800390a:	6073      	str	r3, [r6, #4]
	return tick++;;
 800390c:	4b22      	ldr	r3, [pc, #136]	@ (8003998 <HAL_RCC_ClockConfig+0x174>)
 800390e:	469a      	mov	sl, r3
 8003910:	4652      	mov	r2, sl
 8003912:	681f      	ldr	r7, [r3, #0]
 8003914:	1c7b      	adds	r3, r7, #1
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	4690      	mov	r8, r2
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800391c:	320c      	adds	r2, #12
 800391e:	4694      	mov	ip, r2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	4a1e      	ldr	r2, [pc, #120]	@ (800399c <HAL_RCC_ClockConfig+0x178>)
 8003922:	4691      	mov	r9, r2
 8003924:	e006      	b.n	8003934 <HAL_RCC_ClockConfig+0x110>
	return tick++;;
 8003926:	2201      	movs	r2, #1
 8003928:	3301      	adds	r3, #1
 800392a:	4690      	mov	r8, r2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	1bda      	subs	r2, r3, r7
 800392e:	3a01      	subs	r2, #1
 8003930:	454a      	cmp	r2, r9
 8003932:	d829      	bhi.n	8003988 <HAL_RCC_ClockConfig+0x164>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003934:	4665      	mov	r5, ip
 8003936:	6872      	ldr	r2, [r6, #4]
 8003938:	402a      	ands	r2, r5
 800393a:	2a08      	cmp	r2, #8
 800393c:	d1f3      	bne.n	8003926 <HAL_RCC_ClockConfig+0x102>
 800393e:	4642      	mov	r2, r8
 8003940:	2a00      	cmp	r2, #0
 8003942:	d1b9      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x94>
 8003944:	e7ba      	b.n	80038bc <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	0392      	lsls	r2, r2, #14
 8003948:	d400      	bmi.n	800394c <HAL_RCC_ClockConfig+0x128>
 800394a:	e77e      	b.n	800384a <HAL_RCC_ClockConfig+0x26>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394c:	2503      	movs	r5, #3
 800394e:	6872      	ldr	r2, [r6, #4]
 8003950:	43aa      	bics	r2, r5
 8003952:	4313      	orrs	r3, r2
 8003954:	6073      	str	r3, [r6, #4]
	return tick++;;
 8003956:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <HAL_RCC_ClockConfig+0x174>)
 8003958:	469a      	mov	sl, r3
 800395a:	4652      	mov	r2, sl
 800395c:	681f      	ldr	r7, [r3, #0]
 800395e:	1c7b      	adds	r3, r7, #1
 8003960:	6013      	str	r3, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_RCC_ClockConfig+0x184>)
 8003964:	4694      	mov	ip, r2
	return tick++;;
 8003966:	2200      	movs	r2, #0
 8003968:	4690      	mov	r8, r2
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800396a:	320c      	adds	r2, #12
 800396c:	4467      	add	r7, ip
 800396e:	4694      	mov	ip, r2
 8003970:	e004      	b.n	800397c <HAL_RCC_ClockConfig+0x158>
	return tick++;;
 8003972:	2201      	movs	r2, #1
 8003974:	3301      	adds	r3, #1
 8003976:	4690      	mov	r8, r2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003978:	429f      	cmp	r7, r3
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x164>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800397c:	4665      	mov	r5, ip
 800397e:	6872      	ldr	r2, [r6, #4]
 8003980:	402a      	ands	r2, r5
 8003982:	2a04      	cmp	r2, #4
 8003984:	d1f5      	bne.n	8003972 <HAL_RCC_ClockConfig+0x14e>
 8003986:	e7da      	b.n	800393e <HAL_RCC_ClockConfig+0x11a>
 8003988:	4652      	mov	r2, sl
          return HAL_TIMEOUT;
 800398a:	2003      	movs	r0, #3
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e7a9      	b.n	80038e4 <HAL_RCC_ClockConfig+0xc0>
 8003990:	40022000 	.word	0x40022000
 8003994:	40021000 	.word	0x40021000
 8003998:	200002c4 	.word	0x200002c4
 800399c:	00001388 	.word	0x00001388
 80039a0:	fffff8ff 	.word	0xfffff8ff
 80039a4:	20000000 	.word	0x20000000
 80039a8:	0000138a 	.word	0x0000138a

080039ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	46de      	mov	lr, fp
 80039b0:	4657      	mov	r7, sl
 80039b2:	464e      	mov	r6, r9
 80039b4:	4645      	mov	r5, r8
 80039b6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80039b8:	680b      	ldr	r3, [r1, #0]
{ 
 80039ba:	b089      	sub	sp, #36	@ 0x24
 80039bc:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d07e      	beq.n	8003ac2 <HAL_GPIO_Init+0x116>
 80039c4:	2290      	movs	r2, #144	@ 0x90
  uint32_t position = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	05d2      	lsls	r2, r2, #23
 80039ca:	4290      	cmp	r0, r2
 80039cc:	d100      	bne.n	80039d0 <HAL_GPIO_Init+0x24>
 80039ce:	e0de      	b.n	8003b8e <HAL_GPIO_Init+0x1e2>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d0:	4acd      	ldr	r2, [pc, #820]	@ (8003d08 <HAL_GPIO_Init+0x35c>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d2:	4ece      	ldr	r6, [pc, #824]	@ (8003d0c <HAL_GPIO_Init+0x360>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d4:	4694      	mov	ip, r2
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80039d6:	2101      	movs	r1, #1
 80039d8:	9a01      	ldr	r2, [sp, #4]
 80039da:	4099      	lsls	r1, r3
 80039dc:	0014      	movs	r4, r2
 80039de:	400c      	ands	r4, r1
 80039e0:	46a1      	mov	r9, r4
    if(iocurrent)
 80039e2:	420a      	tst	r2, r1
 80039e4:	d069      	beq.n	8003aba <HAL_GPIO_Init+0x10e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80039e6:	465a      	mov	r2, fp
 80039e8:	6852      	ldr	r2, [r2, #4]
 80039ea:	005c      	lsls	r4, r3, #1
 80039ec:	4692      	mov	sl, r2
 80039ee:	0017      	movs	r7, r2
 80039f0:	2210      	movs	r2, #16
 80039f2:	4397      	bics	r7, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80039f4:	3a0d      	subs	r2, #13
 80039f6:	40a2      	lsls	r2, r4
 80039f8:	43d2      	mvns	r2, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fa:	2503      	movs	r5, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80039fc:	9202      	str	r2, [sp, #8]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fe:	4652      	mov	r2, sl
 8003a00:	4015      	ands	r5, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003a02:	465a      	mov	r2, fp
 8003a04:	6892      	ldr	r2, [r2, #8]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a06:	40a5      	lsls	r5, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003a08:	40a2      	lsls	r2, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a0a:	9504      	str	r5, [sp, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003a0c:	9203      	str	r2, [sp, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003a0e:	2f02      	cmp	r7, #2
 8003a10:	d05e      	beq.n	8003ad0 <HAL_GPIO_Init+0x124>
      temp = GPIOx->MODER;
 8003a12:	6802      	ldr	r2, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003a14:	9d02      	ldr	r5, [sp, #8]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a16:	3f01      	subs	r7, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003a18:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a1a:	9d04      	ldr	r5, [sp, #16]
 8003a1c:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 8003a1e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a20:	2f01      	cmp	r7, #1
 8003a22:	d800      	bhi.n	8003a26 <HAL_GPIO_Init+0x7a>
 8003a24:	e06f      	b.n	8003b06 <HAL_GPIO_Init+0x15a>
      temp = GPIOx->PUPDR;
 8003a26:	68c1      	ldr	r1, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a28:	9a02      	ldr	r2, [sp, #8]
 8003a2a:	400a      	ands	r2, r1
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003a2c:	9903      	ldr	r1, [sp, #12]
 8003a2e:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003a30:	2180      	movs	r1, #128	@ 0x80
      GPIOx->PUPDR = temp;
 8003a32:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003a34:	4652      	mov	r2, sl
 8003a36:	0549      	lsls	r1, r1, #21
 8003a38:	420a      	tst	r2, r1
 8003a3a:	d03e      	beq.n	8003aba <HAL_GPIO_Init+0x10e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3c:	4662      	mov	r2, ip
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4664      	mov	r4, ip
 8003a42:	6992      	ldr	r2, [r2, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003a44:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a46:	430a      	orrs	r2, r1
 8003a48:	61a2      	str	r2, [r4, #24]
 8003a4a:	69a2      	ldr	r2, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003a4c:	2403      	movs	r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	400a      	ands	r2, r1
 8003a50:	49af      	ldr	r1, [pc, #700]	@ (8003d10 <HAL_GPIO_Init+0x364>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003a52:	401c      	ands	r4, r3
 8003a54:	4688      	mov	r8, r1
 8003a56:	00a4      	lsls	r4, r4, #2
 8003a58:	40a5      	lsls	r5, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5a:	9207      	str	r2, [sp, #28]
 8003a5c:	9a07      	ldr	r2, [sp, #28]
        temp = SYSCFG->EXTICR[position >> 2];
 8003a5e:	089a      	lsrs	r2, r3, #2
 8003a60:	0092      	lsls	r2, r2, #2
 8003a62:	4442      	add	r2, r8
 8003a64:	6891      	ldr	r1, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003a66:	43a9      	bics	r1, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a68:	4daa      	ldr	r5, [pc, #680]	@ (8003d14 <HAL_GPIO_Init+0x368>)
 8003a6a:	42a8      	cmp	r0, r5
 8003a6c:	d100      	bne.n	8003a70 <HAL_GPIO_Init+0xc4>
 8003a6e:	e08a      	b.n	8003b86 <HAL_GPIO_Init+0x1da>
 8003a70:	4da9      	ldr	r5, [pc, #676]	@ (8003d18 <HAL_GPIO_Init+0x36c>)
 8003a72:	42a8      	cmp	r0, r5
 8003a74:	d063      	beq.n	8003b3e <HAL_GPIO_Init+0x192>
 8003a76:	4da9      	ldr	r5, [pc, #676]	@ (8003d1c <HAL_GPIO_Init+0x370>)
 8003a78:	42a8      	cmp	r0, r5
 8003a7a:	d100      	bne.n	8003a7e <HAL_GPIO_Init+0xd2>
 8003a7c:	e13f      	b.n	8003cfe <HAL_GPIO_Init+0x352>
 8003a7e:	2505      	movs	r5, #5
 8003a80:	40a5      	lsls	r5, r4
 8003a82:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a84:	6091      	str	r1, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a86:	4654      	mov	r4, sl
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a88:	4649      	mov	r1, r9
        temp = EXTI->IMR;
 8003a8a:	6832      	ldr	r2, [r6, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a8c:	43c9      	mvns	r1, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a8e:	03e4      	lsls	r4, r4, #15
 8003a90:	d45f      	bmi.n	8003b52 <HAL_GPIO_Init+0x1a6>
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a92:	4654      	mov	r4, sl
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a94:	400a      	ands	r2, r1
        EXTI->IMR = temp;
 8003a96:	6032      	str	r2, [r6, #0]
        temp = EXTI->EMR;
 8003a98:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a9a:	03a4      	lsls	r4, r4, #14
 8003a9c:	d460      	bmi.n	8003b60 <HAL_GPIO_Init+0x1b4>
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a9e:	4654      	mov	r4, sl
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003aa0:	400a      	ands	r2, r1
        EXTI->EMR = temp;
 8003aa2:	6072      	str	r2, [r6, #4]
        temp = EXTI->RTSR;
 8003aa4:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aa6:	02e4      	lsls	r4, r4, #11
 8003aa8:	d461      	bmi.n	8003b6e <HAL_GPIO_Init+0x1c2>
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aaa:	4654      	mov	r4, sl
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003aac:	400a      	ands	r2, r1
        EXTI->RTSR = temp;
 8003aae:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003ab0:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ab2:	02a4      	lsls	r4, r4, #10
 8003ab4:	d462      	bmi.n	8003b7c <HAL_GPIO_Init+0x1d0>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003ab6:	400a      	ands	r2, r1
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8003ab8:	60f2      	str	r2, [r6, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003aba:	9a01      	ldr	r2, [sp, #4]
      }
    }
    
    position++;
 8003abc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003abe:	40da      	lsrs	r2, r3
 8003ac0:	d189      	bne.n	80039d6 <HAL_GPIO_Init+0x2a>
  } 
}
 8003ac2:	b009      	add	sp, #36	@ 0x24
 8003ac4:	bcf0      	pop	{r4, r5, r6, r7}
 8003ac6:	46bb      	mov	fp, r7
 8003ac8:	46b2      	mov	sl, r6
 8003aca:	46a9      	mov	r9, r5
 8003acc:	46a0      	mov	r8, r4
 8003ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->AFR[position >> 3];
 8003ad0:	08df      	lsrs	r7, r3, #3
 8003ad2:	00bf      	lsls	r7, r7, #2
 8003ad4:	19c5      	adds	r5, r0, r7
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003ad6:	2707      	movs	r7, #7
 8003ad8:	401f      	ands	r7, r3
 8003ada:	00bf      	lsls	r7, r7, #2
 8003adc:	46b8      	mov	r8, r7
        temp = GPIOx->AFR[position >> 3];
 8003ade:	6a2a      	ldr	r2, [r5, #32]
 8003ae0:	9505      	str	r5, [sp, #20]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003ae2:	270f      	movs	r7, #15
 8003ae4:	4645      	mov	r5, r8
 8003ae6:	40af      	lsls	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003ae8:	465d      	mov	r5, fp
 8003aea:	692d      	ldr	r5, [r5, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003aec:	43ba      	bics	r2, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003aee:	002f      	movs	r7, r5
 8003af0:	4645      	mov	r5, r8
 8003af2:	40af      	lsls	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8003af4:	9d05      	ldr	r5, [sp, #20]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003af6:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003af8:	622a      	str	r2, [r5, #32]
      temp = GPIOx->MODER;
 8003afa:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003afc:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003afe:	9d04      	ldr	r5, [sp, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003b00:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b02:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8003b04:	6005      	str	r5, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8003b06:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b08:	9a02      	ldr	r2, [sp, #8]
 8003b0a:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003b0c:	465a      	mov	r2, fp
 8003b0e:	68d7      	ldr	r7, [r2, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b10:	4652      	mov	r2, sl
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003b12:	40a7      	lsls	r7, r4
 8003b14:	003c      	movs	r4, r7
 8003b16:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003b18:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b1a:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003b1c:	438c      	bics	r4, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b1e:	0911      	lsrs	r1, r2, #4
 8003b20:	4099      	lsls	r1, r3
 8003b22:	4321      	orrs	r1, r4
        GPIOx->OTYPER = temp;
 8003b24:	6041      	str	r1, [r0, #4]
      temp = GPIOx->PUPDR;
 8003b26:	68c1      	ldr	r1, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b28:	9a02      	ldr	r2, [sp, #8]
    position++;
 8003b2a:	3301      	adds	r3, #1
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b2c:	400a      	ands	r2, r1
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003b2e:	9903      	ldr	r1, [sp, #12]
 8003b30:	430a      	orrs	r2, r1
      GPIOx->PUPDR = temp;
 8003b32:	60c2      	str	r2, [r0, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003b34:	9a01      	ldr	r2, [sp, #4]
 8003b36:	40da      	lsrs	r2, r3
 8003b38:	d000      	beq.n	8003b3c <HAL_GPIO_Init+0x190>
 8003b3a:	e74c      	b.n	80039d6 <HAL_GPIO_Init+0x2a>
 8003b3c:	e7c1      	b.n	8003ac2 <HAL_GPIO_Init+0x116>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b3e:	2502      	movs	r5, #2
 8003b40:	40a5      	lsls	r5, r4
 8003b42:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b44:	6091      	str	r1, [r2, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b46:	4654      	mov	r4, sl
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003b48:	4649      	mov	r1, r9
        temp = EXTI->IMR;
 8003b4a:	6832      	ldr	r2, [r6, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003b4c:	43c9      	mvns	r1, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b4e:	03e4      	lsls	r4, r4, #15
 8003b50:	d59f      	bpl.n	8003a92 <HAL_GPIO_Init+0xe6>
          SET_BIT(temp, iocurrent); 
 8003b52:	464c      	mov	r4, r9
 8003b54:	4322      	orrs	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b56:	4654      	mov	r4, sl
        EXTI->IMR = temp;
 8003b58:	6032      	str	r2, [r6, #0]
        temp = EXTI->EMR;
 8003b5a:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b5c:	03a4      	lsls	r4, r4, #14
 8003b5e:	d59e      	bpl.n	8003a9e <HAL_GPIO_Init+0xf2>
          SET_BIT(temp, iocurrent); 
 8003b60:	464c      	mov	r4, r9
 8003b62:	4322      	orrs	r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b64:	4654      	mov	r4, sl
        EXTI->EMR = temp;
 8003b66:	6072      	str	r2, [r6, #4]
        temp = EXTI->RTSR;
 8003b68:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b6a:	02e4      	lsls	r4, r4, #11
 8003b6c:	d59d      	bpl.n	8003aaa <HAL_GPIO_Init+0xfe>
          SET_BIT(temp, iocurrent); 
 8003b6e:	464c      	mov	r4, r9
 8003b70:	4322      	orrs	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b72:	4654      	mov	r4, sl
        EXTI->RTSR = temp;
 8003b74:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003b76:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b78:	02a4      	lsls	r4, r4, #10
 8003b7a:	d59c      	bpl.n	8003ab6 <HAL_GPIO_Init+0x10a>
          SET_BIT(temp, iocurrent); 
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	000a      	movs	r2, r1
        EXTI->FTSR = temp;
 8003b82:	60f2      	str	r2, [r6, #12]
 8003b84:	e799      	b.n	8003aba <HAL_GPIO_Init+0x10e>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b86:	2501      	movs	r5, #1
 8003b88:	40a5      	lsls	r5, r4
 8003b8a:	4329      	orrs	r1, r5
 8003b8c:	e77a      	b.n	8003a84 <HAL_GPIO_Init+0xd8>
  uint32_t position = 0x00U;
 8003b8e:	2300      	movs	r3, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b90:	9c01      	ldr	r4, [sp, #4]
 8003b92:	e04c      	b.n	8003c2e <HAL_GPIO_Init+0x282>
      temp = GPIOx->MODER;
 8003b94:	6805      	ldr	r5, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003b96:	002e      	movs	r6, r5
 8003b98:	9d01      	ldr	r5, [sp, #4]
 8003b9a:	402e      	ands	r6, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9c:	0035      	movs	r5, r6
 8003b9e:	9e03      	ldr	r6, [sp, #12]
 8003ba0:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;
 8003ba2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ba4:	4646      	mov	r6, r8
 8003ba6:	3e01      	subs	r6, #1
 8003ba8:	2e01      	cmp	r6, #1
 8003baa:	d800      	bhi.n	8003bae <HAL_GPIO_Init+0x202>
 8003bac:	e085      	b.n	8003cba <HAL_GPIO_Init+0x30e>
      temp = GPIOx->PUPDR;
 8003bae:	68c1      	ldr	r1, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb0:	9d01      	ldr	r5, [sp, #4]
 8003bb2:	4029      	ands	r1, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003bb4:	9d02      	ldr	r5, [sp, #8]
 8003bb6:	4329      	orrs	r1, r5
      GPIOx->PUPDR = temp;
 8003bb8:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003bba:	2180      	movs	r1, #128	@ 0x80
 8003bbc:	0549      	lsls	r1, r1, #21
 8003bbe:	420a      	tst	r2, r1
 8003bc0:	d030      	beq.n	8003c24 <HAL_GPIO_Init+0x278>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	2601      	movs	r6, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003bc4:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc6:	4d50      	ldr	r5, [pc, #320]	@ (8003d08 <HAL_GPIO_Init+0x35c>)
 8003bc8:	69a9      	ldr	r1, [r5, #24]
 8003bca:	4331      	orrs	r1, r6
 8003bcc:	61a9      	str	r1, [r5, #24]
 8003bce:	69a9      	ldr	r1, [r5, #24]
 8003bd0:	4d4f      	ldr	r5, [pc, #316]	@ (8003d10 <HAL_GPIO_Init+0x364>)
 8003bd2:	4031      	ands	r1, r6
 8003bd4:	46a8      	mov	r8, r5
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003bd6:	3602      	adds	r6, #2
 8003bd8:	401e      	ands	r6, r3
 8003bda:	00b6      	lsls	r6, r6, #2
 8003bdc:	40b7      	lsls	r7, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bde:	9107      	str	r1, [sp, #28]
 8003be0:	9907      	ldr	r1, [sp, #28]
        temp = SYSCFG->EXTICR[position >> 2];
 8003be2:	0899      	lsrs	r1, r3, #2
 8003be4:	0089      	lsls	r1, r1, #2
 8003be6:	4441      	add	r1, r8
 8003be8:	688d      	ldr	r5, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003bea:	43bd      	bics	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8003bec:	608d      	str	r5, [r1, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003bee:	4665      	mov	r5, ip
        temp = EXTI->IMR;
 8003bf0:	4946      	ldr	r1, [pc, #280]	@ (8003d0c <HAL_GPIO_Init+0x360>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003bf2:	43ed      	mvns	r5, r5
        temp = EXTI->IMR;
 8003bf4:	6809      	ldr	r1, [r1, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bf6:	03d6      	lsls	r6, r2, #15
 8003bf8:	d47e      	bmi.n	8003cf8 <HAL_GPIO_Init+0x34c>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003bfa:	4029      	ands	r1, r5
        EXTI->IMR = temp;
 8003bfc:	4e43      	ldr	r6, [pc, #268]	@ (8003d0c <HAL_GPIO_Init+0x360>)
 8003bfe:	6031      	str	r1, [r6, #0]
        temp = EXTI->EMR;
 8003c00:	6871      	ldr	r1, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c02:	0396      	lsls	r6, r2, #14
 8003c04:	d475      	bmi.n	8003cf2 <HAL_GPIO_Init+0x346>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003c06:	4029      	ands	r1, r5
        EXTI->EMR = temp;
 8003c08:	4e40      	ldr	r6, [pc, #256]	@ (8003d0c <HAL_GPIO_Init+0x360>)
 8003c0a:	6071      	str	r1, [r6, #4]
        temp = EXTI->RTSR;
 8003c0c:	68b1      	ldr	r1, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c0e:	02d6      	lsls	r6, r2, #11
 8003c10:	d46c      	bmi.n	8003cec <HAL_GPIO_Init+0x340>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003c12:	4029      	ands	r1, r5
        EXTI->RTSR = temp;
 8003c14:	4e3d      	ldr	r6, [pc, #244]	@ (8003d0c <HAL_GPIO_Init+0x360>)
 8003c16:	60b1      	str	r1, [r6, #8]
        temp = EXTI->FTSR;
 8003c18:	68f1      	ldr	r1, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c1a:	0292      	lsls	r2, r2, #10
 8003c1c:	d463      	bmi.n	8003ce6 <HAL_GPIO_Init+0x33a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003c1e:	400d      	ands	r5, r1
        EXTI->FTSR = temp;
 8003c20:	493a      	ldr	r1, [pc, #232]	@ (8003d0c <HAL_GPIO_Init+0x360>)
 8003c22:	60cd      	str	r5, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003c24:	0022      	movs	r2, r4
    position++;
 8003c26:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003c28:	40da      	lsrs	r2, r3
 8003c2a:	d100      	bne.n	8003c2e <HAL_GPIO_Init+0x282>
 8003c2c:	e749      	b.n	8003ac2 <HAL_GPIO_Init+0x116>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c2e:	2101      	movs	r1, #1
 8003c30:	4099      	lsls	r1, r3
 8003c32:	000a      	movs	r2, r1
 8003c34:	4022      	ands	r2, r4
 8003c36:	4694      	mov	ip, r2
    if(iocurrent)
 8003c38:	4221      	tst	r1, r4
 8003c3a:	d0f3      	beq.n	8003c24 <HAL_GPIO_Init+0x278>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003c3c:	465a      	mov	r2, fp
 8003c3e:	6852      	ldr	r2, [r2, #4]
 8003c40:	2610      	movs	r6, #16
 8003c42:	0015      	movs	r5, r2
 8003c44:	43b5      	bics	r5, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c46:	3e0d      	subs	r6, #13
 8003c48:	005f      	lsls	r7, r3, #1
 8003c4a:	4016      	ands	r6, r2
 8003c4c:	40be      	lsls	r6, r7
 8003c4e:	9603      	str	r6, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003c50:	465e      	mov	r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003c52:	46a8      	mov	r8, r5
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003c54:	2503      	movs	r5, #3
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003c56:	68b6      	ldr	r6, [r6, #8]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003c58:	40bd      	lsls	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003c5a:	40be      	lsls	r6, r7
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003c5c:	43ed      	mvns	r5, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003c5e:	9602      	str	r6, [sp, #8]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003c60:	4646      	mov	r6, r8
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003c62:	9501      	str	r5, [sp, #4]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003c64:	2e02      	cmp	r6, #2
 8003c66:	d195      	bne.n	8003b94 <HAL_GPIO_Init+0x1e8>
        temp = GPIOx->AFR[position >> 3];
 8003c68:	08de      	lsrs	r6, r3, #3
 8003c6a:	00b6      	lsls	r6, r6, #2
 8003c6c:	46b4      	mov	ip, r6
 8003c6e:	2690      	movs	r6, #144	@ 0x90
 8003c70:	05f6      	lsls	r6, r6, #23
 8003c72:	46b0      	mov	r8, r6
 8003c74:	44c4      	add	ip, r8
 8003c76:	4666      	mov	r6, ip
 8003c78:	6a36      	ldr	r6, [r6, #32]
 8003c7a:	46b2      	mov	sl, r6
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003c7c:	2607      	movs	r6, #7
 8003c7e:	401e      	ands	r6, r3
 8003c80:	00b6      	lsls	r6, r6, #2
 8003c82:	46b1      	mov	r9, r6
 8003c84:	260f      	movs	r6, #15
 8003c86:	464d      	mov	r5, r9
 8003c88:	40ae      	lsls	r6, r5
 8003c8a:	46b0      	mov	r8, r6
 8003c8c:	4656      	mov	r6, sl
 8003c8e:	4645      	mov	r5, r8
 8003c90:	43ae      	bics	r6, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003c92:	465d      	mov	r5, fp
 8003c94:	692d      	ldr	r5, [r5, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003c96:	46b2      	mov	sl, r6
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003c98:	002e      	movs	r6, r5
 8003c9a:	464d      	mov	r5, r9
 8003c9c:	40ae      	lsls	r6, r5
 8003c9e:	46b0      	mov	r8, r6
 8003ca0:	4656      	mov	r6, sl
 8003ca2:	4645      	mov	r5, r8
 8003ca4:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3U] = temp;
 8003ca6:	4665      	mov	r5, ip
 8003ca8:	622e      	str	r6, [r5, #32]
      temp = GPIOx->MODER;
 8003caa:	6805      	ldr	r5, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003cac:	002e      	movs	r6, r5
 8003cae:	9d01      	ldr	r5, [sp, #4]
 8003cb0:	402e      	ands	r6, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb2:	0035      	movs	r5, r6
 8003cb4:	9e03      	ldr	r6, [sp, #12]
 8003cb6:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;
 8003cb8:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8003cba:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cbc:	9d01      	ldr	r5, [sp, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cbe:	0912      	lsrs	r2, r2, #4
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cc0:	402e      	ands	r6, r5
 8003cc2:	46b4      	mov	ip, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003cc4:	465e      	mov	r6, fp
 8003cc6:	68f6      	ldr	r6, [r6, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cc8:	409a      	lsls	r2, r3
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003cca:	40be      	lsls	r6, r7
 8003ccc:	4667      	mov	r7, ip
 8003cce:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8003cd0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003cd2:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003cd4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cd6:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8003cd8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003cda:	68c2      	ldr	r2, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003cdc:	9902      	ldr	r1, [sp, #8]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cde:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003ce0:	430a      	orrs	r2, r1
      GPIOx->PUPDR = temp;
 8003ce2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003ce4:	e79e      	b.n	8003c24 <HAL_GPIO_Init+0x278>
          SET_BIT(temp, iocurrent); 
 8003ce6:	4665      	mov	r5, ip
 8003ce8:	430d      	orrs	r5, r1
 8003cea:	e799      	b.n	8003c20 <HAL_GPIO_Init+0x274>
          SET_BIT(temp, iocurrent); 
 8003cec:	4666      	mov	r6, ip
 8003cee:	4331      	orrs	r1, r6
 8003cf0:	e790      	b.n	8003c14 <HAL_GPIO_Init+0x268>
          SET_BIT(temp, iocurrent); 
 8003cf2:	4666      	mov	r6, ip
 8003cf4:	4331      	orrs	r1, r6
 8003cf6:	e787      	b.n	8003c08 <HAL_GPIO_Init+0x25c>
          SET_BIT(temp, iocurrent); 
 8003cf8:	4666      	mov	r6, ip
 8003cfa:	4331      	orrs	r1, r6
 8003cfc:	e77e      	b.n	8003bfc <HAL_GPIO_Init+0x250>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfe:	2503      	movs	r5, #3
 8003d00:	40a5      	lsls	r5, r4
 8003d02:	4329      	orrs	r1, r5
 8003d04:	e6be      	b.n	8003a84 <HAL_GPIO_Init+0xd8>
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40010400 	.word	0x40010400
 8003d10:	40010000 	.word	0x40010000
 8003d14:	48000400 	.word	0x48000400
 8003d18:	48000800 	.word	0x48000800
 8003d1c:	48000c00 	.word	0x48000c00

08003d20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d24:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8003d26:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d28:	6281      	str	r1, [r0, #40]	@ 0x28
}										  
 8003d2a:	e7fc      	b.n	8003d26 <HAL_GPIO_WritePin+0x6>

08003d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003d30:	d100      	bne.n	8003d34 <HAL_UART_Init+0x8>
 8003d32:	e090      	b.n	8003e56 <HAL_UART_Init+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003d34:	2369      	movs	r3, #105	@ 0x69
 8003d36:	5cc3      	ldrb	r3, [r0, r3]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Init+0x16>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	3368      	adds	r3, #104	@ 0x68
 8003d40:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d42:	2369      	movs	r3, #105	@ 0x69
 8003d44:	2224      	movs	r2, #36	@ 0x24
 8003d46:	54e2      	strb	r2, [r4, r3]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003d48:	6825      	ldr	r5, [r4, #0]
 8003d4a:	3a23      	subs	r2, #35	@ 0x23
 8003d4c:	682b      	ldr	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d4e:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003d50:	4393      	bics	r3, r2
 8003d52:	602b      	str	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d54:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d56:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d58:	4303      	orrs	r3, r0
 8003d5a:	6960      	ldr	r0, [r4, #20]
 8003d5c:	69e2      	ldr	r2, [r4, #28]
 8003d5e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d60:	483e      	ldr	r0, [pc, #248]	@ (8003e5c <HAL_UART_Init+0x130>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d62:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003d64:	4001      	ands	r1, r0
 8003d66:	430b      	orrs	r3, r1
 8003d68:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6a:	686b      	ldr	r3, [r5, #4]
 8003d6c:	493c      	ldr	r1, [pc, #240]	@ (8003e60 <HAL_UART_Init+0x134>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d6e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d70:	400b      	ands	r3, r1
 8003d72:	68e1      	ldr	r1, [r4, #12]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d78:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d7a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003d7c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003d7e:	4839      	ldr	r0, [pc, #228]	@ (8003e64 <HAL_UART_Init+0x138>)
 8003d80:	4001      	ands	r1, r0
 8003d82:	430b      	orrs	r3, r1
 8003d84:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d86:	4b38      	ldr	r3, [pc, #224]	@ (8003e68 <HAL_UART_Init+0x13c>)
 8003d88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d925      	bls.n	8003de0 <HAL_UART_Init+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d94:	2380      	movs	r3, #128	@ 0x80
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d044      	beq.n	8003e26 <HAL_UART_Init+0xfa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d9c:	23e1      	movs	r3, #225	@ 0xe1
 8003d9e:	6861      	ldr	r1, [r4, #4]
 8003da0:	03db      	lsls	r3, r3, #15
 8003da2:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003da4:	469c      	mov	ip, r3
 8003da6:	4460      	add	r0, ip
 8003da8:	f7fc fa3a 	bl	8000220 <__udivsi3>
 8003dac:	0400      	lsls	r0, r0, #16
 8003dae:	0c00      	lsrs	r0, r0, #16
 8003db0:	60e8      	str	r0, [r5, #12]
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003db2:	686b      	ldr	r3, [r5, #4]
 8003db4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e6c <HAL_UART_Init+0x140>)
  huart->gState  = HAL_UART_STATE_READY;
 8003db6:	2169      	movs	r1, #105	@ 0x69
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003db8:	4013      	ands	r3, r2
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003dba:	2208      	movs	r2, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003dbc:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003dbe:	68ab      	ldr	r3, [r5, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dc0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003dc2:	4393      	bics	r3, r2
 8003dc4:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	3a07      	subs	r2, #7
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	602b      	str	r3, [r5, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dce:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8003dd0:	321f      	adds	r2, #31
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 8003dd4:	5462      	strb	r2, [r4, r1]
  huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	3101      	adds	r1, #1
 8003dd8:	5462      	strb	r2, [r4, r1]
  __HAL_UNLOCK(huart);
 8003dda:	3248      	adds	r2, #72	@ 0x48
 8003ddc:	54a3      	strb	r3, [r4, r2]
}
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	4923      	ldr	r1, [pc, #140]	@ (8003e70 <HAL_UART_Init+0x144>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de4:	2180      	movs	r1, #128	@ 0x80
 8003de6:	0209      	lsls	r1, r1, #8
 8003de8:	428a      	cmp	r2, r1
 8003dea:	d011      	beq.n	8003e10 <HAL_UART_Init+0xe4>
    switch (clocksource)
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d0d5      	beq.n	8003d9c <HAL_UART_Init+0x70>
 8003df0:	d807      	bhi.n	8003e02 <HAL_UART_Init+0xd6>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0d2      	beq.n	8003d9c <HAL_UART_Init+0x70>
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d12d      	bne.n	8003e56 <HAL_UART_Init+0x12a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003dfa:	6861      	ldr	r1, [r4, #4]
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <HAL_UART_Init+0x148>)
 8003dfe:	0848      	lsrs	r0, r1, #1
 8003e00:	e7d0      	b.n	8003da4 <HAL_UART_Init+0x78>
    switch (clocksource)
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d127      	bne.n	8003e56 <HAL_UART_Init+0x12a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e06:	2380      	movs	r3, #128	@ 0x80
 8003e08:	6861      	ldr	r1, [r4, #4]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	0848      	lsrs	r0, r1, #1
 8003e0e:	e7c9      	b.n	8003da4 <HAL_UART_Init+0x78>
    switch (clocksource)
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d008      	beq.n	8003e26 <HAL_UART_Init+0xfa>
 8003e14:	d816      	bhi.n	8003e44 <HAL_UART_Init+0x118>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_UART_Init+0xfa>
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d119      	bne.n	8003e52 <HAL_UART_Init+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e1e:	6861      	ldr	r1, [r4, #4]
 8003e20:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_UART_Init+0x14c>)
 8003e22:	0848      	lsrs	r0, r1, #1
 8003e24:	e003      	b.n	8003e2e <HAL_UART_Init+0x102>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e26:	23e1      	movs	r3, #225	@ 0xe1
 8003e28:	6861      	ldr	r1, [r4, #4]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	0848      	lsrs	r0, r1, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e2e:	469c      	mov	ip, r3
 8003e30:	4460      	add	r0, ip
 8003e32:	f7fc f9f5 	bl	8000220 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8003e36:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_UART_Init+0x150>)
 8003e38:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e3a:	0700      	lsls	r0, r0, #28
 8003e3c:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8003e3e:	4303      	orrs	r3, r0
 8003e40:	60eb      	str	r3, [r5, #12]
  return ret;
 8003e42:	e7b6      	b.n	8003db2 <HAL_UART_Init+0x86>
    switch (clocksource)
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d104      	bne.n	8003e52 <HAL_UART_Init+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	6861      	ldr	r1, [r4, #4]
 8003e4c:	025b      	lsls	r3, r3, #9
 8003e4e:	0848      	lsrs	r0, r1, #1
 8003e50:	e7ed      	b.n	8003e2e <HAL_UART_Init+0x102>
    huart->Instance->BRR = brrtemp;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60eb      	str	r3, [r5, #12]
    return HAL_ERROR;
 8003e56:	2001      	movs	r0, #1
 8003e58:	e7c1      	b.n	8003dde <HAL_UART_Init+0xb2>
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	ffff69f3 	.word	0xffff69f3
 8003e60:	ffffcfff 	.word	0xffffcfff
 8003e64:	fffff4ff 	.word	0xfffff4ff
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	fffff7ff 	.word	0xfffff7ff
 8003e70:	080045b0 	.word	0x080045b0
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	01e84800 	.word	0x01e84800
 8003e7c:	0000fff0 	.word	0x0000fff0

08003e80 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e82:	4645      	mov	r5, r8
 8003e84:	46de      	mov	lr, fp
 8003e86:	4657      	mov	r7, sl
 8003e88:	464e      	mov	r6, r9
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003e8a:	246a      	movs	r4, #106	@ 0x6a
{
 8003e8c:	b5e0      	push	{r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8003e8e:	5d05      	ldrb	r5, [r0, r4]
{
 8003e90:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY)
 8003e92:	2d20      	cmp	r5, #32
 8003e94:	d154      	bne.n	8003f40 <HAL_UART_Receive+0xc0>
  {
    if((pData == NULL ) || (Size == 0U))
 8003e96:	2900      	cmp	r1, #0
 8003e98:	d046      	beq.n	8003f28 <HAL_UART_Receive+0xa8>
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d044      	beq.n	8003f28 <HAL_UART_Receive+0xa8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9e:	2580      	movs	r5, #128	@ 0x80
 8003ea0:	6887      	ldr	r7, [r0, #8]
 8003ea2:	016d      	lsls	r5, r5, #5
 8003ea4:	42af      	cmp	r7, r5
 8003ea6:	d035      	beq.n	8003f14 <HAL_UART_Receive+0x94>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea8:	2568      	movs	r5, #104	@ 0x68
 8003eaa:	5d46      	ldrb	r6, [r0, r5]
 8003eac:	2e01      	cmp	r6, #1
 8003eae:	d047      	beq.n	8003f40 <HAL_UART_Receive+0xc0>
 8003eb0:	2601      	movs	r6, #1
 8003eb2:	5546      	strb	r6, [r0, r5]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	2500      	movs	r5, #0
 8003eb6:	66c5      	str	r5, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb8:	3522      	adds	r5, #34	@ 0x22
 8003eba:	5505      	strb	r5, [r0, r4]
	return tick++;;
 8003ebc:	4c72      	ldr	r4, [pc, #456]	@ (8004088 <HAL_UART_Receive+0x208>)
 8003ebe:	6825      	ldr	r5, [r4, #0]
 8003ec0:	1c6e      	adds	r6, r5, #1
 8003ec2:	6026      	str	r6, [r4, #0]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8003ec4:	2658      	movs	r6, #88	@ 0x58
 8003ec6:	5382      	strh	r2, [r0, r6]
    huart->RxXferCount = Size;
 8003ec8:	3602      	adds	r6, #2
	return tick++;;
 8003eca:	9500      	str	r5, [sp, #0]
    huart->RxXferCount = Size;
 8003ecc:	5382      	strh	r2, [r0, r6]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ece:	2f00      	cmp	r7, #0
 8003ed0:	d04a      	beq.n	8003f68 <HAL_UART_Receive+0xe8>
    uhMask = huart->Mask;
 8003ed2:	225c      	movs	r2, #92	@ 0x5c
 8003ed4:	5a86      	ldrh	r6, [r0, r2]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8003ed6:	225a      	movs	r2, #90	@ 0x5a
 8003ed8:	5a82      	ldrh	r2, [r0, r2]
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	d03c      	beq.n	8003f58 <HAL_UART_Receive+0xd8>
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	d000      	beq.n	8003ee4 <HAL_UART_Receive+0x64>
 8003ee2:	e076      	b.n	8003fd2 <HAL_UART_Receive+0x152>
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	2380      	movs	r3, #128	@ 0x80
 8003ee6:	015b      	lsls	r3, r3, #5
      huart->RxXferCount--;
 8003ee8:	255a      	movs	r5, #90	@ 0x5a
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	2420      	movs	r4, #32
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eec:	469c      	mov	ip, r3
      huart->RxXferCount--;
 8003eee:	5b43      	ldrh	r3, [r0, r5]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef0:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	5343      	strh	r3, [r0, r5]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef8:	69d3      	ldr	r3, [r2, #28]
 8003efa:	421c      	tst	r4, r3
 8003efc:	d0fc      	beq.n	8003ef8 <HAL_UART_Receive+0x78>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efe:	4567      	cmp	r7, ip
 8003f00:	d020      	beq.n	8003f44 <HAL_UART_Receive+0xc4>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
        pData +=2U;
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f02:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8003f04:	4033      	ands	r3, r6
 8003f06:	700b      	strb	r3, [r1, #0]
    while(huart->RxXferCount > 0U)
 8003f08:	5b43      	ldrh	r3, [r0, r5]
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f0a:	3101      	adds	r1, #1
    while(huart->RxXferCount > 0U)
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d023      	beq.n	8003f58 <HAL_UART_Receive+0xd8>
 8003f10:	6887      	ldr	r7, [r0, #8]
 8003f12:	e7ec      	b.n	8003eee <HAL_UART_Receive+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f14:	6905      	ldr	r5, [r0, #16]
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	d10e      	bne.n	8003f38 <HAL_UART_Receive+0xb8>
      if((((uint32_t)pData)&1U) != 0U)
 8003f1a:	3501      	adds	r5, #1
 8003f1c:	002e      	movs	r6, r5
 8003f1e:	400e      	ands	r6, r1
 8003f20:	46a9      	mov	r9, r5
 8003f22:	46b0      	mov	r8, r6
 8003f24:	4229      	tst	r1, r5
 8003f26:	d03d      	beq.n	8003fa4 <HAL_UART_Receive+0x124>
      return  HAL_ERROR;
 8003f28:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f2a:	b003      	add	sp, #12
 8003f2c:	bcf0      	pop	{r4, r5, r6, r7}
 8003f2e:	46bb      	mov	fp, r7
 8003f30:	46b2      	mov	sl, r6
 8003f32:	46a9      	mov	r9, r5
 8003f34:	46a0      	mov	r8, r4
 8003f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8003f38:	2568      	movs	r5, #104	@ 0x68
 8003f3a:	5d46      	ldrb	r6, [r0, r5]
 8003f3c:	2e01      	cmp	r6, #1
 8003f3e:	d11a      	bne.n	8003f76 <HAL_UART_Receive+0xf6>
 8003f40:	2002      	movs	r0, #2
 8003f42:	e7f2      	b.n	8003f2a <HAL_UART_Receive+0xaa>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	6903      	ldr	r3, [r0, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1db      	bne.n	8003f02 <HAL_UART_Receive+0x82>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f4a:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8003f4c:	4033      	ands	r3, r6
 8003f4e:	800b      	strh	r3, [r1, #0]
    while(huart->RxXferCount > 0U)
 8003f50:	5b43      	ldrh	r3, [r0, r5]
        pData +=2U;
 8003f52:	3102      	adds	r1, #2
    while(huart->RxXferCount > 0U)
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1db      	bne.n	8003f10 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 8003f58:	236a      	movs	r3, #106	@ 0x6a
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(huart);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	3b02      	subs	r3, #2
 8003f62:	54c2      	strb	r2, [r0, r3]
    return HAL_OK;
 8003f64:	2000      	movs	r0, #0
 8003f66:	e7e0      	b.n	8003f2a <HAL_UART_Receive+0xaa>
    UART_MASK_COMPUTATION(huart);
 8003f68:	6902      	ldr	r2, [r0, #16]
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	d116      	bne.n	8003f9c <HAL_UART_Receive+0x11c>
 8003f6e:	26ff      	movs	r6, #255	@ 0xff
 8003f70:	325c      	adds	r2, #92	@ 0x5c
 8003f72:	5286      	strh	r6, [r0, r2]
 8003f74:	e7af      	b.n	8003ed6 <HAL_UART_Receive+0x56>
    __HAL_LOCK(huart);
 8003f76:	2601      	movs	r6, #1
 8003f78:	5546      	strb	r6, [r0, r5]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7a:	2500      	movs	r5, #0
 8003f7c:	66c5      	str	r5, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f7e:	3522      	adds	r5, #34	@ 0x22
 8003f80:	5505      	strb	r5, [r0, r4]
	return tick++;;
 8003f82:	4c41      	ldr	r4, [pc, #260]	@ (8004088 <HAL_UART_Receive+0x208>)
 8003f84:	6825      	ldr	r5, [r4, #0]
 8003f86:	1c6e      	adds	r6, r5, #1
 8003f88:	6026      	str	r6, [r4, #0]
    huart->RxXferSize = Size;
 8003f8a:	2658      	movs	r6, #88	@ 0x58
 8003f8c:	5382      	strh	r2, [r0, r6]
    huart->RxXferCount = Size;
 8003f8e:	3602      	adds	r6, #2
 8003f90:	5382      	strh	r2, [r0, r6]
    UART_MASK_COMPUTATION(huart);
 8003f92:	225c      	movs	r2, #92	@ 0x5c
 8003f94:	36a5      	adds	r6, #165	@ 0xa5
	return tick++;;
 8003f96:	9500      	str	r5, [sp, #0]
    UART_MASK_COMPUTATION(huart);
 8003f98:	5286      	strh	r6, [r0, r2]
 8003f9a:	e79c      	b.n	8003ed6 <HAL_UART_Receive+0x56>
 8003f9c:	225c      	movs	r2, #92	@ 0x5c
 8003f9e:	267f      	movs	r6, #127	@ 0x7f
 8003fa0:	5286      	strh	r6, [r0, r2]
 8003fa2:	e798      	b.n	8003ed6 <HAL_UART_Receive+0x56>
    __HAL_LOCK(huart);
 8003fa4:	2668      	movs	r6, #104	@ 0x68
 8003fa6:	5d85      	ldrb	r5, [r0, r6]
 8003fa8:	2d01      	cmp	r5, #1
 8003faa:	d0c9      	beq.n	8003f40 <HAL_UART_Receive+0xc0>
 8003fac:	464d      	mov	r5, r9
 8003fae:	5585      	strb	r5, [r0, r6]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	4645      	mov	r5, r8
 8003fb2:	66c5      	str	r5, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb4:	2522      	movs	r5, #34	@ 0x22
 8003fb6:	5505      	strb	r5, [r0, r4]
	return tick++;;
 8003fb8:	4c33      	ldr	r4, [pc, #204]	@ (8004088 <HAL_UART_Receive+0x208>)
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	1c6e      	adds	r6, r5, #1
 8003fbe:	6026      	str	r6, [r4, #0]
    huart->RxXferSize = Size;
 8003fc0:	2658      	movs	r6, #88	@ 0x58
 8003fc2:	5382      	strh	r2, [r0, r6]
    huart->RxXferCount = Size;
 8003fc4:	3602      	adds	r6, #2
 8003fc6:	5382      	strh	r2, [r0, r6]
    UART_MASK_COMPUTATION(huart);
 8003fc8:	225c      	movs	r2, #92	@ 0x5c
 8003fca:	4e30      	ldr	r6, [pc, #192]	@ (800408c <HAL_UART_Receive+0x20c>)
	return tick++;;
 8003fcc:	9500      	str	r5, [sp, #0]
    UART_MASK_COMPUTATION(huart);
 8003fce:	5286      	strh	r6, [r0, r2]
 8003fd0:	e781      	b.n	8003ed6 <HAL_UART_Receive+0x56>
 8003fd2:	6822      	ldr	r2, [r4, #0]
 8003fd4:	4694      	mov	ip, r2
    while(huart->RxXferCount > 0U)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	9201      	str	r2, [sp, #4]
      huart->RxXferCount--;
 8003fda:	325a      	adds	r2, #90	@ 0x5a
 8003fdc:	4690      	mov	r8, r2
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fde:	3a3a      	subs	r2, #58	@ 0x3a
 8003fe0:	4692      	mov	sl, r2
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe2:	2280      	movs	r2, #128	@ 0x80
 8003fe4:	0152      	lsls	r2, r2, #5
 8003fe6:	4691      	mov	r9, r2
      huart->RxXferCount--;
 8003fe8:	4642      	mov	r2, r8
 8003fea:	4647      	mov	r7, r8
 8003fec:	5a82      	ldrh	r2, [r0, r2]
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	53c2      	strh	r2, [r0, r7]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	6802      	ldr	r2, [r0, #0]
 8003ff6:	69d7      	ldr	r7, [r2, #28]
 8003ff8:	46bb      	mov	fp, r7
 8003ffa:	4657      	mov	r7, sl
 8003ffc:	465d      	mov	r5, fp
 8003ffe:	422f      	tst	r7, r5
 8004000:	d111      	bne.n	8004026 <HAL_UART_Receive+0x1a6>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_UART_Receive+0x1c8>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	2520      	movs	r5, #32
 8004008:	9501      	str	r5, [sp, #4]
	return tick++;;
 800400a:	4667      	mov	r7, ip
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800400c:	9d00      	ldr	r5, [sp, #0]
 800400e:	1b7f      	subs	r7, r7, r5
 8004010:	2501      	movs	r5, #1
 8004012:	46ab      	mov	fp, r5
 8004014:	44dc      	add	ip, fp
 8004016:	42bb      	cmp	r3, r7
 8004018:	d319      	bcc.n	800404e <HAL_UART_Receive+0x1ce>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	69d7      	ldr	r7, [r2, #28]
 800401c:	9d01      	ldr	r5, [sp, #4]
 800401e:	423d      	tst	r5, r7
 8004020:	d0f3      	beq.n	800400a <HAL_UART_Receive+0x18a>
 8004022:	2501      	movs	r5, #1
 8004024:	9501      	str	r5, [sp, #4]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004026:	6885      	ldr	r5, [r0, #8]
 8004028:	454d      	cmp	r5, r9
 800402a:	d025      	beq.n	8004078 <HAL_UART_Receive+0x1f8>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800402c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800402e:	4032      	ands	r2, r6
 8004030:	700a      	strb	r2, [r1, #0]
 8004032:	3101      	adds	r1, #1
    while(huart->RxXferCount > 0U)
 8004034:	4642      	mov	r2, r8
 8004036:	5a82      	ldrh	r2, [r0, r2]
 8004038:	2a00      	cmp	r2, #0
 800403a:	d1d5      	bne.n	8003fe8 <HAL_UART_Receive+0x168>
 800403c:	9b01      	ldr	r3, [sp, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d08a      	beq.n	8003f58 <HAL_UART_Receive+0xd8>
 8004042:	4663      	mov	r3, ip
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	e787      	b.n	8003f58 <HAL_UART_Receive+0xd8>
 8004048:	9b01      	ldr	r3, [sp, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_UART_Receive+0x1d2>
 800404e:	4663      	mov	r3, ip
 8004050:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	490e      	ldr	r1, [pc, #56]	@ (8004090 <HAL_UART_Receive+0x210>)
 8004056:	400b      	ands	r3, r1
 8004058:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	6893      	ldr	r3, [r2, #8]
 800405c:	31a3      	adds	r1, #163	@ 0xa3
 800405e:	31ff      	adds	r1, #255	@ 0xff
 8004060:	438b      	bics	r3, r1
 8004062:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8004064:	2320      	movs	r3, #32
 8004066:	2269      	movs	r2, #105	@ 0x69
 8004068:	5483      	strb	r3, [r0, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800406a:	3201      	adds	r2, #1
 800406c:	5483      	strb	r3, [r0, r2]
        __HAL_UNLOCK(huart);
 800406e:	2200      	movs	r2, #0
 8004070:	3348      	adds	r3, #72	@ 0x48
 8004072:	54c2      	strb	r2, [r0, r3]
        return HAL_TIMEOUT;
 8004074:	2003      	movs	r0, #3
 8004076:	e758      	b.n	8003f2a <HAL_UART_Receive+0xaa>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	6905      	ldr	r5, [r0, #16]
 800407a:	2d00      	cmp	r5, #0
 800407c:	d1d6      	bne.n	800402c <HAL_UART_Receive+0x1ac>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800407e:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004080:	4032      	ands	r2, r6
 8004082:	800a      	strh	r2, [r1, #0]
        pData +=2U;
 8004084:	3102      	adds	r1, #2
 8004086:	e7d5      	b.n	8004034 <HAL_UART_Receive+0x1b4>
 8004088:	200002c4 	.word	0x200002c4
 800408c:	000001ff 	.word	0x000001ff
 8004090:	fffffe5f 	.word	0xfffffe5f

08004094 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004096:	46de      	mov	lr, fp
 8004098:	4657      	mov	r7, sl
 800409a:	464e      	mov	r6, r9
 800409c:	4645      	mov	r5, r8
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800409e:	2469      	movs	r4, #105	@ 0x69
{
 80040a0:	b5e0      	push	{r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80040a2:	5d04      	ldrb	r4, [r0, r4]
{
 80040a4:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY)
 80040a6:	2c20      	cmp	r4, #32
 80040a8:	d158      	bne.n	800415c <HAL_UART_Transmit+0xc8>
  {
    if((pData == NULL ) || (Size == 0U))
 80040aa:	2900      	cmp	r1, #0
 80040ac:	d045      	beq.n	800413a <HAL_UART_Transmit+0xa6>
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d043      	beq.n	800413a <HAL_UART_Transmit+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b2:	2480      	movs	r4, #128	@ 0x80
 80040b4:	6886      	ldr	r6, [r0, #8]
 80040b6:	0164      	lsls	r4, r4, #5
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d039      	beq.n	8004130 <HAL_UART_Transmit+0x9c>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040bc:	2468      	movs	r4, #104	@ 0x68
 80040be:	5d05      	ldrb	r5, [r0, r4]
 80040c0:	2d01      	cmp	r5, #1
 80040c2:	d04b      	beq.n	800415c <HAL_UART_Transmit+0xc8>
 80040c4:	2501      	movs	r5, #1
 80040c6:	5505      	strb	r5, [r0, r4]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	2400      	movs	r4, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 80040ca:	2750      	movs	r7, #80	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	66c4      	str	r4, [r0, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ce:	3520      	adds	r5, #32
 80040d0:	3469      	adds	r4, #105	@ 0x69
 80040d2:	5505      	strb	r5, [r0, r4]
	return tick++;;
 80040d4:	4c58      	ldr	r4, [pc, #352]	@ (8004238 <HAL_UART_Transmit+0x1a4>)
    huart->TxXferSize = Size;
 80040d6:	53c2      	strh	r2, [r0, r7]
	return tick++;;
 80040d8:	6825      	ldr	r5, [r4, #0]
    huart->TxXferCount = Size;
 80040da:	3702      	adds	r7, #2
	return tick++;;
 80040dc:	46ac      	mov	ip, r5
 80040de:	3501      	adds	r5, #1
    huart->TxXferCount = Size;
 80040e0:	53c2      	strh	r2, [r0, r7]
	return tick++;;
 80040e2:	9501      	str	r5, [sp, #4]
 80040e4:	6025      	str	r5, [r4, #0]
    while(huart->TxXferCount > 0)
 80040e6:	5bc7      	ldrh	r7, [r0, r7]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e8:	6802      	ldr	r2, [r0, #0]
    while(huart->TxXferCount > 0)
 80040ea:	2f00      	cmp	r7, #0
 80040ec:	d038      	beq.n	8004160 <HAL_UART_Transmit+0xcc>
 80040ee:	1c5f      	adds	r7, r3, #1
 80040f0:	d15e      	bne.n	80041b0 <HAL_UART_Transmit+0x11c>
      huart->TxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f2:	2780      	movs	r7, #128	@ 0x80
      huart->TxXferCount--;
 80040f4:	2552      	movs	r5, #82	@ 0x52
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	2480      	movs	r4, #128	@ 0x80
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	017f      	lsls	r7, r7, #5
      huart->TxXferCount--;
 80040fa:	5b43      	ldrh	r3, [r0, r5]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29b      	uxth	r3, r3
 8004100:	5343      	strh	r3, [r0, r5]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004102:	69d3      	ldr	r3, [r2, #28]
 8004104:	421c      	tst	r4, r3
 8004106:	d0fc      	beq.n	8004102 <HAL_UART_Transmit+0x6e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004108:	42be      	cmp	r6, r7
 800410a:	d01e      	beq.n	800414a <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
        pData += 2;
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800410c:	780b      	ldrb	r3, [r1, #0]
 800410e:	3101      	adds	r1, #1
 8004110:	8513      	strh	r3, [r2, #40]	@ 0x28
    while(huart->TxXferCount > 0)
 8004112:	5b43      	ldrh	r3, [r0, r5]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_UART_Transmit+0x66>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	2140      	movs	r1, #64	@ 0x40
 800411a:	69d3      	ldr	r3, [r2, #28]
 800411c:	4219      	tst	r1, r3
 800411e:	d0fc      	beq.n	800411a <HAL_UART_Transmit+0x86>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004120:	2369      	movs	r3, #105	@ 0x69
 8004122:	2220      	movs	r2, #32
 8004124:	54c2      	strb	r2, [r0, r3]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004126:	2200      	movs	r2, #0
 8004128:	3b01      	subs	r3, #1
 800412a:	54c2      	strb	r2, [r0, r3]

    return HAL_OK;
 800412c:	2000      	movs	r0, #0
 800412e:	e005      	b.n	800413c <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004130:	6904      	ldr	r4, [r0, #16]
 8004132:	2c00      	cmp	r4, #0
 8004134:	d1c2      	bne.n	80040bc <HAL_UART_Transmit+0x28>
      if((((uint32_t)pData)&1U) != 0U)
 8004136:	07cc      	lsls	r4, r1, #31
 8004138:	d5c0      	bpl.n	80040bc <HAL_UART_Transmit+0x28>
      return  HAL_ERROR;
 800413a:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800413c:	b003      	add	sp, #12
 800413e:	bcf0      	pop	{r4, r5, r6, r7}
 8004140:	46bb      	mov	fp, r7
 8004142:	46b2      	mov	sl, r6
 8004144:	46a9      	mov	r9, r5
 8004146:	46a0      	mov	r8, r4
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414a:	6903      	ldr	r3, [r0, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1dd      	bne.n	800410c <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004150:	880b      	ldrh	r3, [r1, #0]
        pData += 2;
 8004152:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004154:	05db      	lsls	r3, r3, #23
 8004156:	0ddb      	lsrs	r3, r3, #23
 8004158:	8513      	strh	r3, [r2, #40]	@ 0x28
        pData += 2;
 800415a:	e7da      	b.n	8004112 <HAL_UART_Transmit+0x7e>
    __HAL_LOCK(huart);
 800415c:	2002      	movs	r0, #2
 800415e:	e7ed      	b.n	800413c <HAL_UART_Transmit+0xa8>
 8004160:	1c59      	adds	r1, r3, #1
 8004162:	d0d9      	beq.n	8004118 <HAL_UART_Transmit+0x84>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004164:	69d5      	ldr	r5, [r2, #28]
 8004166:	6821      	ldr	r1, [r4, #0]
 8004168:	066d      	lsls	r5, r5, #25
 800416a:	d4d9      	bmi.n	8004120 <HAL_UART_Transmit+0x8c>
 800416c:	2640      	movs	r6, #64	@ 0x40
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_UART_Transmit+0xf6>
	return tick++;;
 8004172:	000d      	movs	r5, r1
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004174:	4667      	mov	r7, ip
	return tick++;;
 8004176:	3101      	adds	r1, #1
 8004178:	6021      	str	r1, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800417a:	1bed      	subs	r5, r5, r7
 800417c:	42ab      	cmp	r3, r5
 800417e:	d304      	bcc.n	800418a <HAL_UART_Transmit+0xf6>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004180:	69d5      	ldr	r5, [r2, #28]
 8004182:	422e      	tst	r6, r5
 8004184:	d0f5      	beq.n	8004172 <HAL_UART_Transmit+0xde>
 8004186:	e7cb      	b.n	8004120 <HAL_UART_Transmit+0x8c>
 8004188:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	492b      	ldr	r1, [pc, #172]	@ (800423c <HAL_UART_Transmit+0x1a8>)
 800418e:	400b      	ands	r3, r1
 8004190:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	6893      	ldr	r3, [r2, #8]
 8004194:	31a3      	adds	r1, #163	@ 0xa3
 8004196:	31ff      	adds	r1, #255	@ 0xff
 8004198:	438b      	bics	r3, r1
 800419a:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800419c:	2320      	movs	r3, #32
 800419e:	2269      	movs	r2, #105	@ 0x69
 80041a0:	5483      	strb	r3, [r0, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80041a2:	3201      	adds	r2, #1
 80041a4:	5483      	strb	r3, [r0, r2]
        __HAL_UNLOCK(huart);
 80041a6:	2368      	movs	r3, #104	@ 0x68
 80041a8:	2200      	movs	r2, #0
 80041aa:	54c2      	strb	r2, [r0, r3]
        return HAL_TIMEOUT;
 80041ac:	2003      	movs	r0, #3
 80041ae:	e7c5      	b.n	800413c <HAL_UART_Transmit+0xa8>
    while(huart->TxXferCount > 0)
 80041b0:	2500      	movs	r5, #0
 80041b2:	46a9      	mov	r9, r5
      huart->TxXferCount--;
 80041b4:	3552      	adds	r5, #82	@ 0x52
 80041b6:	46a8      	mov	r8, r5
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b8:	352e      	adds	r5, #46	@ 0x2e
 80041ba:	46ab      	mov	fp, r5
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041bc:	2580      	movs	r5, #128	@ 0x80
 80041be:	016d      	lsls	r5, r5, #5
 80041c0:	46aa      	mov	sl, r5
      huart->TxXferCount--;
 80041c2:	4647      	mov	r7, r8
 80041c4:	4645      	mov	r5, r8
 80041c6:	5bc7      	ldrh	r7, [r0, r7]
 80041c8:	3f01      	subs	r7, #1
 80041ca:	b2bf      	uxth	r7, r7
 80041cc:	5347      	strh	r7, [r0, r5]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	465d      	mov	r5, fp
 80041d0:	69d7      	ldr	r7, [r2, #28]
 80041d2:	423d      	tst	r5, r7
 80041d4:	d111      	bne.n	80041fa <HAL_UART_Transmit+0x166>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01e      	beq.n	8004218 <HAL_UART_Transmit+0x184>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041da:	2580      	movs	r5, #128	@ 0x80
 80041dc:	46a9      	mov	r9, r5
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041de:	4665      	mov	r5, ip
 80041e0:	9f01      	ldr	r7, [sp, #4]
 80041e2:	1b7f      	subs	r7, r7, r5
 80041e4:	9d01      	ldr	r5, [sp, #4]
 80041e6:	3501      	adds	r5, #1
 80041e8:	9501      	str	r5, [sp, #4]
 80041ea:	42bb      	cmp	r3, r7
 80041ec:	d3cc      	bcc.n	8004188 <HAL_UART_Transmit+0xf4>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ee:	464d      	mov	r5, r9
 80041f0:	69d7      	ldr	r7, [r2, #28]
 80041f2:	423d      	tst	r5, r7
 80041f4:	d0f3      	beq.n	80041de <HAL_UART_Transmit+0x14a>
 80041f6:	2501      	movs	r5, #1
 80041f8:	46a9      	mov	r9, r5
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041fa:	4556      	cmp	r6, sl
 80041fc:	d012      	beq.n	8004224 <HAL_UART_Transmit+0x190>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80041fe:	780f      	ldrb	r7, [r1, #0]
 8004200:	3101      	adds	r1, #1
 8004202:	8517      	strh	r7, [r2, #40]	@ 0x28
    while(huart->TxXferCount > 0)
 8004204:	4645      	mov	r5, r8
 8004206:	5b47      	ldrh	r7, [r0, r5]
 8004208:	2f00      	cmp	r7, #0
 800420a:	d1da      	bne.n	80041c2 <HAL_UART_Transmit+0x12e>
 800420c:	4649      	mov	r1, r9
 800420e:	2900      	cmp	r1, #0
 8004210:	d0a8      	beq.n	8004164 <HAL_UART_Transmit+0xd0>
 8004212:	9901      	ldr	r1, [sp, #4]
 8004214:	6021      	str	r1, [r4, #0]
 8004216:	e7a5      	b.n	8004164 <HAL_UART_Transmit+0xd0>
 8004218:	464b      	mov	r3, r9
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0b5      	beq.n	800418a <HAL_UART_Transmit+0xf6>
 800421e:	9b01      	ldr	r3, [sp, #4]
 8004220:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004222:	e7b2      	b.n	800418a <HAL_UART_Transmit+0xf6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	6907      	ldr	r7, [r0, #16]
 8004226:	2f00      	cmp	r7, #0
 8004228:	d1e9      	bne.n	80041fe <HAL_UART_Transmit+0x16a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800422a:	880f      	ldrh	r7, [r1, #0]
        pData += 2;
 800422c:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800422e:	05ff      	lsls	r7, r7, #23
 8004230:	0dff      	lsrs	r7, r7, #23
 8004232:	8517      	strh	r7, [r2, #40]	@ 0x28
        pData += 2;
 8004234:	e7e6      	b.n	8004204 <HAL_UART_Transmit+0x170>
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	200002c4 	.word	0x200002c4
 800423c:	fffffe5f 	.word	0xfffffe5f

08004240 <Reset_Handler>:
 8004240:	2100      	movs	r1, #0
 8004242:	e003      	b.n	800424c <LoopCopyDataInit>

08004244 <CopyDataInit>:
 8004244:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <LoopForever+0x2>)
 8004246:	585b      	ldr	r3, [r3, r1]
 8004248:	5043      	str	r3, [r0, r1]
 800424a:	3104      	adds	r1, #4

0800424c <LoopCopyDataInit>:
 800424c:	480a      	ldr	r0, [pc, #40]	@ (8004278 <LoopForever+0x6>)
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <LoopForever+0xa>)
 8004250:	1842      	adds	r2, r0, r1
 8004252:	429a      	cmp	r2, r3
 8004254:	d3f6      	bcc.n	8004244 <CopyDataInit>
 8004256:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <LoopForever+0xe>)
 8004258:	e002      	b.n	8004260 <LoopFillZerobss>

0800425a <FillZerobss>:
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	3204      	adds	r2, #4

08004260 <LoopFillZerobss>:
 8004260:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <LoopForever+0x12>)
 8004262:	429a      	cmp	r2, r3
 8004264:	d3f9      	bcc.n	800425a <FillZerobss>
 8004266:	e000      	b.n	800426a <LoopFillZerobss+0xa>
 8004268:	bf00      	nop
 800426a:	f7fc f8ff 	bl	800046c <__libc_init_array>
 800426e:	f7fe f8d7 	bl	8002420 <main>

08004272 <LoopForever>:
 8004272:	e7fe      	b.n	8004272 <LoopForever>
 8004274:	08004700 	.word	0x08004700
 8004278:	20000000 	.word	0x20000000
 800427c:	20000060 	.word	0x20000060
 8004280:	20000060 	.word	0x20000060
 8004284:	20000414 	.word	0x20000414

08004288 <BusFault_Handler>:
 8004288:	e7fe      	b.n	8004288 <BusFault_Handler>
 800428a:	0000      	movs	r0, r0

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr

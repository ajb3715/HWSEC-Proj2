
simpleserial-base-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080037f8  080037f8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f8  080037f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000068  08003868  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200002e4  08003868  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004106  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc4  00000000  00000000  00024196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000422a  00000000  00000000  00024e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00029084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000888  00000000  00000000  00029274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ba8  00000000  00000000  00029afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000ead  00000000  00000000  0002d6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002e551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001204  00000000  00000000  0002e5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000021c  00000000  00000000  0002f7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000245  00000000  00000000  0002f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000068 	.word	0x20000068
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003368 	.word	0x08003368

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003368 	.word	0x08003368

080001d0 <__udivsi3>:
 80001d0:	2200      	movs	r2, #0
 80001d2:	0843      	lsrs	r3, r0, #1
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d374      	bcc.n	80002c2 <__udivsi3+0xf2>
 80001d8:	0903      	lsrs	r3, r0, #4
 80001da:	428b      	cmp	r3, r1
 80001dc:	d35f      	bcc.n	800029e <__udivsi3+0xce>
 80001de:	0a03      	lsrs	r3, r0, #8
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d344      	bcc.n	800026e <__udivsi3+0x9e>
 80001e4:	0b03      	lsrs	r3, r0, #12
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d328      	bcc.n	800023c <__udivsi3+0x6c>
 80001ea:	0c03      	lsrs	r3, r0, #16
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d30d      	bcc.n	800020c <__udivsi3+0x3c>
 80001f0:	22ff      	movs	r2, #255	; 0xff
 80001f2:	0209      	lsls	r1, r1, #8
 80001f4:	ba12      	rev	r2, r2
 80001f6:	0c03      	lsrs	r3, r0, #16
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d302      	bcc.n	8000202 <__udivsi3+0x32>
 80001fc:	1212      	asrs	r2, r2, #8
 80001fe:	0209      	lsls	r1, r1, #8
 8000200:	d065      	beq.n	80002ce <__udivsi3+0xfe>
 8000202:	0b03      	lsrs	r3, r0, #12
 8000204:	428b      	cmp	r3, r1
 8000206:	d319      	bcc.n	800023c <__udivsi3+0x6c>
 8000208:	e000      	b.n	800020c <__udivsi3+0x3c>
 800020a:	0a09      	lsrs	r1, r1, #8
 800020c:	0bc3      	lsrs	r3, r0, #15
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x46>
 8000212:	03cb      	lsls	r3, r1, #15
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	0b83      	lsrs	r3, r0, #14
 800021a:	428b      	cmp	r3, r1
 800021c:	d301      	bcc.n	8000222 <__udivsi3+0x52>
 800021e:	038b      	lsls	r3, r1, #14
 8000220:	1ac0      	subs	r0, r0, r3
 8000222:	4152      	adcs	r2, r2
 8000224:	0b43      	lsrs	r3, r0, #13
 8000226:	428b      	cmp	r3, r1
 8000228:	d301      	bcc.n	800022e <__udivsi3+0x5e>
 800022a:	034b      	lsls	r3, r1, #13
 800022c:	1ac0      	subs	r0, r0, r3
 800022e:	4152      	adcs	r2, r2
 8000230:	0b03      	lsrs	r3, r0, #12
 8000232:	428b      	cmp	r3, r1
 8000234:	d301      	bcc.n	800023a <__udivsi3+0x6a>
 8000236:	030b      	lsls	r3, r1, #12
 8000238:	1ac0      	subs	r0, r0, r3
 800023a:	4152      	adcs	r2, r2
 800023c:	0ac3      	lsrs	r3, r0, #11
 800023e:	428b      	cmp	r3, r1
 8000240:	d301      	bcc.n	8000246 <__udivsi3+0x76>
 8000242:	02cb      	lsls	r3, r1, #11
 8000244:	1ac0      	subs	r0, r0, r3
 8000246:	4152      	adcs	r2, r2
 8000248:	0a83      	lsrs	r3, r0, #10
 800024a:	428b      	cmp	r3, r1
 800024c:	d301      	bcc.n	8000252 <__udivsi3+0x82>
 800024e:	028b      	lsls	r3, r1, #10
 8000250:	1ac0      	subs	r0, r0, r3
 8000252:	4152      	adcs	r2, r2
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	428b      	cmp	r3, r1
 8000258:	d301      	bcc.n	800025e <__udivsi3+0x8e>
 800025a:	024b      	lsls	r3, r1, #9
 800025c:	1ac0      	subs	r0, r0, r3
 800025e:	4152      	adcs	r2, r2
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d301      	bcc.n	800026a <__udivsi3+0x9a>
 8000266:	020b      	lsls	r3, r1, #8
 8000268:	1ac0      	subs	r0, r0, r3
 800026a:	4152      	adcs	r2, r2
 800026c:	d2cd      	bcs.n	800020a <__udivsi3+0x3a>
 800026e:	09c3      	lsrs	r3, r0, #7
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__udivsi3+0xa8>
 8000274:	01cb      	lsls	r3, r1, #7
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0983      	lsrs	r3, r0, #6
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__udivsi3+0xb4>
 8000280:	018b      	lsls	r3, r1, #6
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0943      	lsrs	r3, r0, #5
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__udivsi3+0xc0>
 800028c:	014b      	lsls	r3, r1, #5
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0903      	lsrs	r3, r0, #4
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__udivsi3+0xcc>
 8000298:	010b      	lsls	r3, r1, #4
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	08c3      	lsrs	r3, r0, #3
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__udivsi3+0xd8>
 80002a4:	00cb      	lsls	r3, r1, #3
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0883      	lsrs	r3, r0, #2
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__udivsi3+0xe4>
 80002b0:	008b      	lsls	r3, r1, #2
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0843      	lsrs	r3, r0, #1
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__udivsi3+0xf0>
 80002bc:	004b      	lsls	r3, r1, #1
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	1a41      	subs	r1, r0, r1
 80002c4:	d200      	bcs.n	80002c8 <__udivsi3+0xf8>
 80002c6:	4601      	mov	r1, r0
 80002c8:	4152      	adcs	r2, r2
 80002ca:	4610      	mov	r0, r2
 80002cc:	4770      	bx	lr
 80002ce:	e7ff      	b.n	80002d0 <__udivsi3+0x100>
 80002d0:	b501      	push	{r0, lr}
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 f806 	bl	80002e4 <__aeabi_idiv0>
 80002d8:	bd02      	pop	{r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_uidivmod>:
 80002dc:	2900      	cmp	r1, #0
 80002de:	d0f7      	beq.n	80002d0 <__udivsi3+0x100>
 80002e0:	e776      	b.n	80001d0 <__udivsi3>
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_idiv0>:
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__gnu_thumb1_case_shi>:
 80002e8:	b403      	push	{r0, r1}
 80002ea:	4671      	mov	r1, lr
 80002ec:	0849      	lsrs	r1, r1, #1
 80002ee:	0040      	lsls	r0, r0, #1
 80002f0:	0049      	lsls	r1, r1, #1
 80002f2:	5e09      	ldrsh	r1, [r1, r0]
 80002f4:	0049      	lsls	r1, r1, #1
 80002f6:	448e      	add	lr, r1
 80002f8:	bc03      	pop	{r0, r1}
 80002fa:	4770      	bx	lr

080002fc <__aeabi_lmul>:
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	46ce      	mov	lr, r9
 8000300:	4647      	mov	r7, r8
 8000302:	b580      	push	{r7, lr}
 8000304:	0007      	movs	r7, r0
 8000306:	4699      	mov	r9, r3
 8000308:	0c3b      	lsrs	r3, r7, #16
 800030a:	469c      	mov	ip, r3
 800030c:	0413      	lsls	r3, r2, #16
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	001d      	movs	r5, r3
 8000312:	000e      	movs	r6, r1
 8000314:	4661      	mov	r1, ip
 8000316:	0400      	lsls	r0, r0, #16
 8000318:	0c14      	lsrs	r4, r2, #16
 800031a:	0c00      	lsrs	r0, r0, #16
 800031c:	4345      	muls	r5, r0
 800031e:	434b      	muls	r3, r1
 8000320:	4360      	muls	r0, r4
 8000322:	4361      	muls	r1, r4
 8000324:	18c0      	adds	r0, r0, r3
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	1820      	adds	r0, r4, r0
 800032a:	468c      	mov	ip, r1
 800032c:	4283      	cmp	r3, r0
 800032e:	d903      	bls.n	8000338 <__aeabi_lmul+0x3c>
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	025b      	lsls	r3, r3, #9
 8000334:	4698      	mov	r8, r3
 8000336:	44c4      	add	ip, r8
 8000338:	4649      	mov	r1, r9
 800033a:	4379      	muls	r1, r7
 800033c:	4372      	muls	r2, r6
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	4463      	add	r3, ip
 8000342:	042d      	lsls	r5, r5, #16
 8000344:	0c2d      	lsrs	r5, r5, #16
 8000346:	18c9      	adds	r1, r1, r3
 8000348:	0400      	lsls	r0, r0, #16
 800034a:	1940      	adds	r0, r0, r5
 800034c:	1889      	adds	r1, r1, r2
 800034e:	bcc0      	pop	{r6, r7}
 8000350:	46b9      	mov	r9, r7
 8000352:	46b0      	mov	r8, r6
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)

08000358 <encrypt>:
	//Set the internal key
	memcpy(Key, k, 16);
	return 0x00;
}

void encrypt(){
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	46d6      	mov	lr, sl
 800035c:	4646      	mov	r6, r8
 800035e:	464f      	mov	r7, r9
	//generate 16 random values for the mask
	srand(time(NULL));
 8000360:	2000      	movs	r0, #0
void encrypt(){
 8000362:	b5c0      	push	{r6, r7, lr}
	srand(time(NULL));
 8000364:	f001 ff6e 	bl	8002244 <time>
 8000368:	f001 fefe 	bl	8002168 <srand>
	for (int i = 0; i < 4; i ++){
 800036c:	4b4d      	ldr	r3, [pc, #308]	; (80004a4 <encrypt+0x14c>)
		for(int j = 0; j<4; j++){
			Mask_Matrix[i][j] = rand() % 256;
 800036e:	27ff      	movs	r7, #255	; 0xff
 8000370:	001d      	movs	r5, r3
 8000372:	001e      	movs	r6, r3
 8000374:	4698      	mov	r8, r3
 8000376:	3510      	adds	r5, #16
 8000378:	3620      	adds	r6, #32
		for(int j = 0; j<4; j++){
 800037a:	2400      	movs	r4, #0
			Mask_Matrix[i][j] = rand() % 256;
 800037c:	f001 ff24 	bl	80021c8 <rand>
 8000380:	17c3      	asrs	r3, r0, #31
 8000382:	0e1b      	lsrs	r3, r3, #24
 8000384:	18c0      	adds	r0, r0, r3
 8000386:	4038      	ands	r0, r7
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	5528      	strb	r0, [r5, r4]
		for(int j = 0; j<4; j++){
 800038c:	3401      	adds	r4, #1
 800038e:	2c04      	cmp	r4, #4
 8000390:	d1f4      	bne.n	800037c <encrypt+0x24>
	for (int i = 0; i < 4; i ++){
 8000392:	3504      	adds	r5, #4
 8000394:	42b5      	cmp	r5, r6
 8000396:	d1f0      	bne.n	800037a <encrypt+0x22>
		}
	}
	//Mask the plaintext 
	AddMatrices(Mask_Matrix, PlainText, ST_Matrix);
 8000398:	4644      	mov	r4, r8
 800039a:	4647      	mov	r7, r8
 800039c:	4645      	mov	r5, r8
 800039e:	3420      	adds	r4, #32
 80003a0:	3510      	adds	r5, #16
 80003a2:	3730      	adds	r7, #48	; 0x30
 80003a4:	0022      	movs	r2, r4
 80003a6:	0039      	movs	r1, r7
 80003a8:	0028      	movs	r0, r5
 80003aa:	f000 f9cd 	bl	8000748 <AddMatrices>

	ExpandKey(Key, ExpandedKey);
 80003ae:	4e3e      	ldr	r6, [pc, #248]	; (80004a8 <encrypt+0x150>)
 80003b0:	4640      	mov	r0, r8
 80003b2:	0031      	movs	r1, r6
 80003b4:	f000 f8ea 	bl	800058c <ExpandKey>
	//Set the state array
	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 80003b8:	4643      	mov	r3, r8
 80003ba:	3340      	adds	r3, #64	; 0x40
 80003bc:	cf07      	ldmia	r7!, {r0, r1, r2}
 80003be:	c307      	stmia	r3!, {r0, r1, r2}
 80003c0:	683a      	ldr	r2, [r7, #0]

	//Add the round key 
	AddRoundKey(ExpandedKey[0], StateArray);
 80003c2:	4647      	mov	r7, r8
 80003c4:	3740      	adds	r7, #64	; 0x40
	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 80003c6:	601a      	str	r2, [r3, #0]
	AddRoundKey(ExpandedKey[0], StateArray);
 80003c8:	0030      	movs	r0, r6
 80003ca:	0039      	movs	r1, r7
 80003cc:	f000 f97a 	bl	80006c4 <AddRoundKey>

	AddRoundKey(ExpandedKey[0], ST_Matrix);
 80003d0:	0030      	movs	r0, r6
 80003d2:	0021      	movs	r1, r4
 80003d4:	f000 f976 	bl	80006c4 <AddRoundKey>
	int i;
	for(i=1; i<=10; i++){

		//Unmask input
		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 80003d8:	2350      	movs	r3, #80	; 0x50
 80003da:	4443      	add	r3, r8
 80003dc:	4699      	mov	r9, r3
 80003de:	001a      	movs	r2, r3
 80003e0:	0029      	movs	r1, r5
 80003e2:	0020      	movs	r0, r4
 80003e4:	f000 f9b0 	bl	8000748 <AddMatrices>
		//Apply Sbox
		SubBytes(S_Matrix);
 80003e8:	4648      	mov	r0, r9
 80003ea:	f000 f9ef 	bl	80007cc <SubBytes>
		SubBytes(StateArray);
 80003ee:	0038      	movs	r0, r7
 80003f0:	f000 f9ec 	bl	80007cc <SubBytes>
		//Remask Output
		AddMatrices(S_Matrix, Mask_Matrix, ST_Matrix);
 80003f4:	0022      	movs	r2, r4
 80003f6:	0029      	movs	r1, r5
 80003f8:	4648      	mov	r0, r9
 80003fa:	f000 f9a5 	bl	8000748 <AddMatrices>
		//ShiftRows 
		ShiftRows(StateArray);
 80003fe:	0038      	movs	r0, r7
 8000400:	f000 fa18 	bl	8000834 <ShiftRows>
		ShiftRows(ST_Matrix);
 8000404:	0020      	movs	r0, r4
 8000406:	f000 fa15 	bl	8000834 <ShiftRows>
		ShiftRows(Mask_Matrix);
 800040a:	0028      	movs	r0, r5
 800040c:	f000 fa12 	bl	8000834 <ShiftRows>
	for(i=1; i<=10; i++){
 8000410:	2301      	movs	r3, #1
 8000412:	469a      	mov	sl, r3
 8000414:	3610      	adds	r6, #16

		if(i!=10){
			//Mix Columns 9 times 
			MixColumns(StateArray);
 8000416:	0038      	movs	r0, r7
 8000418:	f000 fa26 	bl	8000868 <MixColumns>
			MixColumns(ST_Matrix);
 800041c:	0020      	movs	r0, r4
 800041e:	f000 fa23 	bl	8000868 <MixColumns>
			MixColumns(Mask_Matrix);
 8000422:	0028      	movs	r0, r5
 8000424:	f000 fa20 	bl	8000868 <MixColumns>
		}
		//Add the round key
		AddRoundKey(ExpandedKey[i], StateArray);
 8000428:	0030      	movs	r0, r6
 800042a:	0039      	movs	r1, r7
 800042c:	f000 f94a 	bl	80006c4 <AddRoundKey>
		AddRoundKey(ExpandedKey[i], ST_Matrix);
 8000430:	0030      	movs	r0, r6
 8000432:	0021      	movs	r1, r4
 8000434:	f000 f946 	bl	80006c4 <AddRoundKey>
	for(i=1; i<=10; i++){
 8000438:	2301      	movs	r3, #1
 800043a:	469c      	mov	ip, r3
		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 800043c:	334f      	adds	r3, #79	; 0x4f
 800043e:	4443      	add	r3, r8
 8000440:	4699      	mov	r9, r3
 8000442:	001a      	movs	r2, r3
 8000444:	0029      	movs	r1, r5
 8000446:	0020      	movs	r0, r4
	for(i=1; i<=10; i++){
 8000448:	44e2      	add	sl, ip
		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 800044a:	f000 f97d 	bl	8000748 <AddMatrices>
		SubBytes(S_Matrix);
 800044e:	4648      	mov	r0, r9
 8000450:	f000 f9bc 	bl	80007cc <SubBytes>
		SubBytes(StateArray);
 8000454:	0038      	movs	r0, r7
 8000456:	f000 f9b9 	bl	80007cc <SubBytes>
		AddMatrices(S_Matrix, Mask_Matrix, ST_Matrix);
 800045a:	0022      	movs	r2, r4
 800045c:	0029      	movs	r1, r5
 800045e:	4648      	mov	r0, r9
 8000460:	f000 f972 	bl	8000748 <AddMatrices>
		ShiftRows(StateArray);
 8000464:	0038      	movs	r0, r7
 8000466:	f000 f9e5 	bl	8000834 <ShiftRows>
		ShiftRows(ST_Matrix);
 800046a:	0020      	movs	r0, r4
 800046c:	f000 f9e2 	bl	8000834 <ShiftRows>
		ShiftRows(Mask_Matrix);
 8000470:	0028      	movs	r0, r5
 8000472:	f000 f9df 	bl	8000834 <ShiftRows>
		if(i!=10){
 8000476:	4653      	mov	r3, sl
 8000478:	3610      	adds	r6, #16
 800047a:	2b0a      	cmp	r3, #10
 800047c:	d1cb      	bne.n	8000416 <encrypt+0xbe>
		AddRoundKey(ExpandedKey[i], StateArray);
 800047e:	4e0b      	ldr	r6, [pc, #44]	; (80004ac <encrypt+0x154>)
 8000480:	0039      	movs	r1, r7
 8000482:	0030      	movs	r0, r6
 8000484:	f000 f91e 	bl	80006c4 <AddRoundKey>
		AddRoundKey(ExpandedKey[i], ST_Matrix);
 8000488:	0030      	movs	r0, r6
 800048a:	0021      	movs	r1, r4
 800048c:	f000 f91a 	bl	80006c4 <AddRoundKey>
	}
	//Do unmasking stuff
	AddMatrices(ST_Matrix, Mask_Matrix, StateArray);
 8000490:	003a      	movs	r2, r7
 8000492:	0029      	movs	r1, r5
 8000494:	0020      	movs	r0, r4
 8000496:	f000 f957 	bl	8000748 <AddMatrices>
}	
 800049a:	bce0      	pop	{r5, r6, r7}
 800049c:	46ba      	mov	sl, r7
 800049e:	46b1      	mov	r9, r6
 80004a0:	46a8      	mov	r8, r5
 80004a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a4:	20000084 	.word	0x20000084
 80004a8:	200000e8 	.word	0x200000e8
 80004ac:	20000188 	.word	0x20000188

080004b0 <aes>:
	return 0x00;
}

#if SS_VER == SS_VER_2_1
uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	001e      	movs	r6, r3
 80004b4:	2302      	movs	r3, #2
 80004b6:	46ce      	mov	lr, r9
 80004b8:	4647      	mov	r7, r8
 80004ba:	0015      	movs	r5, r2
 80004bc:	001a      	movs	r2, r3
 80004be:	000c      	movs	r4, r1
 80004c0:	b580      	push	{r7, lr}
 80004c2:	400a      	ands	r2, r1
    uint8_t req_len = 0;
    uint8_t err = 0;

    if (scmd & 0x02) {
 80004c4:	420b      	tst	r3, r1
 80004c6:	d02e      	beq.n	8000526 <aes+0x76>
        req_len += 16;
        if (req_len > len) {
 80004c8:	2d0f      	cmp	r5, #15
 80004ca:	d934      	bls.n	8000536 <aes+0x86>
	memcpy(Key, k, 16);
 80004cc:	2210      	movs	r2, #16
 80004ce:	0031      	movs	r1, r6
 80004d0:	4823      	ldr	r0, [pc, #140]	; (8000560 <aes+0xb0>)
 80004d2:	f001 fe37 	bl	8002144 <memcpy>
        }
        err = get_key(buf + req_len - 16, 16);
        if (err)
            return err;
    }
    if (scmd & 0x01) {
 80004d6:	2701      	movs	r7, #1
 80004d8:	2320      	movs	r3, #32
        req_len += 16;
 80004da:	2210      	movs	r2, #16
 80004dc:	4698      	mov	r8, r3
 80004de:	3b10      	subs	r3, #16
    if (scmd & 0x01) {
 80004e0:	4227      	tst	r7, r4
 80004e2:	d019      	beq.n	8000518 <aes+0x68>
        req_len += 16;
        if (req_len > len) {
 80004e4:	4545      	cmp	r5, r8
 80004e6:	d326      	bcc.n	8000536 <aes+0x86>
            return SS_ERR_LEN;
        }
        err = get_pt(buf + req_len - 16, 16);
 80004e8:	18f6      	adds	r6, r6, r3
	trigger_high();
 80004ea:	f000 ff13 	bl	8001314 <trigger_high>
	if ( key_entered == 1 ){
 80004ee:	2360      	movs	r3, #96	; 0x60
 80004f0:	4c1b      	ldr	r4, [pc, #108]	; (8000560 <aes+0xb0>)
 80004f2:	4699      	mov	r9, r3
 80004f4:	5ce3      	ldrb	r3, [r4, r3]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d01f      	beq.n	800053a <aes+0x8a>
		memcpy(Key, pt, 16);
 80004fa:	2210      	movs	r2, #16
 80004fc:	0031      	movs	r1, r6
 80004fe:	0020      	movs	r0, r4
 8000500:	f001 fe20 	bl	8002144 <memcpy>
		key_entered = 1;
 8000504:	464b      	mov	r3, r9
 8000506:	54e7      	strb	r7, [r4, r3]
		trigger_low();
 8000508:	f000 ff0c 	bl	8001324 <trigger_low>
		simpleserial_put('r', 16, pt);
 800050c:	0032      	movs	r2, r6
 800050e:	2110      	movs	r1, #16
 8000510:	2072      	movs	r0, #114	; 0x72
 8000512:	f000 fd71 	bl	8000ff8 <simpleserial_put>
		return 0x00;
 8000516:	4642      	mov	r2, r8
        if (err)
            return err;
    }

    if (len != req_len) {
 8000518:	42aa      	cmp	r2, r5
 800051a:	d10c      	bne.n	8000536 <aes+0x86>
        return SS_ERR_LEN;
    }

    return 0x00;
 800051c:	2000      	movs	r0, #0

}
 800051e:	bcc0      	pop	{r6, r7}
 8000520:	46b9      	mov	r9, r7
 8000522:	46b0      	mov	r8, r6
 8000524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000526:	2310      	movs	r3, #16
    if (scmd & 0x01) {
 8000528:	2701      	movs	r7, #1
 800052a:	4698      	mov	r8, r3
 800052c:	2300      	movs	r3, #0
 800052e:	4227      	tst	r7, r4
 8000530:	d0f2      	beq.n	8000518 <aes+0x68>
        if (req_len > len) {
 8000532:	4545      	cmp	r5, r8
 8000534:	d2d8      	bcs.n	80004e8 <aes+0x38>
            return SS_ERR_LEN;
 8000536:	2004      	movs	r0, #4
 8000538:	e7f1      	b.n	800051e <aes+0x6e>
	memcpy(PlainText, pt, 16);
 800053a:	0020      	movs	r0, r4
 800053c:	2210      	movs	r2, #16
 800053e:	0031      	movs	r1, r6
 8000540:	3030      	adds	r0, #48	; 0x30
 8000542:	f001 fdff 	bl	8002144 <memcpy>
	encrypt();
 8000546:	f7ff ff07 	bl	8000358 <encrypt>
	trigger_low();
 800054a:	f000 feeb 	bl	8001324 <trigger_low>
	simpleserial_put('r', 16, pt);
 800054e:	0022      	movs	r2, r4
 8000550:	2110      	movs	r1, #16
 8000552:	3240      	adds	r2, #64	; 0x40
 8000554:	2072      	movs	r0, #114	; 0x72
 8000556:	f000 fd4f 	bl	8000ff8 <simpleserial_put>
 800055a:	4642      	mov	r2, r8
 800055c:	e7dc      	b.n	8000518 <aes+0x68>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000084 	.word	0x20000084

08000564 <main>:
#endif

int main(void)
{
 8000564:	b510      	push	{r4, lr}
    platform_init();
 8000566:	f000 fe1f 	bl	80011a8 <platform_init>
	init_uart();
 800056a:	f000 fe4f 	bl	800120c <init_uart>
	trigger_setup();
 800056e:	f000 fe8f 	bl	8001290 <trigger_setup>

	simpleserial_init();
 8000572:	f000 fbe5 	bl	8000d40 <simpleserial_init>
#if SS_VER != SS_VER_2_1
	simpleserial_addcmd('p', 16, get_pt);
	simpleserial_addcmd('k', 16, get_key);
	simpleserial_addcmd('x', 0, reset);
#else
    simpleserial_addcmd(0x01, 16, aes);
 8000576:	2110      	movs	r1, #16
 8000578:	2001      	movs	r0, #1
 800057a:	4a03      	ldr	r2, [pc, #12]	; (8000588 <main+0x24>)
 800057c:	f000 fc14 	bl	8000da8 <simpleserial_addcmd>
#endif
	while(1)
		simpleserial_get();
 8000580:	f000 fc34 	bl	8000dec <simpleserial_get>
	while(1)
 8000584:	e7fc      	b.n	8000580 <main+0x1c>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	080004b1 	.word	0x080004b1

0800058c <ExpandKey>:

/**********************************************************************
 * Functions for key expansion
 *********************************************************************/
void ExpandKey (unsigned char Key[][4], unsigned char Expanded_key[][4][4])
{
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	46de      	mov	lr, fp
 8000590:	4657      	mov	r7, sl
 8000592:	464e      	mov	r6, r9
 8000594:	4645      	mov	r5, r8
 8000596:	000c      	movs	r4, r1
 8000598:	b5e0      	push	{r5, r6, r7, lr}
	unsigned char Tmp_key_column[4];
	bzero(Tmp_key_column, 4*sizeof (unsigned char));
	int i,j;

	// Encryption Key copied to Expanded Key [0]
	memcpy(Expanded_key[0], Key, 4 * 4 * sizeof(unsigned char));
 800059a:	0001      	movs	r1, r0
{
 800059c:	b08b      	sub	sp, #44	; 0x2c
	memcpy(Expanded_key[0], Key, 4 * 4 * sizeof(unsigned char));
 800059e:	2210      	movs	r2, #16
 80005a0:	0020      	movs	r0, r4
 80005a2:	f001 fdcf 	bl	8002144 <memcpy>

	for (i=1; i<11; i++){
 80005a6:	7ba3      	ldrb	r3, [r4, #14]
 80005a8:	7822      	ldrb	r2, [r4, #0]
 80005aa:	469b      	mov	fp, r3
 80005ac:	7aa3      	ldrb	r3, [r4, #10]
 80005ae:	7be7      	ldrb	r7, [r4, #15]
 80005b0:	469a      	mov	sl, r3
 80005b2:	79a3      	ldrb	r3, [r4, #6]
 80005b4:	7ae6      	ldrb	r6, [r4, #11]
 80005b6:	4699      	mov	r9, r3
 80005b8:	78a3      	ldrb	r3, [r4, #2]
 80005ba:	79e5      	ldrb	r5, [r4, #7]
 80005bc:	4698      	mov	r8, r3
 80005be:	7b63      	ldrb	r3, [r4, #13]
 80005c0:	493d      	ldr	r1, [pc, #244]	; (80006b8 <ExpandKey+0x12c>)
 80005c2:	9305      	str	r3, [sp, #20]
 80005c4:	7a63      	ldrb	r3, [r4, #9]
 80005c6:	483d      	ldr	r0, [pc, #244]	; (80006bc <ExpandKey+0x130>)
 80005c8:	9304      	str	r3, [sp, #16]
 80005ca:	7963      	ldrb	r3, [r4, #5]
 80005cc:	9109      	str	r1, [sp, #36]	; 0x24
 80005ce:	9303      	str	r3, [sp, #12]
 80005d0:	7863      	ldrb	r3, [r4, #1]
 80005d2:	9307      	str	r3, [sp, #28]
 80005d4:	7b23      	ldrb	r3, [r4, #12]
 80005d6:	9306      	str	r3, [sp, #24]
 80005d8:	7a23      	ldrb	r3, [r4, #8]
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	7923      	ldrb	r3, [r4, #4]
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	78e3      	ldrb	r3, [r4, #3]
 80005e2:	469c      	mov	ip, r3
 80005e4:	0023      	movs	r3, r4
 80005e6:	4664      	mov	r4, ip
 80005e8:	3310      	adds	r3, #16
 80005ea:	9408      	str	r4, [sp, #32]
		// Rcon applied
		Tmp_key_column[0]^=RCon[i-1];

		// XOR
		for(j=0; j<4; j++){
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 80005ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80005ee:	7821      	ldrb	r1, [r4, #0]
 80005f0:	404a      	eors	r2, r1
 80005f2:	5d41      	ldrb	r1, [r0, r5]
 80005f4:	404a      	eors	r2, r1
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 80005f6:	5d81      	ldrb	r1, [r0, r6]
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];

			Expanded_key[i][0][j] = Tmp_key_column[0];
 80005f8:	701a      	strb	r2, [r3, #0]
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 80005fa:	468c      	mov	ip, r1
 80005fc:	4664      	mov	r4, ip
 80005fe:	9901      	ldr	r1, [sp, #4]
 8000600:	4061      	eors	r1, r4
 8000602:	9101      	str	r1, [sp, #4]
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 8000604:	5dc4      	ldrb	r4, [r0, r7]
 8000606:	9902      	ldr	r1, [sp, #8]
 8000608:	4061      	eors	r1, r4
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 800060a:	9c08      	ldr	r4, [sp, #32]
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 800060c:	9102      	str	r1, [sp, #8]
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 800060e:	5d04      	ldrb	r4, [r0, r4]
 8000610:	9906      	ldr	r1, [sp, #24]
 8000612:	4061      	eors	r1, r4
 8000614:	000c      	movs	r4, r1
			Expanded_key[i][1][j] = Tmp_key_column[1];
 8000616:	9901      	ldr	r1, [sp, #4]
			Expanded_key[i][2][j] = Tmp_key_column[2];
			Expanded_key[i][3][j] = Tmp_key_column[3];
 8000618:	9406      	str	r4, [sp, #24]
			Expanded_key[i][1][j] = Tmp_key_column[1];
 800061a:	7119      	strb	r1, [r3, #4]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 800061c:	9902      	ldr	r1, [sp, #8]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 800061e:	731c      	strb	r4, [r3, #12]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 8000620:	7219      	strb	r1, [r3, #8]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 8000622:	9907      	ldr	r1, [sp, #28]
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 8000624:	9c03      	ldr	r4, [sp, #12]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 8000626:	4051      	eors	r1, r2
 8000628:	9107      	str	r1, [sp, #28]
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 800062a:	9901      	ldr	r1, [sp, #4]
 800062c:	404c      	eors	r4, r1
 800062e:	9403      	str	r4, [sp, #12]
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 8000630:	9902      	ldr	r1, [sp, #8]
 8000632:	9c04      	ldr	r4, [sp, #16]
 8000634:	404c      	eors	r4, r1
 8000636:	9404      	str	r4, [sp, #16]
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8000638:	9906      	ldr	r1, [sp, #24]
 800063a:	9c05      	ldr	r4, [sp, #20]
 800063c:	404c      	eors	r4, r1
			Expanded_key[i][0][j] = Tmp_key_column[0];
 800063e:	9907      	ldr	r1, [sp, #28]
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8000640:	9405      	str	r4, [sp, #20]
			Expanded_key[i][0][j] = Tmp_key_column[0];
 8000642:	7059      	strb	r1, [r3, #1]
			Expanded_key[i][1][j] = Tmp_key_column[1];
 8000644:	9c03      	ldr	r4, [sp, #12]
 8000646:	715c      	strb	r4, [r3, #5]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 8000648:	9c04      	ldr	r4, [sp, #16]
 800064a:	725c      	strb	r4, [r3, #9]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 800064c:	9c05      	ldr	r4, [sp, #20]
 800064e:	735c      	strb	r4, [r3, #13]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 8000650:	4644      	mov	r4, r8
 8000652:	404c      	eors	r4, r1
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 8000654:	4649      	mov	r1, r9
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 8000656:	46a0      	mov	r8, r4
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 8000658:	9c03      	ldr	r4, [sp, #12]
 800065a:	4061      	eors	r1, r4
 800065c:	4689      	mov	r9, r1
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 800065e:	4651      	mov	r1, sl
 8000660:	9c04      	ldr	r4, [sp, #16]
 8000662:	4061      	eors	r1, r4
 8000664:	468a      	mov	sl, r1
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8000666:	4659      	mov	r1, fp
 8000668:	9c05      	ldr	r4, [sp, #20]
 800066a:	4061      	eors	r1, r4
 800066c:	468b      	mov	fp, r1
			Expanded_key[i][0][j] = Tmp_key_column[0];
 800066e:	4641      	mov	r1, r8
 8000670:	7099      	strb	r1, [r3, #2]
			Expanded_key[i][1][j] = Tmp_key_column[1];
 8000672:	4649      	mov	r1, r9
 8000674:	7199      	strb	r1, [r3, #6]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 8000676:	4651      	mov	r1, sl
 8000678:	7299      	strb	r1, [r3, #10]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 800067a:	4659      	mov	r1, fp
 800067c:	7399      	strb	r1, [r3, #14]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 800067e:	4641      	mov	r1, r8
 8000680:	9c08      	ldr	r4, [sp, #32]
 8000682:	404c      	eors	r4, r1
			Tmp_key_column[1] = Tmp_key_column[1]^Expanded_key[i-1][1][j];
 8000684:	4649      	mov	r1, r9
 8000686:	404d      	eors	r5, r1
			Tmp_key_column[2] = Tmp_key_column[2]^Expanded_key[i-1][2][j];
 8000688:	4651      	mov	r1, sl
 800068a:	404e      	eors	r6, r1
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 800068c:	4659      	mov	r1, fp
			Expanded_key[i][0][j] = Tmp_key_column[0];
 800068e:	70dc      	strb	r4, [r3, #3]
			Tmp_key_column[0] = Tmp_key_column[0]^Expanded_key[i-1][0][j];
 8000690:	9408      	str	r4, [sp, #32]
	for (i=1; i<11; i++){
 8000692:	9c09      	ldr	r4, [sp, #36]	; 0x24
			Tmp_key_column[3] = Tmp_key_column[3]^Expanded_key[i-1][3][j];
 8000694:	404f      	eors	r7, r1
	for (i=1; i<11; i++){
 8000696:	490a      	ldr	r1, [pc, #40]	; (80006c0 <ExpandKey+0x134>)
 8000698:	3401      	adds	r4, #1
			Expanded_key[i][1][j] = Tmp_key_column[1];
 800069a:	71dd      	strb	r5, [r3, #7]
			Expanded_key[i][2][j] = Tmp_key_column[2];
 800069c:	72de      	strb	r6, [r3, #11]
			Expanded_key[i][3][j] = Tmp_key_column[3];
 800069e:	73df      	strb	r7, [r3, #15]
	for (i=1; i<11; i++){
 80006a0:	9409      	str	r4, [sp, #36]	; 0x24
 80006a2:	3310      	adds	r3, #16
 80006a4:	428c      	cmp	r4, r1
 80006a6:	d1a1      	bne.n	80005ec <ExpandKey+0x60>
		}
	}
}
 80006a8:	b00b      	add	sp, #44	; 0x2c
 80006aa:	bcf0      	pop	{r4, r5, r6, r7}
 80006ac:	46bb      	mov	fp, r7
 80006ae:	46b2      	mov	sl, r6
 80006b0:	46a9      	mov	r9, r5
 80006b2:	46a0      	mov	r8, r4
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	08003380 	.word	0x08003380
 80006bc:	0800358c 	.word	0x0800358c
 80006c0:	0800338a 	.word	0x0800338a

080006c4 <AddRoundKey>:
void AddRoundKey (unsigned char Key[][4], unsigned char StateArray[][4])
{
	int i,j;
	for(i=0; i<4; i++)
		for(j=0; j<4; j++)
			StateArray[i][j] ^= Key[i][j];
 80006c4:	7803      	ldrb	r3, [r0, #0]
 80006c6:	780a      	ldrb	r2, [r1, #0]
 80006c8:	4053      	eors	r3, r2
 80006ca:	700b      	strb	r3, [r1, #0]
 80006cc:	7843      	ldrb	r3, [r0, #1]
 80006ce:	784a      	ldrb	r2, [r1, #1]
 80006d0:	4053      	eors	r3, r2
 80006d2:	704b      	strb	r3, [r1, #1]
 80006d4:	7883      	ldrb	r3, [r0, #2]
 80006d6:	788a      	ldrb	r2, [r1, #2]
 80006d8:	4053      	eors	r3, r2
 80006da:	708b      	strb	r3, [r1, #2]
 80006dc:	78c2      	ldrb	r2, [r0, #3]
 80006de:	78cb      	ldrb	r3, [r1, #3]
 80006e0:	4053      	eors	r3, r2
 80006e2:	70cb      	strb	r3, [r1, #3]
 80006e4:	7902      	ldrb	r2, [r0, #4]
 80006e6:	790b      	ldrb	r3, [r1, #4]
 80006e8:	4053      	eors	r3, r2
 80006ea:	710b      	strb	r3, [r1, #4]
 80006ec:	7942      	ldrb	r2, [r0, #5]
 80006ee:	794b      	ldrb	r3, [r1, #5]
 80006f0:	4053      	eors	r3, r2
 80006f2:	714b      	strb	r3, [r1, #5]
 80006f4:	7982      	ldrb	r2, [r0, #6]
 80006f6:	798b      	ldrb	r3, [r1, #6]
 80006f8:	4053      	eors	r3, r2
 80006fa:	718b      	strb	r3, [r1, #6]
 80006fc:	79c2      	ldrb	r2, [r0, #7]
 80006fe:	79cb      	ldrb	r3, [r1, #7]
 8000700:	4053      	eors	r3, r2
 8000702:	71cb      	strb	r3, [r1, #7]
 8000704:	7a02      	ldrb	r2, [r0, #8]
 8000706:	7a0b      	ldrb	r3, [r1, #8]
 8000708:	4053      	eors	r3, r2
 800070a:	720b      	strb	r3, [r1, #8]
 800070c:	7a42      	ldrb	r2, [r0, #9]
 800070e:	7a4b      	ldrb	r3, [r1, #9]
 8000710:	4053      	eors	r3, r2
 8000712:	724b      	strb	r3, [r1, #9]
 8000714:	7a82      	ldrb	r2, [r0, #10]
 8000716:	7a8b      	ldrb	r3, [r1, #10]
 8000718:	4053      	eors	r3, r2
 800071a:	728b      	strb	r3, [r1, #10]
 800071c:	7ac2      	ldrb	r2, [r0, #11]
 800071e:	7acb      	ldrb	r3, [r1, #11]
 8000720:	4053      	eors	r3, r2
 8000722:	72cb      	strb	r3, [r1, #11]
 8000724:	7b02      	ldrb	r2, [r0, #12]
 8000726:	7b0b      	ldrb	r3, [r1, #12]
 8000728:	4053      	eors	r3, r2
 800072a:	730b      	strb	r3, [r1, #12]
 800072c:	7b42      	ldrb	r2, [r0, #13]
 800072e:	7b4b      	ldrb	r3, [r1, #13]
 8000730:	4053      	eors	r3, r2
 8000732:	734b      	strb	r3, [r1, #13]
 8000734:	7b82      	ldrb	r2, [r0, #14]
 8000736:	7b8b      	ldrb	r3, [r1, #14]
 8000738:	4053      	eors	r3, r2
 800073a:	738b      	strb	r3, [r1, #14]
 800073c:	7bc2      	ldrb	r2, [r0, #15]
 800073e:	7bcb      	ldrb	r3, [r1, #15]
 8000740:	4053      	eors	r3, r2
 8000742:	73cb      	strb	r3, [r1, #15]
}
 8000744:	4770      	bx	lr
 8000746:	46c0      	nop			; (mov r8, r8)

08000748 <AddMatrices>:

 void AddMatrices( unsigned char (*Mat1)[4], unsigned char (*Mat2)[4], unsigned char(*res)[4]){
 8000748:	b510      	push	{r4, lr}
	int i,j;
	for(i=0; i<4; i++){
		for(j=0; j<4; j++){
			res[i][j] = Mat1[i][j] ^ Mat2[i][j];
 800074a:	7803      	ldrb	r3, [r0, #0]
 800074c:	780c      	ldrb	r4, [r1, #0]
 800074e:	4063      	eors	r3, r4
 8000750:	7013      	strb	r3, [r2, #0]
 8000752:	784c      	ldrb	r4, [r1, #1]
 8000754:	7843      	ldrb	r3, [r0, #1]
 8000756:	4063      	eors	r3, r4
 8000758:	7053      	strb	r3, [r2, #1]
 800075a:	788c      	ldrb	r4, [r1, #2]
 800075c:	7883      	ldrb	r3, [r0, #2]
 800075e:	4063      	eors	r3, r4
 8000760:	7093      	strb	r3, [r2, #2]
 8000762:	78cc      	ldrb	r4, [r1, #3]
 8000764:	78c3      	ldrb	r3, [r0, #3]
 8000766:	4063      	eors	r3, r4
 8000768:	70d3      	strb	r3, [r2, #3]
 800076a:	790c      	ldrb	r4, [r1, #4]
 800076c:	7903      	ldrb	r3, [r0, #4]
 800076e:	4063      	eors	r3, r4
 8000770:	7113      	strb	r3, [r2, #4]
 8000772:	794c      	ldrb	r4, [r1, #5]
 8000774:	7943      	ldrb	r3, [r0, #5]
 8000776:	4063      	eors	r3, r4
 8000778:	7153      	strb	r3, [r2, #5]
 800077a:	798c      	ldrb	r4, [r1, #6]
 800077c:	7983      	ldrb	r3, [r0, #6]
 800077e:	4063      	eors	r3, r4
 8000780:	7193      	strb	r3, [r2, #6]
 8000782:	79cc      	ldrb	r4, [r1, #7]
 8000784:	79c3      	ldrb	r3, [r0, #7]
 8000786:	4063      	eors	r3, r4
 8000788:	71d3      	strb	r3, [r2, #7]
 800078a:	7a0c      	ldrb	r4, [r1, #8]
 800078c:	7a03      	ldrb	r3, [r0, #8]
 800078e:	4063      	eors	r3, r4
 8000790:	7213      	strb	r3, [r2, #8]
 8000792:	7a43      	ldrb	r3, [r0, #9]
 8000794:	7a4c      	ldrb	r4, [r1, #9]
 8000796:	4063      	eors	r3, r4
 8000798:	7253      	strb	r3, [r2, #9]
 800079a:	7a83      	ldrb	r3, [r0, #10]
 800079c:	7a8c      	ldrb	r4, [r1, #10]
 800079e:	4063      	eors	r3, r4
 80007a0:	7293      	strb	r3, [r2, #10]
 80007a2:	7acc      	ldrb	r4, [r1, #11]
 80007a4:	7ac3      	ldrb	r3, [r0, #11]
 80007a6:	4063      	eors	r3, r4
 80007a8:	72d3      	strb	r3, [r2, #11]
 80007aa:	7b0c      	ldrb	r4, [r1, #12]
 80007ac:	7b03      	ldrb	r3, [r0, #12]
 80007ae:	4063      	eors	r3, r4
 80007b0:	7313      	strb	r3, [r2, #12]
 80007b2:	7b4c      	ldrb	r4, [r1, #13]
 80007b4:	7b43      	ldrb	r3, [r0, #13]
 80007b6:	4063      	eors	r3, r4
 80007b8:	7353      	strb	r3, [r2, #13]
 80007ba:	7b8c      	ldrb	r4, [r1, #14]
 80007bc:	7b83      	ldrb	r3, [r0, #14]
 80007be:	4063      	eors	r3, r4
 80007c0:	7393      	strb	r3, [r2, #14]
 80007c2:	7bc3      	ldrb	r3, [r0, #15]
 80007c4:	7bc9      	ldrb	r1, [r1, #15]
 80007c6:	404b      	eors	r3, r1
 80007c8:	73d3      	strb	r3, [r2, #15]
		}
		}
}
 80007ca:	bd10      	pop	{r4, pc}

080007cc <SubBytes>:
void SubBytes (unsigned char StateArray[][4])
{
	int i,j;
	for(i=0; i<4; i++)
		for(j=0; j<4; j++)
			StateArray[i][j] = SBox[StateArray[i][j]];
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <SubBytes+0x64>)
 80007ce:	7802      	ldrb	r2, [r0, #0]
 80007d0:	5c9a      	ldrb	r2, [r3, r2]
 80007d2:	7002      	strb	r2, [r0, #0]
 80007d4:	7842      	ldrb	r2, [r0, #1]
 80007d6:	5c9a      	ldrb	r2, [r3, r2]
 80007d8:	7042      	strb	r2, [r0, #1]
 80007da:	7882      	ldrb	r2, [r0, #2]
 80007dc:	5c9a      	ldrb	r2, [r3, r2]
 80007de:	7082      	strb	r2, [r0, #2]
 80007e0:	78c2      	ldrb	r2, [r0, #3]
 80007e2:	5c9a      	ldrb	r2, [r3, r2]
 80007e4:	70c2      	strb	r2, [r0, #3]
 80007e6:	7902      	ldrb	r2, [r0, #4]
 80007e8:	5c9a      	ldrb	r2, [r3, r2]
 80007ea:	7102      	strb	r2, [r0, #4]
 80007ec:	7942      	ldrb	r2, [r0, #5]
 80007ee:	5c9a      	ldrb	r2, [r3, r2]
 80007f0:	7142      	strb	r2, [r0, #5]
 80007f2:	7982      	ldrb	r2, [r0, #6]
 80007f4:	5c9a      	ldrb	r2, [r3, r2]
 80007f6:	7182      	strb	r2, [r0, #6]
 80007f8:	79c2      	ldrb	r2, [r0, #7]
 80007fa:	5c9a      	ldrb	r2, [r3, r2]
 80007fc:	71c2      	strb	r2, [r0, #7]
 80007fe:	7a02      	ldrb	r2, [r0, #8]
 8000800:	5c9a      	ldrb	r2, [r3, r2]
 8000802:	7202      	strb	r2, [r0, #8]
 8000804:	7a42      	ldrb	r2, [r0, #9]
 8000806:	5c9a      	ldrb	r2, [r3, r2]
 8000808:	7242      	strb	r2, [r0, #9]
 800080a:	7a82      	ldrb	r2, [r0, #10]
 800080c:	5c9a      	ldrb	r2, [r3, r2]
 800080e:	7282      	strb	r2, [r0, #10]
 8000810:	7ac2      	ldrb	r2, [r0, #11]
 8000812:	5c9a      	ldrb	r2, [r3, r2]
 8000814:	72c2      	strb	r2, [r0, #11]
 8000816:	7b02      	ldrb	r2, [r0, #12]
 8000818:	5c9a      	ldrb	r2, [r3, r2]
 800081a:	7302      	strb	r2, [r0, #12]
 800081c:	7b42      	ldrb	r2, [r0, #13]
 800081e:	5c9a      	ldrb	r2, [r3, r2]
 8000820:	7342      	strb	r2, [r0, #13]
 8000822:	7b82      	ldrb	r2, [r0, #14]
 8000824:	5c9a      	ldrb	r2, [r3, r2]
 8000826:	7382      	strb	r2, [r0, #14]
 8000828:	7bc2      	ldrb	r2, [r0, #15]
 800082a:	5c9b      	ldrb	r3, [r3, r2]
 800082c:	73c3      	strb	r3, [r0, #15]
}
 800082e:	4770      	bx	lr
 8000830:	0800358c 	.word	0x0800358c

08000834 <ShiftRows>:

void ShiftRows (unsigned char Matrix[][4])
{
	unsigned char x;
	x = Matrix[1][0];
	Matrix[1][0] = Matrix[1][1];
 8000834:	7942      	ldrb	r2, [r0, #5]
	x = Matrix[1][0];
 8000836:	7903      	ldrb	r3, [r0, #4]
	Matrix[1][0] = Matrix[1][1];
 8000838:	7102      	strb	r2, [r0, #4]
	Matrix[1][1] = Matrix[1][2];
 800083a:	7982      	ldrb	r2, [r0, #6]
 800083c:	7142      	strb	r2, [r0, #5]
	Matrix[1][2] = Matrix[1][3];
 800083e:	79c2      	ldrb	r2, [r0, #7]
	Matrix[1][3] = x;
 8000840:	71c3      	strb	r3, [r0, #7]
	Matrix[1][2] = Matrix[1][3];
 8000842:	7182      	strb	r2, [r0, #6]
	x = Matrix[2][0];
	Matrix[2][0] = Matrix[2][2];
 8000844:	7a82      	ldrb	r2, [r0, #10]
	x = Matrix[2][0];
 8000846:	7a03      	ldrb	r3, [r0, #8]
	Matrix[2][0] = Matrix[2][2];
 8000848:	7202      	strb	r2, [r0, #8]
	Matrix[2][2] = x;
	x = Matrix[2][1];
	Matrix[2][1] = Matrix[2][3];
 800084a:	7ac2      	ldrb	r2, [r0, #11]
	Matrix[2][2] = x;
 800084c:	7283      	strb	r3, [r0, #10]
	x = Matrix[2][1];
 800084e:	7a43      	ldrb	r3, [r0, #9]
	Matrix[2][1] = Matrix[2][3];
 8000850:	7242      	strb	r2, [r0, #9]
	Matrix[2][3] = x;
	x = Matrix[3][3];
	Matrix[3][3] = Matrix[3][2];
 8000852:	7b82      	ldrb	r2, [r0, #14]
	Matrix[2][3] = x;
 8000854:	72c3      	strb	r3, [r0, #11]
	x = Matrix[3][3];
 8000856:	7bc3      	ldrb	r3, [r0, #15]
	Matrix[3][3] = Matrix[3][2];
 8000858:	73c2      	strb	r2, [r0, #15]
	Matrix[3][2] = Matrix[3][1];
 800085a:	7b42      	ldrb	r2, [r0, #13]
 800085c:	7382      	strb	r2, [r0, #14]
	Matrix[3][1] = Matrix[3][0];
 800085e:	7b02      	ldrb	r2, [r0, #12]
	Matrix[3][0] = x;
 8000860:	7303      	strb	r3, [r0, #12]
	Matrix[3][1] = Matrix[3][0];
 8000862:	7342      	strb	r2, [r0, #13]
}
 8000864:	4770      	bx	lr
 8000866:	46c0      	nop			; (mov r8, r8)

08000868 <MixColumns>:

void MixColumns (unsigned char S_Array[][4])
{
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086a:	46de      	mov	lr, fp
 800086c:	4657      	mov	r7, sl
 800086e:	464e      	mov	r6, r9
 8000870:	4645      	mov	r5, r8
 8000872:	b5e0      	push	{r5, r6, r7, lr}
	int i;
	unsigned char StateArrayTmp[4][4];

	for ( i = 0; i < 4; i ++)
	{
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8000874:	7803      	ldrb	r3, [r0, #0]
{
 8000876:	b093      	sub	sp, #76	; 0x4c
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8000878:	4698      	mov	r8, r3
 800087a:	7903      	ldrb	r3, [r0, #4]
 800087c:	469c      	mov	ip, r3
			S_Array [2][ i ] ^ S_Array [3][ i ];
 800087e:	7a03      	ldrb	r3, [r0, #8]
 8000880:	9306      	str	r3, [sp, #24]
 8000882:	7b03      	ldrb	r3, [r0, #12]
 8000884:	4699      	mov	r9, r3
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8000886:	7843      	ldrb	r3, [r0, #1]
 8000888:	9305      	str	r3, [sp, #20]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 800088a:	7a45      	ldrb	r5, [r0, #9]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 800088c:	7944      	ldrb	r4, [r0, #5]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 800088e:	9504      	str	r5, [sp, #16]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8000890:	7882      	ldrb	r2, [r0, #2]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 8000892:	7b47      	ldrb	r7, [r0, #13]
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8000894:	9207      	str	r2, [sp, #28]
 8000896:	7986      	ldrb	r6, [r0, #6]
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
	        S_Array [2][ i ]] ^ S_Array [3][ i ];
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
	]] ^ xTime3 [ S_Array [3][ i ]];
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 8000898:	4645      	mov	r5, r8
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 800089a:	9608      	str	r6, [sp, #32]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 800089c:	7a81      	ldrb	r1, [r0, #10]
 800089e:	9109      	str	r1, [sp, #36]	; 0x24
 80008a0:	7b81      	ldrb	r1, [r0, #14]
 80008a2:	910a      	str	r1, [sp, #40]	; 0x28
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80008a4:	4661      	mov	r1, ip
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80008a6:	78c3      	ldrb	r3, [r0, #3]
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	79c3      	ldrb	r3, [r0, #7]
 80008ac:	9301      	str	r3, [sp, #4]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80008ae:	7ac2      	ldrb	r2, [r0, #11]
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80008b0:	9b06      	ldr	r3, [sp, #24]
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80008b2:	9202      	str	r2, [sp, #8]
 80008b4:	7bc2      	ldrb	r2, [r0, #15]
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80008b6:	4059      	eors	r1, r3
			S_Array [2][ i ] ^ S_Array [3][ i ];
 80008b8:	9203      	str	r2, [sp, #12]
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80008ba:	4a6b      	ldr	r2, [pc, #428]	; (8000a68 <MixColumns+0x200>)
 80008bc:	5d53      	ldrb	r3, [r2, r5]
 80008be:	464d      	mov	r5, r9
 80008c0:	404b      	eors	r3, r1
	 i ] ^ xTime2 [ S_Array [3][ i ]];
 80008c2:	496a      	ldr	r1, [pc, #424]	; (8000a6c <MixColumns+0x204>)
	StateArrayTmp [3][ i ] = xTime3 [ S_Array [0][ i ]] ^ S_Array [1][ i ] ^ S_Array [2][
 80008c4:	940b      	str	r4, [sp, #44]	; 0x2c
 80008c6:	5d4d      	ldrb	r5, [r1, r5]
 80008c8:	9e05      	ldr	r6, [sp, #20]
 80008ca:	46aa      	mov	sl, r5
 80008cc:	9d04      	ldr	r5, [sp, #16]
 80008ce:	406c      	eors	r4, r5
 80008d0:	46a3      	mov	fp, r4
 80008d2:	465d      	mov	r5, fp
 80008d4:	5d94      	ldrb	r4, [r2, r6]
 80008d6:	9e08      	ldr	r6, [sp, #32]
 80008d8:	406c      	eors	r4, r5
 80008da:	5dcd      	ldrb	r5, [r1, r7]
 80008dc:	406c      	eors	r4, r5
 80008de:	4655      	mov	r5, sl
 80008e0:	406b      	eors	r3, r5
 80008e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80008e4:	0224      	lsls	r4, r4, #8
 80008e6:	406e      	eors	r6, r5
 80008e8:	46b2      	mov	sl, r6
 80008ea:	9e07      	ldr	r6, [sp, #28]
 80008ec:	4323      	orrs	r3, r4
 80008ee:	5d95      	ldrb	r5, [r2, r6]
 80008f0:	9c01      	ldr	r4, [sp, #4]
 80008f2:	46ab      	mov	fp, r5
 80008f4:	4655      	mov	r5, sl
 80008f6:	465e      	mov	r6, fp
 80008f8:	4075      	eors	r5, r6
 80008fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80008fc:	46aa      	mov	sl, r5
 80008fe:	5d8d      	ldrb	r5, [r1, r6]
 8000900:	46ab      	mov	fp, r5
 8000902:	4655      	mov	r5, sl
 8000904:	465e      	mov	r6, fp
 8000906:	4075      	eors	r5, r6
 8000908:	042d      	lsls	r5, r5, #16
 800090a:	46aa      	mov	sl, r5
 800090c:	9e00      	ldr	r6, [sp, #0]
 800090e:	9d02      	ldr	r5, [sp, #8]
 8000910:	406c      	eors	r4, r5
 8000912:	5d95      	ldrb	r5, [r2, r6]
 8000914:	9e03      	ldr	r6, [sp, #12]
 8000916:	406c      	eors	r4, r5
 8000918:	5d8d      	ldrb	r5, [r1, r6]
	StateArrayTmp [2][ i ] = S_Array [0][ i ] ^ S_Array [1][ i ] ^ xTime2 [ S_Array [2][ i
 800091a:	9e05      	ldr	r6, [sp, #20]
 800091c:	406c      	eors	r4, r5
 800091e:	4655      	mov	r5, sl
 8000920:	0624      	lsls	r4, r4, #24
 8000922:	432b      	orrs	r3, r5
 8000924:	4323      	orrs	r3, r4
 8000926:	930c      	str	r3, [sp, #48]	; 0x30
 8000928:	4644      	mov	r4, r8
 800092a:	4663      	mov	r3, ip
 800092c:	4063      	eors	r3, r4
 800092e:	9c06      	ldr	r4, [sp, #24]
 8000930:	9d04      	ldr	r5, [sp, #16]
 8000932:	5d0c      	ldrb	r4, [r1, r4]
 8000934:	5d4d      	ldrb	r5, [r1, r5]
 8000936:	4063      	eors	r3, r4
 8000938:	464c      	mov	r4, r9
 800093a:	5d14      	ldrb	r4, [r2, r4]
 800093c:	46a2      	mov	sl, r4
 800093e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8000940:	4074      	eors	r4, r6
 8000942:	406c      	eors	r4, r5
 8000944:	5dd5      	ldrb	r5, [r2, r7]
 8000946:	9e08      	ldr	r6, [sp, #32]
 8000948:	406c      	eors	r4, r5
 800094a:	4655      	mov	r5, sl
 800094c:	0224      	lsls	r4, r4, #8
 800094e:	406b      	eors	r3, r5
 8000950:	4323      	orrs	r3, r4
 8000952:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000954:	9c07      	ldr	r4, [sp, #28]
 8000956:	4066      	eors	r6, r4
 8000958:	5d4c      	ldrb	r4, [r1, r5]
 800095a:	4074      	eors	r4, r6
 800095c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800095e:	5d95      	ldrb	r5, [r2, r6]
 8000960:	9e01      	ldr	r6, [sp, #4]
 8000962:	406c      	eors	r4, r5
 8000964:	4d42      	ldr	r5, [pc, #264]	; (8000a70 <MixColumns+0x208>)
 8000966:	0424      	lsls	r4, r4, #16
 8000968:	402b      	ands	r3, r5
 800096a:	4323      	orrs	r3, r4
 800096c:	9d02      	ldr	r5, [sp, #8]
 800096e:	9c00      	ldr	r4, [sp, #0]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	4066      	eors	r6, r4
 8000974:	5d4c      	ldrb	r4, [r1, r5]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	4074      	eors	r4, r6
 800097a:	9e03      	ldr	r6, [sp, #12]
 800097c:	5d95      	ldrb	r5, [r2, r6]
	StateArrayTmp [1][ i ] = S_Array [0][ i ] ^ xTime2 [ S_Array [1][ i ]] ^ xTime3 [
 800097e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8000980:	406c      	eors	r4, r5
 8000982:	0624      	lsls	r4, r4, #24
 8000984:	4323      	orrs	r3, r4
 8000986:	930d      	str	r3, [sp, #52]	; 0x34
 8000988:	464c      	mov	r4, r9
 800098a:	4643      	mov	r3, r8
 800098c:	4063      	eors	r3, r4
 800098e:	001c      	movs	r4, r3
 8000990:	4663      	mov	r3, ip
 8000992:	5ccb      	ldrb	r3, [r1, r3]
 8000994:	4063      	eors	r3, r4
 8000996:	9c06      	ldr	r4, [sp, #24]
 8000998:	5d14      	ldrb	r4, [r2, r4]
 800099a:	46a2      	mov	sl, r4
 800099c:	9c05      	ldr	r4, [sp, #20]
 800099e:	407c      	eors	r4, r7
 80009a0:	46a3      	mov	fp, r4
 80009a2:	465d      	mov	r5, fp
 80009a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80009a6:	5d0c      	ldrb	r4, [r1, r4]
 80009a8:	406c      	eors	r4, r5
 80009aa:	9d04      	ldr	r5, [sp, #16]
 80009ac:	5d55      	ldrb	r5, [r2, r5]
 80009ae:	406c      	eors	r4, r5
 80009b0:	4655      	mov	r5, sl
 80009b2:	0224      	lsls	r4, r4, #8
 80009b4:	406b      	eors	r3, r5
 80009b6:	4323      	orrs	r3, r4
 80009b8:	9c07      	ldr	r4, [sp, #28]
 80009ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80009bc:	4074      	eors	r4, r6
 80009be:	9e08      	ldr	r6, [sp, #32]
 80009c0:	5d8e      	ldrb	r6, [r1, r6]
 80009c2:	4074      	eors	r4, r6
 80009c4:	5d56      	ldrb	r6, [r2, r5]
 80009c6:	4d2a      	ldr	r5, [pc, #168]	; (8000a70 <MixColumns+0x208>)
 80009c8:	4074      	eors	r4, r6
 80009ca:	0424      	lsls	r4, r4, #16
 80009cc:	402b      	ands	r3, r5
 80009ce:	9e00      	ldr	r6, [sp, #0]
 80009d0:	4323      	orrs	r3, r4
 80009d2:	9c03      	ldr	r4, [sp, #12]
 80009d4:	9d02      	ldr	r5, [sp, #8]
 80009d6:	4066      	eors	r6, r4
 80009d8:	0034      	movs	r4, r6
 80009da:	9e01      	ldr	r6, [sp, #4]
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	5d8e      	ldrb	r6, [r1, r6]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	4074      	eors	r4, r6
 80009e4:	5d56      	ldrb	r6, [r2, r5]
 80009e6:	4074      	eors	r4, r6
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 80009e8:	464e      	mov	r6, r9
 80009ea:	0624      	lsls	r4, r4, #24
 80009ec:	4323      	orrs	r3, r4
 80009ee:	9c06      	ldr	r4, [sp, #24]
 80009f0:	4074      	eors	r4, r6
 80009f2:	0026      	movs	r6, r4
 80009f4:	4644      	mov	r4, r8
 80009f6:	5d0c      	ldrb	r4, [r1, r4]
 80009f8:	4066      	eors	r6, r4
 80009fa:	4664      	mov	r4, ip
 80009fc:	5d14      	ldrb	r4, [r2, r4]
 80009fe:	9d04      	ldr	r5, [sp, #16]
 8000a00:	4066      	eors	r6, r4
 8000a02:	407d      	eors	r5, r7
 8000a04:	9f05      	ldr	r7, [sp, #20]
 8000a06:	9c08      	ldr	r4, [sp, #32]
 8000a08:	5dcf      	ldrb	r7, [r1, r7]
 8000a0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a0c:	406f      	eors	r7, r5
 8000a0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000a12:	5d55      	ldrb	r5, [r2, r5]
 8000a14:	9311      	str	r3, [sp, #68]	; 0x44
 8000a16:	406f      	eors	r7, r5
 8000a18:	023f      	lsls	r7, r7, #8
 8000a1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a1c:	433e      	orrs	r6, r7
 8000a1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000a20:	406f      	eors	r7, r5
 8000a22:	9d07      	ldr	r5, [sp, #28]
 8000a24:	5d4d      	ldrb	r5, [r1, r5]
 8000a26:	407d      	eors	r5, r7
 8000a28:	5d17      	ldrb	r7, [r2, r4]
 8000a2a:	407d      	eors	r5, r7
 8000a2c:	042d      	lsls	r5, r5, #16
 8000a2e:	9f03      	ldr	r7, [sp, #12]
 8000a30:	432e      	orrs	r6, r5
 8000a32:	9d02      	ldr	r5, [sp, #8]
 8000a34:	0236      	lsls	r6, r6, #8
 8000a36:	406f      	eors	r7, r5
 8000a38:	003c      	movs	r4, r7
 8000a3a:	9d00      	ldr	r5, [sp, #0]
 8000a3c:	0a36      	lsrs	r6, r6, #8
 8000a3e:	5d4f      	ldrb	r7, [r1, r5]
	}
	memcpy(S_Array, StateArrayTmp, 4 * 4 * sizeof(unsigned char));
 8000a40:	a90e      	add	r1, sp, #56	; 0x38
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8000a42:	4067      	eors	r7, r4
 8000a44:	9c01      	ldr	r4, [sp, #4]
 8000a46:	5d12      	ldrb	r2, [r2, r4]
 8000a48:	4057      	eors	r7, r2
 8000a4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000a4c:	063f      	lsls	r7, r7, #24
 8000a4e:	9210      	str	r2, [sp, #64]	; 0x40
 8000a50:	433e      	orrs	r6, r7
	memcpy(S_Array, StateArrayTmp, 4 * 4 * sizeof(unsigned char));
 8000a52:	2210      	movs	r2, #16
	StateArrayTmp [0][ i ] = xTime2 [ S_Array [0][ i ]] ^ xTime3 [ S_Array [1][ i ]] ^
 8000a54:	960e      	str	r6, [sp, #56]	; 0x38
	memcpy(S_Array, StateArrayTmp, 4 * 4 * sizeof(unsigned char));
 8000a56:	f001 fb75 	bl	8002144 <memcpy>
}
 8000a5a:	b013      	add	sp, #76	; 0x4c
 8000a5c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a5e:	46bb      	mov	fp, r7
 8000a60:	46b2      	mov	sl, r6
 8000a62:	46a9      	mov	r9, r5
 8000a64:	46a0      	mov	r8, r4
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a68:	0800338c 	.word	0x0800338c
 8000a6c:	0800348c 	.word	0x0800348c
 8000a70:	ff00ffff 	.word	0xff00ffff

08000a74 <simpleserial_put.constprop.0>:
ERROR:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
 8000a74:	b530      	push	{r4, r5, lr}
 8000a76:	b0c1      	sub	sp, #260	; 0x104
{
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8000a78:	466a      	mov	r2, sp
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	7013      	strb	r3, [r2, #0]
	data_buf[1] = c;
	data_buf[2] = size;
 8000a7e:	2301      	movs	r3, #1
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8000a80:	7809      	ldrb	r1, [r1, #0]
	data_buf[2] = size;
 8000a82:	7093      	strb	r3, [r2, #2]
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000a84:	b243      	sxtb	r3, r0
	data_buf[1] = c;
 8000a86:	7050      	strb	r0, [r2, #1]
		data_buf[i + 3] = output[i];
 8000a88:	70d1      	strb	r1, [r2, #3]
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da00      	bge.n	8000a90 <simpleserial_put.constprop.0+0x1c>
 8000a8e:	e145      	b.n	8000d1c <simpleserial_put.constprop.0+0x2a8>
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	b2d3      	uxtb	r3, r2
 8000a94:	b252      	sxtb	r2, r2
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	da00      	bge.n	8000a9c <simpleserial_put.constprop.0+0x28>
 8000a9a:	e139      	b.n	8000d10 <simpleserial_put.constprop.0+0x29c>
 8000a9c:	005a      	lsls	r2, r3, #1
 8000a9e:	b2d3      	uxtb	r3, r2
 8000aa0:	b252      	sxtb	r2, r2
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	da00      	bge.n	8000aa8 <simpleserial_put.constprop.0+0x34>
 8000aa6:	e12d      	b.n	8000d04 <simpleserial_put.constprop.0+0x290>
 8000aa8:	005a      	lsls	r2, r3, #1
 8000aaa:	b2d3      	uxtb	r3, r2
 8000aac:	b252      	sxtb	r2, r2
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	da00      	bge.n	8000ab4 <simpleserial_put.constprop.0+0x40>
 8000ab2:	e121      	b.n	8000cf8 <simpleserial_put.constprop.0+0x284>
 8000ab4:	005a      	lsls	r2, r3, #1
 8000ab6:	b2d3      	uxtb	r3, r2
 8000ab8:	b252      	sxtb	r2, r2
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	da00      	bge.n	8000ac0 <simpleserial_put.constprop.0+0x4c>
 8000abe:	e115      	b.n	8000cec <simpleserial_put.constprop.0+0x278>
 8000ac0:	005a      	lsls	r2, r3, #1
 8000ac2:	b2d3      	uxtb	r3, r2
 8000ac4:	b252      	sxtb	r2, r2
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	da00      	bge.n	8000acc <simpleserial_put.constprop.0+0x58>
 8000aca:	e109      	b.n	8000ce0 <simpleserial_put.constprop.0+0x26c>
 8000acc:	005a      	lsls	r2, r3, #1
 8000ace:	b2d3      	uxtb	r3, r2
 8000ad0:	b252      	sxtb	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	da00      	bge.n	8000ad8 <simpleserial_put.constprop.0+0x64>
 8000ad6:	e0fd      	b.n	8000cd4 <simpleserial_put.constprop.0+0x260>
 8000ad8:	005a      	lsls	r2, r3, #1
 8000ada:	b2d3      	uxtb	r3, r2
 8000adc:	b252      	sxtb	r2, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	da00      	bge.n	8000ae6 <simpleserial_put.constprop.0+0x72>
 8000ae4:	e0f2      	b.n	8000ccc <simpleserial_put.constprop.0+0x258>
 8000ae6:	b2db      	uxtb	r3, r3
		crc ^= *buf++;
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4053      	eors	r3, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000aec:	b25a      	sxtb	r2, r3
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	da00      	bge.n	8000af6 <simpleserial_put.constprop.0+0x82>
 8000af4:	e0e5      	b.n	8000cc2 <simpleserial_put.constprop.0+0x24e>
 8000af6:	b2dc      	uxtb	r4, r3
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	da00      	bge.n	8000b00 <simpleserial_put.constprop.0+0x8c>
 8000afe:	e0da      	b.n	8000cb6 <simpleserial_put.constprop.0+0x242>
 8000b00:	0062      	lsls	r2, r4, #1
 8000b02:	b2d3      	uxtb	r3, r2
 8000b04:	b252      	sxtb	r2, r2
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	da00      	bge.n	8000b0c <simpleserial_put.constprop.0+0x98>
 8000b0a:	e0ce      	b.n	8000caa <simpleserial_put.constprop.0+0x236>
 8000b0c:	005a      	lsls	r2, r3, #1
 8000b0e:	b2d3      	uxtb	r3, r2
 8000b10:	b252      	sxtb	r2, r2
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	da00      	bge.n	8000b18 <simpleserial_put.constprop.0+0xa4>
 8000b16:	e0c2      	b.n	8000c9e <simpleserial_put.constprop.0+0x22a>
 8000b18:	005a      	lsls	r2, r3, #1
 8000b1a:	b2d3      	uxtb	r3, r2
 8000b1c:	b252      	sxtb	r2, r2
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	da00      	bge.n	8000b24 <simpleserial_put.constprop.0+0xb0>
 8000b22:	e0b6      	b.n	8000c92 <simpleserial_put.constprop.0+0x21e>
 8000b24:	005a      	lsls	r2, r3, #1
 8000b26:	b2d3      	uxtb	r3, r2
 8000b28:	b252      	sxtb	r2, r2
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	da00      	bge.n	8000b30 <simpleserial_put.constprop.0+0xbc>
 8000b2e:	e0aa      	b.n	8000c86 <simpleserial_put.constprop.0+0x212>
 8000b30:	005a      	lsls	r2, r3, #1
 8000b32:	b2d3      	uxtb	r3, r2
 8000b34:	b252      	sxtb	r2, r2
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	da00      	bge.n	8000b3c <simpleserial_put.constprop.0+0xc8>
 8000b3a:	e09e      	b.n	8000c7a <simpleserial_put.constprop.0+0x206>
 8000b3c:	005a      	lsls	r2, r3, #1
 8000b3e:	b2d3      	uxtb	r3, r2
 8000b40:	b252      	sxtb	r2, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	da00      	bge.n	8000b4a <simpleserial_put.constprop.0+0xd6>
 8000b48:	e093      	b.n	8000c72 <simpleserial_put.constprop.0+0x1fe>
 8000b4a:	b2db      	uxtb	r3, r3
		crc ^= *buf++;
 8000b4c:	404b      	eors	r3, r1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000b4e:	b25a      	sxtb	r2, r3
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	da00      	bge.n	8000b58 <simpleserial_put.constprop.0+0xe4>
 8000b56:	e087      	b.n	8000c68 <simpleserial_put.constprop.0+0x1f4>
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	b25c      	sxtb	r4, r3
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	da00      	bge.n	8000b62 <simpleserial_put.constprop.0+0xee>
 8000b60:	e07c      	b.n	8000c5c <simpleserial_put.constprop.0+0x1e8>
 8000b62:	0052      	lsls	r2, r2, #1
 8000b64:	b2d3      	uxtb	r3, r2
 8000b66:	b252      	sxtb	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	da00      	bge.n	8000b6e <simpleserial_put.constprop.0+0xfa>
 8000b6c:	e070      	b.n	8000c50 <simpleserial_put.constprop.0+0x1dc>
 8000b6e:	005a      	lsls	r2, r3, #1
 8000b70:	b2d3      	uxtb	r3, r2
 8000b72:	b252      	sxtb	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	db65      	blt.n	8000c44 <simpleserial_put.constprop.0+0x1d0>
 8000b78:	005a      	lsls	r2, r3, #1
 8000b7a:	b2d3      	uxtb	r3, r2
 8000b7c:	b252      	sxtb	r2, r2
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	db5a      	blt.n	8000c38 <simpleserial_put.constprop.0+0x1c4>
 8000b82:	005a      	lsls	r2, r3, #1
 8000b84:	b2d3      	uxtb	r3, r2
 8000b86:	b252      	sxtb	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	db4f      	blt.n	8000c2c <simpleserial_put.constprop.0+0x1b8>
 8000b8c:	005a      	lsls	r2, r3, #1
 8000b8e:	b2d3      	uxtb	r3, r2
 8000b90:	b252      	sxtb	r2, r2
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	db44      	blt.n	8000c20 <simpleserial_put.constprop.0+0x1ac>
 8000b96:	005a      	lsls	r2, r3, #1
 8000b98:	b2d3      	uxtb	r3, r2
 8000b9a:	b252      	sxtb	r2, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	da01      	bge.n	8000ba6 <simpleserial_put.constprop.0+0x132>
 8000ba2:	224d      	movs	r2, #77	; 0x4d
 8000ba4:	4053      	eors	r3, r2
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8000ba6:	466a      	mov	r2, sp
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000ba8:	b2db      	uxtb	r3, r3
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8000baa:	7113      	strb	r3, [r2, #4]
	data_buf[i + 4] = 0x00;
 8000bac:	2300      	movs	r3, #0
 8000bae:	7153      	strb	r3, [r2, #5]
		if (buf[i] == FRAME_BYTE) {
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d101      	bne.n	8000bb8 <simpleserial_put.constprop.0+0x144>
			buf[last] = i - last;
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	7013      	strb	r3, [r2, #0]
		if (buf[i] == FRAME_BYTE) {
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	d119      	bne.n	8000bf0 <simpleserial_put.constprop.0+0x17c>
			buf[last] = i - last;
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	aa40      	add	r2, sp, #256	; 0x100
 8000bc0:	18d2      	adds	r2, r2, r3
 8000bc2:	3a01      	subs	r2, #1
 8000bc4:	3aff      	subs	r2, #255	; 0xff
 8000bc6:	1acb      	subs	r3, r1, r3
 8000bc8:	7013      	strb	r3, [r2, #0]
		if (buf[i] == FRAME_BYTE) {
 8000bca:	466b      	mov	r3, sp
 8000bcc:	791a      	ldrb	r2, [r3, #4]
	for (; i < len; i++) {
 8000bce:	2303      	movs	r3, #3
		if (buf[i] == FRAME_BYTE) {
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d011      	beq.n	8000bf8 <simpleserial_put.constprop.0+0x184>
 8000bd4:	466a      	mov	r2, sp
 8000bd6:	7952      	ldrb	r2, [r2, #5]
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d019      	beq.n	8000c10 <simpleserial_put.constprop.0+0x19c>
	for (; i < len; i++) {
 8000bdc:	466c      	mov	r4, sp
 8000bde:	1da5      	adds	r5, r4, #6
	stuff_data(data_buf, i + 5);
	for (int i = 0; i < size + 5; i++) {
		putch(data_buf[i]);
 8000be0:	7820      	ldrb	r0, [r4, #0]
	for (int i = 0; i < size + 5; i++) {
 8000be2:	3401      	adds	r4, #1
		putch(data_buf[i]);
 8000be4:	f000 fbc0 	bl	8001368 <putch>
	for (int i = 0; i < size + 5; i++) {
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d1f9      	bne.n	8000be0 <simpleserial_put.constprop.0+0x16c>
	}
}
 8000bec:	b041      	add	sp, #260	; 0x104
 8000bee:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8000bf0:	466a      	mov	r2, sp
 8000bf2:	7912      	ldrb	r2, [r2, #4]
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d10b      	bne.n	8000c10 <simpleserial_put.constprop.0+0x19c>
			buf[last] = i - last;
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	aa40      	add	r2, sp, #256	; 0x100
 8000bfc:	18d2      	adds	r2, r2, r3
 8000bfe:	3a01      	subs	r2, #1
 8000c00:	3aff      	subs	r2, #255	; 0xff
 8000c02:	1acb      	subs	r3, r1, r3
 8000c04:	7013      	strb	r3, [r2, #0]
		if (buf[i] == FRAME_BYTE) {
 8000c06:	466a      	mov	r2, sp
 8000c08:	7952      	ldrb	r2, [r2, #5]
	for (; i < len; i++) {
 8000c0a:	2304      	movs	r3, #4
		if (buf[i] == FRAME_BYTE) {
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d1e5      	bne.n	8000bdc <simpleserial_put.constprop.0+0x168>
			buf[last] = i - last;
 8000c10:	2105      	movs	r1, #5
 8000c12:	aa40      	add	r2, sp, #256	; 0x100
 8000c14:	18d2      	adds	r2, r2, r3
 8000c16:	3a01      	subs	r2, #1
 8000c18:	3aff      	subs	r2, #255	; 0xff
 8000c1a:	1acb      	subs	r3, r1, r3
 8000c1c:	7013      	strb	r3, [r2, #0]
			last = i;
 8000c1e:	e7dd      	b.n	8000bdc <simpleserial_put.constprop.0+0x168>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000c20:	224d      	movs	r2, #77	; 0x4d
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4053      	eors	r3, r2
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	e7b7      	b.n	8000b9c <simpleserial_put.constprop.0+0x128>
 8000c2c:	224d      	movs	r2, #77	; 0x4d
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4053      	eors	r3, r2
 8000c32:	b25a      	sxtb	r2, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	e7ac      	b.n	8000b92 <simpleserial_put.constprop.0+0x11e>
 8000c38:	224d      	movs	r2, #77	; 0x4d
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4053      	eors	r3, r2
 8000c3e:	b25a      	sxtb	r2, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	e7a1      	b.n	8000b88 <simpleserial_put.constprop.0+0x114>
 8000c44:	224d      	movs	r2, #77	; 0x4d
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4053      	eors	r3, r2
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	e796      	b.n	8000b7e <simpleserial_put.constprop.0+0x10a>
 8000c50:	224d      	movs	r2, #77	; 0x4d
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4053      	eors	r3, r2
 8000c56:	b25a      	sxtb	r2, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	e78b      	b.n	8000b74 <simpleserial_put.constprop.0+0x100>
 8000c5c:	0053      	lsls	r3, r2, #1
 8000c5e:	224d      	movs	r2, #77	; 0x4d
 8000c60:	4053      	eors	r3, r2
 8000c62:	b25a      	sxtb	r2, r3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	e77f      	b.n	8000b68 <simpleserial_put.constprop.0+0xf4>
 8000c68:	224d      	movs	r2, #77	; 0x4d
 8000c6a:	405a      	eors	r2, r3
 8000c6c:	b254      	sxtb	r4, r2
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	e774      	b.n	8000b5c <simpleserial_put.constprop.0+0xe8>
 8000c72:	224d      	movs	r2, #77	; 0x4d
 8000c74:	4053      	eors	r3, r2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	e768      	b.n	8000b4c <simpleserial_put.constprop.0+0xd8>
 8000c7a:	224d      	movs	r2, #77	; 0x4d
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4053      	eors	r3, r2
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	e75d      	b.n	8000b42 <simpleserial_put.constprop.0+0xce>
 8000c86:	224d      	movs	r2, #77	; 0x4d
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4053      	eors	r3, r2
 8000c8c:	b25a      	sxtb	r2, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	e751      	b.n	8000b36 <simpleserial_put.constprop.0+0xc2>
 8000c92:	224d      	movs	r2, #77	; 0x4d
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4053      	eors	r3, r2
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	e745      	b.n	8000b2a <simpleserial_put.constprop.0+0xb6>
 8000c9e:	224d      	movs	r2, #77	; 0x4d
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4053      	eors	r3, r2
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	e739      	b.n	8000b1e <simpleserial_put.constprop.0+0xaa>
 8000caa:	224d      	movs	r2, #77	; 0x4d
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4053      	eors	r3, r2
 8000cb0:	b25a      	sxtb	r2, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	e72d      	b.n	8000b12 <simpleserial_put.constprop.0+0x9e>
 8000cb6:	224d      	movs	r2, #77	; 0x4d
 8000cb8:	0063      	lsls	r3, r4, #1
 8000cba:	4053      	eors	r3, r2
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	e721      	b.n	8000b06 <simpleserial_put.constprop.0+0x92>
 8000cc2:	244d      	movs	r4, #77	; 0x4d
 8000cc4:	405c      	eors	r4, r3
 8000cc6:	b262      	sxtb	r2, r4
 8000cc8:	b2e4      	uxtb	r4, r4
 8000cca:	e716      	b.n	8000afa <simpleserial_put.constprop.0+0x86>
 8000ccc:	224d      	movs	r2, #77	; 0x4d
 8000cce:	4053      	eors	r3, r2
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	e709      	b.n	8000ae8 <simpleserial_put.constprop.0+0x74>
 8000cd4:	224d      	movs	r2, #77	; 0x4d
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4053      	eors	r3, r2
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	e6fe      	b.n	8000ade <simpleserial_put.constprop.0+0x6a>
 8000ce0:	224d      	movs	r2, #77	; 0x4d
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4053      	eors	r3, r2
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	e6f2      	b.n	8000ad2 <simpleserial_put.constprop.0+0x5e>
 8000cec:	224d      	movs	r2, #77	; 0x4d
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4053      	eors	r3, r2
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	e6e6      	b.n	8000ac6 <simpleserial_put.constprop.0+0x52>
 8000cf8:	224d      	movs	r2, #77	; 0x4d
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4053      	eors	r3, r2
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	e6da      	b.n	8000aba <simpleserial_put.constprop.0+0x46>
 8000d04:	224d      	movs	r2, #77	; 0x4d
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4053      	eors	r3, r2
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	e6ce      	b.n	8000aae <simpleserial_put.constprop.0+0x3a>
 8000d10:	224d      	movs	r2, #77	; 0x4d
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4053      	eors	r3, r2
 8000d16:	b25a      	sxtb	r2, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	e6c2      	b.n	8000aa2 <simpleserial_put.constprop.0+0x2e>
 8000d1c:	224d      	movs	r2, #77	; 0x4d
 8000d1e:	0043      	lsls	r3, r0, #1
 8000d20:	4053      	eors	r3, r2
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	e6b6      	b.n	8000a96 <simpleserial_put.constprop.0+0x22>

08000d28 <check_version>:
{
 8000d28:	b500      	push	{lr}
 8000d2a:	b083      	sub	sp, #12
	uint8_t ver = SS_VER;
 8000d2c:	466b      	mov	r3, sp
 8000d2e:	1dd9      	adds	r1, r3, #7
 8000d30:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8000d32:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 8000d34:	700b      	strb	r3, [r1, #0]
	simpleserial_put('r', 1, &ver);
 8000d36:	f7ff fe9d 	bl	8000a74 <simpleserial_put.constprop.0>
}
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd00      	pop	{pc}

08000d40 <simpleserial_init>:
{
 8000d40:	b510      	push	{r4, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8000d42:	4c15      	ldr	r4, [pc, #84]	; (8000d98 <simpleserial_init+0x58>)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	2b0f      	cmp	r3, #15
 8000d48:	dc1c      	bgt.n	8000d84 <simpleserial_init+0x44>
	commands[num_commands].c   = c;
 8000d4a:	2076      	movs	r0, #118	; 0x76
 8000d4c:	005a      	lsls	r2, r3, #1
 8000d4e:	4913      	ldr	r1, [pc, #76]	; (8000d9c <simpleserial_init+0x5c>)
 8000d50:	18d2      	adds	r2, r2, r3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	5450      	strb	r0, [r2, r1]
	commands[num_commands].len = len;
 8000d56:	188a      	adds	r2, r1, r2
 8000d58:	2100      	movs	r1, #0
 8000d5a:	6051      	str	r1, [r2, #4]
	commands[num_commands].fp  = fp;
 8000d5c:	4910      	ldr	r1, [pc, #64]	; (8000da0 <simpleserial_init+0x60>)
	num_commands++;
 8000d5e:	3301      	adds	r3, #1
	commands[num_commands].fp  = fp;
 8000d60:	6091      	str	r1, [r2, #8]
	num_commands++;
 8000d62:	6023      	str	r3, [r4, #0]
	if(num_commands >= MAX_SS_CMDS) {
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	dc13      	bgt.n	8000d90 <simpleserial_init+0x50>
	commands[num_commands].c   = c;
 8000d68:	2077      	movs	r0, #119	; 0x77
 8000d6a:	005a      	lsls	r2, r3, #1
 8000d6c:	490b      	ldr	r1, [pc, #44]	; (8000d9c <simpleserial_init+0x5c>)
 8000d6e:	18d2      	adds	r2, r2, r3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	5450      	strb	r0, [r2, r1]
	commands[num_commands].len = len;
 8000d74:	188a      	adds	r2, r1, r2
 8000d76:	2100      	movs	r1, #0
 8000d78:	6051      	str	r1, [r2, #4]
	commands[num_commands].fp  = fp;
 8000d7a:	490a      	ldr	r1, [pc, #40]	; (8000da4 <simpleserial_init+0x64>)
	num_commands++;
 8000d7c:	3301      	adds	r3, #1
	commands[num_commands].fp  = fp;
 8000d7e:	6091      	str	r1, [r2, #8]
	num_commands++;
 8000d80:	6023      	str	r3, [r4, #0]
}
 8000d82:	bd10      	pop	{r4, pc}
		putch('a');
 8000d84:	2061      	movs	r0, #97	; 0x61
 8000d86:	f000 faef 	bl	8001368 <putch>
	if(num_commands >= MAX_SS_CMDS) {
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	ddeb      	ble.n	8000d68 <simpleserial_init+0x28>
		putch('a');
 8000d90:	2061      	movs	r0, #97	; 0x61
 8000d92:	f000 fae9 	bl	8001368 <putch>
		return 1;
 8000d96:	e7f4      	b.n	8000d82 <simpleserial_init+0x42>
 8000d98:	20000198 	.word	0x20000198
 8000d9c:	2000019c 	.word	0x2000019c
 8000da0:	08000d29 	.word	0x08000d29
 8000da4:	08001165 	.word	0x08001165

08000da8 <simpleserial_addcmd>:
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8000daa:	4e0e      	ldr	r6, [pc, #56]	; (8000de4 <simpleserial_addcmd+0x3c>)
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	dc0d      	bgt.n	8000dce <simpleserial_addcmd+0x26>
	if(len >= MAX_SS_LEN) {
 8000db2:	29ff      	cmp	r1, #255	; 0xff
 8000db4:	d810      	bhi.n	8000dd8 <simpleserial_addcmd+0x30>
	commands[num_commands].c   = c;
 8000db6:	005c      	lsls	r4, r3, #1
 8000db8:	4d0b      	ldr	r5, [pc, #44]	; (8000de8 <simpleserial_addcmd+0x40>)
 8000dba:	18e4      	adds	r4, r4, r3
 8000dbc:	00a4      	lsls	r4, r4, #2
 8000dbe:	5560      	strb	r0, [r4, r5]
	return 0;
 8000dc0:	2000      	movs	r0, #0
	commands[num_commands].len = len;
 8000dc2:	192c      	adds	r4, r5, r4
	num_commands++;
 8000dc4:	3301      	adds	r3, #1
	commands[num_commands].len = len;
 8000dc6:	6061      	str	r1, [r4, #4]
	commands[num_commands].fp  = fp;
 8000dc8:	60a2      	str	r2, [r4, #8]
	num_commands++;
 8000dca:	6033      	str	r3, [r6, #0]
}
 8000dcc:	bd70      	pop	{r4, r5, r6, pc}
		putch('a');
 8000dce:	2061      	movs	r0, #97	; 0x61
 8000dd0:	f000 faca 	bl	8001368 <putch>
		return 1;
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e7f9      	b.n	8000dcc <simpleserial_addcmd+0x24>
		putch('b');
 8000dd8:	2062      	movs	r0, #98	; 0x62
 8000dda:	f000 fac5 	bl	8001368 <putch>
		return 1;
 8000dde:	2001      	movs	r0, #1
 8000de0:	e7f4      	b.n	8000dcc <simpleserial_addcmd+0x24>
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	20000198 	.word	0x20000198
 8000de8:	2000019c 	.word	0x2000019c

08000dec <simpleserial_get>:
{
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	46de      	mov	lr, fp
 8000df0:	4645      	mov	r5, r8
 8000df2:	4657      	mov	r7, sl
 8000df4:	464e      	mov	r6, r9
 8000df6:	b5e0      	push	{r5, r6, r7, lr}
 8000df8:	b0c3      	sub	sp, #268	; 0x10c
	uint8_t err = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	466a      	mov	r2, sp
 8000dfe:	ad02      	add	r5, sp, #8
 8000e00:	71d3      	strb	r3, [r2, #7]
	for (int i = 0; i < 4; i++) {
 8000e02:	ab03      	add	r3, sp, #12
 8000e04:	002c      	movs	r4, r5
 8000e06:	469b      	mov	fp, r3
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8000e08:	f000 fa94 	bl	8001334 <getch>
 8000e0c:	7020      	strb	r0, [r4, #0]
		if (data_buf[i] == FRAME_BYTE) {
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d04f      	beq.n	8000eb2 <simpleserial_get+0xc6>
	for (int i = 0; i < 4; i++) {
 8000e12:	3401      	adds	r4, #1
 8000e14:	45a3      	cmp	fp, r4
 8000e16:	d1f7      	bne.n	8000e08 <simpleserial_get+0x1c>
	buf[0] = 0x00;
 8000e18:	2300      	movs	r3, #0
	uint8_t next = buf[0];
 8000e1a:	782c      	ldrb	r4, [r5, #0]
	buf[0] = 0x00;
 8000e1c:	702b      	strb	r3, [r5, #0]
	while ((next < len) && tmp != 0) {
 8000e1e:	2c03      	cmp	r4, #3
 8000e20:	d80c      	bhi.n	8000e3c <simpleserial_get+0x50>
 8000e22:	2c00      	cmp	r4, #0
 8000e24:	d00a      	beq.n	8000e3c <simpleserial_get+0x50>
		buf[next] = FRAME_BYTE;
 8000e26:	2100      	movs	r1, #0
 8000e28:	e001      	b.n	8000e2e <simpleserial_get+0x42>
	while ((next < len) && tmp != 0) {
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <simpleserial_get+0x50>
		tmp = buf[next];
 8000e2e:	5d2b      	ldrb	r3, [r5, r4]
 8000e30:	192a      	adds	r2, r5, r4
		next += tmp;
 8000e32:	191c      	adds	r4, r3, r4
 8000e34:	b2e4      	uxtb	r4, r4
		buf[next] = FRAME_BYTE;
 8000e36:	7011      	strb	r1, [r2, #0]
	while ((next < len) && tmp != 0) {
 8000e38:	2c03      	cmp	r4, #3
 8000e3a:	d9f6      	bls.n	8000e2a <simpleserial_get+0x3e>
	for(c = 0; c < num_commands; c++)
 8000e3c:	4b6c      	ldr	r3, [pc, #432]	; (8000ff0 <simpleserial_get+0x204>)
 8000e3e:	2700      	movs	r7, #0
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	2900      	cmp	r1, #0
 8000e44:	dd39      	ble.n	8000eba <simpleserial_get+0xce>
		if(commands[c].c == data_buf[1])
 8000e46:	2200      	movs	r2, #0
	for(c = 0; c < num_commands; c++)
 8000e48:	2700      	movs	r7, #0
		if(commands[c].c == data_buf[1])
 8000e4a:	786e      	ldrb	r6, [r5, #1]
 8000e4c:	4869      	ldr	r0, [pc, #420]	; (8000ff4 <simpleserial_get+0x208>)
 8000e4e:	e004      	b.n	8000e5a <simpleserial_get+0x6e>
	for(c = 0; c < num_commands; c++)
 8000e50:	3201      	adds	r2, #1
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	0017      	movs	r7, r2
 8000e56:	428a      	cmp	r2, r1
 8000e58:	da2f      	bge.n	8000eba <simpleserial_get+0xce>
		if(commands[c].c == data_buf[1])
 8000e5a:	007b      	lsls	r3, r7, #1
 8000e5c:	19db      	adds	r3, r3, r7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	5cc3      	ldrb	r3, [r0, r3]
 8000e62:	42b3      	cmp	r3, r6
 8000e64:	d1f4      	bne.n	8000e50 <simpleserial_get+0x64>
	int i = 4;
 8000e66:	2204      	movs	r2, #4
	if ((data_buf[3] + 5) < next_frame) {
 8000e68:	78eb      	ldrb	r3, [r5, #3]
 8000e6a:	46d8      	mov	r8, fp
 8000e6c:	3305      	adds	r3, #5
	int i = 4;
 8000e6e:	4691      	mov	r9, r2
	if ((data_buf[3] + 5) < next_frame) {
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	da18      	bge.n	8000ea6 <simpleserial_get+0xba>
		err = SS_ERR_LEN;
 8000e74:	2304      	movs	r3, #4
 8000e76:	466a      	mov	r2, sp
 8000e78:	71d3      	strb	r3, [r2, #7]
	simpleserial_put('e', 0x01, &err);
 8000e7a:	466b      	mov	r3, sp
 8000e7c:	2065      	movs	r0, #101	; 0x65
 8000e7e:	1dd9      	adds	r1, r3, #7
 8000e80:	f7ff fdf8 	bl	8000a74 <simpleserial_put.constprop.0>
}
 8000e84:	b043      	add	sp, #268	; 0x10c
 8000e86:	bcf0      	pop	{r4, r5, r6, r7}
 8000e88:	46bb      	mov	fp, r7
 8000e8a:	46b2      	mov	sl, r6
 8000e8c:	46a9      	mov	r9, r5
 8000e8e:	46a0      	mov	r8, r4
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (; i < data_buf[3] + 5; i++) {
 8000e92:	464b      	mov	r3, r9
 8000e94:	1c5e      	adds	r6, r3, #1
 8000e96:	2301      	movs	r3, #1
 8000e98:	469c      	mov	ip, r3
 8000e9a:	78eb      	ldrb	r3, [r5, #3]
 8000e9c:	44e0      	add	r8, ip
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	42b3      	cmp	r3, r6
 8000ea2:	db10      	blt.n	8000ec6 <simpleserial_get+0xda>
 8000ea4:	46b1      	mov	r9, r6
		data_buf[i] = getch();
 8000ea6:	f000 fa45 	bl	8001334 <getch>
 8000eaa:	4643      	mov	r3, r8
 8000eac:	7018      	strb	r0, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d1ef      	bne.n	8000e92 <simpleserial_get+0xa6>
			err = SS_ERR_FRAME_BYTE;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	466a      	mov	r2, sp
 8000eb6:	71d3      	strb	r3, [r2, #7]
			goto ERROR;
 8000eb8:	e7df      	b.n	8000e7a <simpleserial_get+0x8e>
	if (c == num_commands) {
 8000eba:	428f      	cmp	r7, r1
 8000ebc:	d1d3      	bne.n	8000e66 <simpleserial_get+0x7a>
		err = SS_ERR_CMD;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	466a      	mov	r2, sp
 8000ec2:	71d3      	strb	r3, [r2, #7]
		goto ERROR;
 8000ec4:	e7d9      	b.n	8000e7a <simpleserial_get+0x8e>
	data_buf[i] = getch();
 8000ec6:	f000 fa35 	bl	8001334 <getch>
 8000eca:	55a8      	strb	r0, [r5, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d1d1      	bne.n	8000e74 <simpleserial_get+0x88>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8000ed0:	b2f3      	uxtb	r3, r6
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	1b1b      	subs	r3, r3, r4
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	469c      	mov	ip, r3
	uint8_t next = buf[0];
 8000edc:	5d2b      	ldrb	r3, [r5, r4]
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8000ede:	192a      	adds	r2, r5, r4
	buf[0] = 0x00;
 8000ee0:	7010      	strb	r0, [r2, #0]
	while ((next < len) && tmp != 0) {
 8000ee2:	459c      	cmp	ip, r3
 8000ee4:	d90e      	bls.n	8000f04 <simpleserial_get+0x118>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00c      	beq.n	8000f04 <simpleserial_get+0x118>
		buf[next] = FRAME_BYTE;
 8000eea:	2100      	movs	r1, #0
 8000eec:	4688      	mov	r8, r1
 8000eee:	e001      	b.n	8000ef4 <simpleserial_get+0x108>
	while ((next < len) && tmp != 0) {
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	d007      	beq.n	8000f04 <simpleserial_get+0x118>
		buf[next] = FRAME_BYTE;
 8000ef4:	4646      	mov	r6, r8
		tmp = buf[next];
 8000ef6:	5cd1      	ldrb	r1, [r2, r3]
 8000ef8:	18d4      	adds	r4, r2, r3
		next += tmp;
 8000efa:	185b      	adds	r3, r3, r1
 8000efc:	b2db      	uxtb	r3, r3
		buf[next] = FRAME_BYTE;
 8000efe:	7026      	strb	r6, [r4, #0]
	while ((next < len) && tmp != 0) {
 8000f00:	459c      	cmp	ip, r3
 8000f02:	d8f5      	bhi.n	8000ef0 <simpleserial_get+0x104>
	while (len--) {
 8000f04:	4652      	mov	r2, sl
 8000f06:	2409      	movs	r4, #9
 8000f08:	3a03      	subs	r2, #3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000f0a:	214d      	movs	r1, #77	; 0x4d
	while (len--) {
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	446c      	add	r4, sp
 8000f10:	e02a      	b.n	8000f68 <simpleserial_get+0x17c>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000f12:	0058      	lsls	r0, r3, #1
 8000f14:	b2c3      	uxtb	r3, r0
 8000f16:	b240      	sxtb	r0, r0
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	db30      	blt.n	8000f7e <simpleserial_get+0x192>
 8000f1c:	0058      	lsls	r0, r3, #1
 8000f1e:	b2c3      	uxtb	r3, r0
 8000f20:	b240      	sxtb	r0, r0
 8000f22:	2800      	cmp	r0, #0
 8000f24:	db31      	blt.n	8000f8a <simpleserial_get+0x19e>
 8000f26:	0058      	lsls	r0, r3, #1
 8000f28:	b2c3      	uxtb	r3, r0
 8000f2a:	b240      	sxtb	r0, r0
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	db32      	blt.n	8000f96 <simpleserial_get+0x1aa>
 8000f30:	0058      	lsls	r0, r3, #1
 8000f32:	b2c3      	uxtb	r3, r0
 8000f34:	b240      	sxtb	r0, r0
 8000f36:	2800      	cmp	r0, #0
 8000f38:	db33      	blt.n	8000fa2 <simpleserial_get+0x1b6>
 8000f3a:	0058      	lsls	r0, r3, #1
 8000f3c:	b2c3      	uxtb	r3, r0
 8000f3e:	b240      	sxtb	r0, r0
 8000f40:	2800      	cmp	r0, #0
 8000f42:	db34      	blt.n	8000fae <simpleserial_get+0x1c2>
 8000f44:	0058      	lsls	r0, r3, #1
 8000f46:	b2c3      	uxtb	r3, r0
 8000f48:	b240      	sxtb	r0, r0
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	db35      	blt.n	8000fba <simpleserial_get+0x1ce>
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	b2d8      	uxtb	r0, r3
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	0040      	lsls	r0, r0, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da00      	bge.n	8000f5c <simpleserial_get+0x170>
 8000f5a:	4048      	eors	r0, r1
	while (len--) {
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	b2d2      	uxtb	r2, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000f60:	b2c0      	uxtb	r0, r0
	while (len--) {
 8000f62:	3401      	adds	r4, #1
 8000f64:	2aff      	cmp	r2, #255	; 0xff
 8000f66:	d02d      	beq.n	8000fc4 <simpleserial_get+0x1d8>
		crc ^= *buf++;
 8000f68:	7823      	ldrb	r3, [r4, #0]
 8000f6a:	4058      	eors	r0, r3
 8000f6c:	b2c3      	uxtb	r3, r0
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000f6e:	0600      	lsls	r0, r0, #24
 8000f70:	d5cf      	bpl.n	8000f12 <simpleserial_get+0x126>
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	404b      	eors	r3, r1
 8000f76:	b258      	sxtb	r0, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	dace      	bge.n	8000f1c <simpleserial_get+0x130>
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	404b      	eors	r3, r1
 8000f82:	b258      	sxtb	r0, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2800      	cmp	r0, #0
 8000f88:	dacd      	bge.n	8000f26 <simpleserial_get+0x13a>
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	404b      	eors	r3, r1
 8000f8e:	b258      	sxtb	r0, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2800      	cmp	r0, #0
 8000f94:	dacc      	bge.n	8000f30 <simpleserial_get+0x144>
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	404b      	eors	r3, r1
 8000f9a:	b258      	sxtb	r0, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	dacb      	bge.n	8000f3a <simpleserial_get+0x14e>
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	404b      	eors	r3, r1
 8000fa6:	b258      	sxtb	r0, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2800      	cmp	r0, #0
 8000fac:	daca      	bge.n	8000f44 <simpleserial_get+0x158>
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	404b      	eors	r3, r1
 8000fb2:	b258      	sxtb	r0, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	dac9      	bge.n	8000f4e <simpleserial_get+0x162>
 8000fba:	0058      	lsls	r0, r3, #1
 8000fbc:	4048      	eors	r0, r1
 8000fbe:	b243      	sxtb	r3, r0
 8000fc0:	b2c0      	uxtb	r0, r0
 8000fc2:	e7c7      	b.n	8000f54 <simpleserial_get+0x168>
	if (crc != data_buf[i-1]) {
 8000fc4:	464b      	mov	r3, r9
 8000fc6:	5ceb      	ldrb	r3, [r5, r3]
 8000fc8:	4283      	cmp	r3, r0
 8000fca:	d003      	beq.n	8000fd4 <simpleserial_get+0x1e8>
		err = SS_ERR_CRC;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	466a      	mov	r2, sp
 8000fd0:	71d3      	strb	r3, [r2, #7]
		goto ERROR;
 8000fd2:	e752      	b.n	8000e7a <simpleserial_get+0x8e>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8000fd4:	007b      	lsls	r3, r7, #1
 8000fd6:	19df      	adds	r7, r3, r7
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <simpleserial_get+0x208>)
 8000fda:	00bf      	lsls	r7, r7, #2
 8000fdc:	19df      	adds	r7, r3, r7
 8000fde:	78ea      	ldrb	r2, [r5, #3]
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	78a9      	ldrb	r1, [r5, #2]
 8000fe4:	7868      	ldrb	r0, [r5, #1]
 8000fe6:	68bc      	ldr	r4, [r7, #8]
 8000fe8:	47a0      	blx	r4
 8000fea:	466b      	mov	r3, sp
 8000fec:	71d8      	strb	r0, [r3, #7]
 8000fee:	e744      	b.n	8000e7a <simpleserial_get+0x8e>
 8000ff0:	20000198 	.word	0x20000198
 8000ff4:	2000019c 	.word	0x2000019c

08000ff8 <simpleserial_put>:
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	46ce      	mov	lr, r9
 8000ffc:	4647      	mov	r7, r8
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b0c1      	sub	sp, #260	; 0x104
	data_buf[0] = 0x00;
 8001002:	466b      	mov	r3, sp
{
 8001004:	000d      	movs	r5, r1
	data_buf[0] = 0x00;
 8001006:	2600      	movs	r6, #0
{
 8001008:	0011      	movs	r1, r2
	data_buf[0] = 0x00;
 800100a:	701e      	strb	r6, [r3, #0]
	data_buf[1] = c;
 800100c:	7058      	strb	r0, [r3, #1]
	data_buf[2] = size;
 800100e:	709d      	strb	r5, [r3, #2]
	for (; i < size; i++) {
 8001010:	2d00      	cmp	r5, #0
 8001012:	d100      	bne.n	8001016 <simpleserial_put+0x1e>
 8001014:	e095      	b.n	8001142 <simpleserial_put+0x14a>
		data_buf[i + 3] = output[i];
 8001016:	1cd8      	adds	r0, r3, #3
 8001018:	002a      	movs	r2, r5
 800101a:	f001 f893 	bl	8002144 <memcpy>
	data_buf[i + 4] = 0x00;
 800101e:	1d2c      	adds	r4, r5, #4
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001020:	1ceb      	adds	r3, r5, #3
	stuff_data(data_buf, i + 5);
 8001022:	1d6f      	adds	r7, r5, #5
	while (len--) {
 8001024:	1c68      	adds	r0, r5, #1
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001026:	469c      	mov	ip, r3
	data_buf[i + 4] = 0x00;
 8001028:	46a0      	mov	r8, r4
	stuff_data(data_buf, i + 5);
 800102a:	b2ff      	uxtb	r7, r7
	while (len--) {
 800102c:	b2c0      	uxtb	r0, r0
 800102e:	2dfe      	cmp	r5, #254	; 0xfe
 8001030:	d100      	bne.n	8001034 <simpleserial_put+0x3c>
 8001032:	e08e      	b.n	8001152 <simpleserial_put+0x15a>
 8001034:	2301      	movs	r3, #1
 8001036:	446b      	add	r3, sp
 8001038:	4699      	mov	r9, r3
 800103a:	001e      	movs	r6, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800103c:	254d      	movs	r5, #77	; 0x4d
	uint8_t crc = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	e029      	b.n	8001096 <simpleserial_put+0x9e>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001042:	b25a      	sxtb	r2, r3
 8001044:	b2d9      	uxtb	r1, r3
 8001046:	2a00      	cmp	r2, #0
 8001048:	db30      	blt.n	80010ac <simpleserial_put+0xb4>
 800104a:	004a      	lsls	r2, r1, #1
 800104c:	b2d3      	uxtb	r3, r2
 800104e:	b252      	sxtb	r2, r2
 8001050:	2a00      	cmp	r2, #0
 8001052:	db31      	blt.n	80010b8 <simpleserial_put+0xc0>
 8001054:	005a      	lsls	r2, r3, #1
 8001056:	b2d3      	uxtb	r3, r2
 8001058:	b252      	sxtb	r2, r2
 800105a:	2a00      	cmp	r2, #0
 800105c:	db32      	blt.n	80010c4 <simpleserial_put+0xcc>
 800105e:	005a      	lsls	r2, r3, #1
 8001060:	b2d3      	uxtb	r3, r2
 8001062:	b252      	sxtb	r2, r2
 8001064:	2a00      	cmp	r2, #0
 8001066:	db33      	blt.n	80010d0 <simpleserial_put+0xd8>
 8001068:	005a      	lsls	r2, r3, #1
 800106a:	b2d3      	uxtb	r3, r2
 800106c:	b252      	sxtb	r2, r2
 800106e:	2a00      	cmp	r2, #0
 8001070:	db34      	blt.n	80010dc <simpleserial_put+0xe4>
 8001072:	005a      	lsls	r2, r3, #1
 8001074:	b2d3      	uxtb	r3, r2
 8001076:	b252      	sxtb	r2, r2
 8001078:	2a00      	cmp	r2, #0
 800107a:	db35      	blt.n	80010e8 <simpleserial_put+0xf0>
 800107c:	005a      	lsls	r2, r3, #1
 800107e:	b2d3      	uxtb	r3, r2
 8001080:	b252      	sxtb	r2, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2a00      	cmp	r2, #0
 8001086:	da00      	bge.n	800108a <simpleserial_put+0x92>
 8001088:	406b      	eors	r3, r5
	while (len--) {
 800108a:	3801      	subs	r0, #1
 800108c:	b2c0      	uxtb	r0, r0
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800108e:	b2db      	uxtb	r3, r3
	while (len--) {
 8001090:	3601      	adds	r6, #1
 8001092:	28ff      	cmp	r0, #255	; 0xff
 8001094:	d02d      	beq.n	80010f2 <simpleserial_put+0xfa>
		crc ^= *buf++;
 8001096:	7832      	ldrb	r2, [r6, #0]
 8001098:	4053      	eors	r3, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800109a:	b25a      	sxtb	r2, r3
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2a00      	cmp	r2, #0
 80010a0:	dacf      	bge.n	8001042 <simpleserial_put+0x4a>
 80010a2:	406b      	eors	r3, r5
 80010a4:	b25a      	sxtb	r2, r3
 80010a6:	b2d9      	uxtb	r1, r3
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	dace      	bge.n	800104a <simpleserial_put+0x52>
 80010ac:	004b      	lsls	r3, r1, #1
 80010ae:	406b      	eors	r3, r5
 80010b0:	b25a      	sxtb	r2, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	dacd      	bge.n	8001054 <simpleserial_put+0x5c>
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	406b      	eors	r3, r5
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	dacc      	bge.n	800105e <simpleserial_put+0x66>
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	406b      	eors	r3, r5
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	dacb      	bge.n	8001068 <simpleserial_put+0x70>
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	406b      	eors	r3, r5
 80010d4:	b25a      	sxtb	r2, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2a00      	cmp	r2, #0
 80010da:	daca      	bge.n	8001072 <simpleserial_put+0x7a>
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	406b      	eors	r3, r5
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	dac9      	bge.n	800107c <simpleserial_put+0x84>
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	406b      	eors	r3, r5
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	e7c7      	b.n	8001082 <simpleserial_put+0x8a>
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80010f2:	466a      	mov	r2, sp
 80010f4:	4661      	mov	r1, ip
 80010f6:	5453      	strb	r3, [r2, r1]
	data_buf[i + 4] = 0x00;
 80010f8:	2300      	movs	r3, #0
 80010fa:	4641      	mov	r1, r8
 80010fc:	5453      	strb	r3, [r2, r1]
	for (; i < len; i++) {
 80010fe:	2f01      	cmp	r7, #1
 8001100:	d911      	bls.n	8001126 <simpleserial_put+0x12e>
 8001102:	4649      	mov	r1, r9
	uint8_t last = 0;
 8001104:	2200      	movs	r2, #0
	uint8_t i = 1;
 8001106:	2301      	movs	r3, #1
		if (buf[i] == FRAME_BYTE) {
 8001108:	7808      	ldrb	r0, [r1, #0]
 800110a:	2800      	cmp	r0, #0
 800110c:	d106      	bne.n	800111c <simpleserial_put+0x124>
			buf[last] = i - last;
 800110e:	a840      	add	r0, sp, #256	; 0x100
 8001110:	1880      	adds	r0, r0, r2
 8001112:	3801      	subs	r0, #1
 8001114:	1a9a      	subs	r2, r3, r2
 8001116:	38ff      	subs	r0, #255	; 0xff
 8001118:	7002      	strb	r2, [r0, #0]
 800111a:	001a      	movs	r2, r3
	for (; i < len; i++) {
 800111c:	3301      	adds	r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	3101      	adds	r1, #1
 8001122:	42bb      	cmp	r3, r7
 8001124:	d1f0      	bne.n	8001108 <simpleserial_put+0x110>
	for (int i = 0; i < size + 5; i++) {
 8001126:	466e      	mov	r6, sp
 8001128:	2500      	movs	r5, #0
		putch(data_buf[i]);
 800112a:	7830      	ldrb	r0, [r6, #0]
	for (int i = 0; i < size + 5; i++) {
 800112c:	3501      	adds	r5, #1
		putch(data_buf[i]);
 800112e:	f000 f91b 	bl	8001368 <putch>
	for (int i = 0; i < size + 5; i++) {
 8001132:	3601      	adds	r6, #1
 8001134:	42ac      	cmp	r4, r5
 8001136:	daf8      	bge.n	800112a <simpleserial_put+0x132>
}
 8001138:	b041      	add	sp, #260	; 0x104
 800113a:	bcc0      	pop	{r6, r7}
 800113c:	46b9      	mov	r9, r7
 800113e:	46b0      	mov	r8, r6
 8001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (len--) {
 8001142:	2304      	movs	r3, #4
 8001144:	4698      	mov	r8, r3
 8001146:	3b01      	subs	r3, #1
 8001148:	2001      	movs	r0, #1
 800114a:	2705      	movs	r7, #5
 800114c:	469c      	mov	ip, r3
 800114e:	2404      	movs	r4, #4
 8001150:	e770      	b.n	8001034 <simpleserial_put+0x3c>
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001152:	466b      	mov	r3, sp
 8001154:	4662      	mov	r2, ip
 8001156:	549e      	strb	r6, [r3, r2]
	data_buf[i + 4] = 0x00;
 8001158:	551e      	strb	r6, [r3, r4]
	for (; i < len; i++) {
 800115a:	2301      	movs	r3, #1
 800115c:	446b      	add	r3, sp
	data_buf[i + 4] = 0x00;
 800115e:	2703      	movs	r7, #3
 8001160:	4699      	mov	r9, r3
 8001162:	e7ce      	b.n	8001102 <simpleserial_put+0x10a>

08001164 <ss_get_commands>:
{
 8001164:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <ss_get_commands+0x3c>)
{
 8001168:	b084      	sub	sp, #16
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800116a:	781c      	ldrb	r4, [r3, #0]
 800116c:	466a      	mov	r2, sp
 800116e:	681e      	ldr	r6, [r3, #0]
 8001170:	2c00      	cmp	r4, #0
 8001172:	d00d      	beq.n	8001190 <ss_get_commands+0x2c>
 8001174:	2300      	movs	r3, #0
 8001176:	2100      	movs	r1, #0
 8001178:	466a      	mov	r2, sp
 800117a:	4d0a      	ldr	r5, [pc, #40]	; (80011a4 <ss_get_commands+0x40>)
        cmd_chars[i] = commands[i].c;
 800117c:	0048      	lsls	r0, r1, #1
 800117e:	1840      	adds	r0, r0, r1
 8001180:	0080      	lsls	r0, r0, #2
 8001182:	5c28      	ldrb	r0, [r5, r0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
        cmd_chars[i] = commands[i].c;
 8001188:	5450      	strb	r0, [r2, r1]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800118a:	0019      	movs	r1, r3
 800118c:	42a3      	cmp	r3, r4
 800118e:	dbf5      	blt.n	800117c <ss_get_commands+0x18>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8001190:	2072      	movs	r0, #114	; 0x72
 8001192:	b2f1      	uxtb	r1, r6
 8001194:	f7ff ff30 	bl	8000ff8 <simpleserial_put>
}
 8001198:	2000      	movs	r0, #0
 800119a:	b004      	add	sp, #16
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000198 	.word	0x20000198
 80011a4:	2000019c 	.word	0x2000019c

080011a8 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80011a8:	b5d0      	push	{r4, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80011aa:	2490      	movs	r4, #144	; 0x90
	GpioInit.Pin       = GPIO_PIN_2;
 80011ac:	2204      	movs	r2, #4
 80011ae:	2301      	movs	r3, #1
 80011b0:	2600      	movs	r6, #0
 80011b2:	2703      	movs	r7, #3
{
 80011b4:	b096      	sub	sp, #88	; 0x58
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80011b6:	05e4      	lsls	r4, r4, #23
 80011b8:	0020      	movs	r0, r4
 80011ba:	a904      	add	r1, sp, #16
	GpioInit.Pin       = GPIO_PIN_2;
 80011bc:	9204      	str	r2, [sp, #16]
 80011be:	9305      	str	r3, [sp, #20]
 80011c0:	9606      	str	r6, [sp, #24]
 80011c2:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80011c4:	f000 fc26 	bl	8001a14 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 80011c8:	2210      	movs	r2, #16
 80011ca:	2301      	movs	r3, #1
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80011cc:	a904      	add	r1, sp, #16
 80011ce:	0020      	movs	r0, r4
	GpioInit.Pin       = GPIO_PIN_4;
 80011d0:	9204      	str	r2, [sp, #16]
 80011d2:	9305      	str	r3, [sp, #20]
 80011d4:	9606      	str	r6, [sp, #24]
 80011d6:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80011d8:	f000 fc1c 	bl	8001a14 <HAL_GPIO_Init>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80011dc:	2203      	movs	r2, #3
 80011de:	2305      	movs	r3, #5
 80011e0:	920a      	str	r2, [sp, #40]	; 0x28
 80011e2:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80011e4:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80011e6:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80011e8:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80011ea:	9313      	str	r3, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80011ec:	f000 f8cc 	bl	8001388 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80011f0:	2207      	movs	r2, #7
 80011f2:	2301      	movs	r3, #1
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	2300      	movs	r3, #0
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8001200:	9202      	str	r2, [sp, #8]
 8001202:	9303      	str	r3, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8001204:	f000 fb48 	bl	8001898 <HAL_RCC_ClockConfig>
#endif
}
 8001208:	b016      	add	sp, #88	; 0x58
 800120a:	bdd0      	pop	{r4, r6, r7, pc}

0800120c <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	2180      	movs	r1, #128	; 0x80
{
 800120e:	b530      	push	{r4, r5, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4c1c      	ldr	r4, [pc, #112]	; (8001284 <init_uart+0x78>)
 8001212:	0289      	lsls	r1, r1, #10
 8001214:	6962      	ldr	r2, [r4, #20]
{
 8001216:	b089      	sub	sp, #36	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	430a      	orrs	r2, r1
 800121a:	6162      	str	r2, [r4, #20]
 800121c:	6963      	ldr	r3, [r4, #20]
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800121e:	22c0      	movs	r2, #192	; 0xc0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	400b      	ands	r3, r1
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8001226:	2302      	movs	r3, #2
 8001228:	00d2      	lsls	r2, r2, #3
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800122a:	2090      	movs	r0, #144	; 0x90
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	9303      	str	r3, [sp, #12]
	GpioInit.Alternate = GPIO_AF1_USART1;
 8001230:	2501      	movs	r5, #1
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8001232:	2201      	movs	r2, #1
 8001234:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8001236:	a902      	add	r1, sp, #8
 8001238:	05c0      	lsls	r0, r0, #23
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800123a:	9204      	str	r2, [sp, #16]
 800123c:	9305      	str	r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 800123e:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8001240:	f000 fbe8 	bl	8001a14 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	69a2      	ldr	r2, [r4, #24]
 8001248:	01c9      	lsls	r1, r1, #7
 800124a:	430a      	orrs	r2, r1
 800124c:	61a2      	str	r2, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 800124e:	2203      	movs	r2, #3
	__HAL_RCC_USART1_CLK_ENABLE();
 8001250:	69a3      	ldr	r3, [r4, #24]
	UartHandle.Instance        = USART1;
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <init_uart+0x7c>)
	__HAL_RCC_USART1_CLK_ENABLE();
 8001254:	400b      	ands	r3, r1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 800125a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800125c:	4393      	bics	r3, r2
 800125e:	432b      	orrs	r3, r5
 8001260:	6323      	str	r3, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <init_uart+0x80>)
 8001264:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8001266:	23e1      	movs	r3, #225	; 0xe1
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	6043      	str	r3, [r0, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800126c:	2300      	movs	r3, #0
 800126e:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001270:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001272:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001274:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001276:	330c      	adds	r3, #12
 8001278:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 800127a:	f000 fcc7 	bl	8001c0c <HAL_UART_Init>
}
 800127e:	b009      	add	sp, #36	; 0x24
 8001280:	bd30      	pop	{r4, r5, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40021000 	.word	0x40021000
 8001288:	2000025c 	.word	0x2000025c
 800128c:	40013800 	.word	0x40013800

08001290 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	2080      	movs	r0, #128	; 0x80
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <trigger_setup+0x80>)
{
 8001294:	b5d0      	push	{r4, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	6951      	ldr	r1, [r2, #20]
 8001298:	0280      	lsls	r0, r0, #10
 800129a:	4301      	orrs	r1, r0
 800129c:	6151      	str	r1, [r2, #20]
 800129e:	6953      	ldr	r3, [r2, #20]
{
 80012a0:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4003      	ands	r3, r0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80012a4:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	9301      	str	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_7;
 80012a8:	2600      	movs	r6, #0
 80012aa:	2703      	movs	r7, #3
 80012ac:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_7;
 80012b0:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80012b2:	05e4      	lsls	r4, r4, #23
 80012b4:	0020      	movs	r0, r4
 80012b6:	a902      	add	r1, sp, #8
	GpioInit.Pin       = GPIO_PIN_7;
 80012b8:	9202      	str	r2, [sp, #8]
 80012ba:	9303      	str	r3, [sp, #12]
 80012bc:	9604      	str	r6, [sp, #16]
 80012be:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80012c0:	f000 fba8 	bl	8001a14 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 80012c4:	2210      	movs	r2, #16
 80012c6:	2301      	movs	r3, #1
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80012c8:	0020      	movs	r0, r4
 80012ca:	a902      	add	r1, sp, #8
	GpioInit.Pin       = GPIO_PIN_4;
 80012cc:	9202      	str	r2, [sp, #8]
 80012ce:	9303      	str	r3, [sp, #12]
 80012d0:	9604      	str	r6, [sp, #16]
 80012d2:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80012d4:	f000 fb9e 	bl	8001a14 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 80012d8:	2301      	movs	r3, #1
 80012da:	2204      	movs	r2, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80012dc:	0020      	movs	r0, r4
 80012de:	a902      	add	r1, sp, #8
	GpioInit.Pin       = GPIO_PIN_2;
 80012e0:	9202      	str	r2, [sp, #8]
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	9604      	str	r6, [sp, #16]
 80012e6:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80012e8:	f000 fb94 	bl	8001a14 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80012ec:	0020      	movs	r0, r4
 80012ee:	2200      	movs	r2, #0
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	f000 fc85 	bl	8001c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 80012f6:	0020      	movs	r0, r4
 80012f8:	2201      	movs	r2, #1
 80012fa:	2110      	movs	r1, #16
 80012fc:	f000 fc80 	bl	8001c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2104      	movs	r1, #4
 8001304:	0020      	movs	r0, r4
 8001306:	f000 fc7b 	bl	8001c00 <HAL_GPIO_WritePin>
}
 800130a:	b008      	add	sp, #32
 800130c:	bdd0      	pop	{r4, r6, r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000

08001314 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001314:	2090      	movs	r0, #144	; 0x90
{
 8001316:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	05c0      	lsls	r0, r0, #23
 800131e:	f000 fc6f 	bl	8001c00 <HAL_GPIO_WritePin>
}
 8001322:	bd10      	pop	{r4, pc}

08001324 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001324:	2090      	movs	r0, #144	; 0x90
{
 8001326:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	05c0      	lsls	r0, r0, #23
 800132e:	f000 fc67 	bl	8001c00 <HAL_GPIO_WritePin>
}   
 8001332:	bd10      	pop	{r4, pc}

08001334 <getch>:

char getch(void)
{
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	466b      	mov	r3, sp
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 800133a:	2708      	movs	r7, #8
 800133c:	4e08      	ldr	r6, [pc, #32]	; (8001360 <getch+0x2c>)
 800133e:	4c09      	ldr	r4, [pc, #36]	; (8001364 <getch+0x30>)
 8001340:	1ddd      	adds	r5, r3, #7
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 8001342:	e002      	b.n	800134a <getch+0x16>
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 8001344:	6a23      	ldr	r3, [r4, #32]
 8001346:	433b      	orrs	r3, r7
 8001348:	6223      	str	r3, [r4, #32]
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 800134a:	2332      	movs	r3, #50	; 0x32
 800134c:	2201      	movs	r2, #1
 800134e:	0029      	movs	r1, r5
 8001350:	0030      	movs	r0, r6
 8001352:	f000 fd09 	bl	8001d68 <HAL_UART_Receive>
 8001356:	2800      	cmp	r0, #0
 8001358:	d1f4      	bne.n	8001344 <getch+0x10>
	return d;
 800135a:	7828      	ldrb	r0, [r5, #0]
}
 800135c:	b003      	add	sp, #12
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001360:	2000025c 	.word	0x2000025c
 8001364:	40013800 	.word	0x40013800

08001368 <putch>:

void putch(char c)
{
 8001368:	b500      	push	{lr}
 800136a:	b083      	sub	sp, #12
	uint8_t d  = c;
 800136c:	466b      	mov	r3, sp
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800136e:	2201      	movs	r2, #1
	uint8_t d  = c;
 8001370:	1dd9      	adds	r1, r3, #7
 8001372:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001374:	4b02      	ldr	r3, [pc, #8]	; (8001380 <putch+0x18>)
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <putch+0x1c>)
 8001378:	f000 fdda 	bl	8001f30 <HAL_UART_Transmit>
}
 800137c:	b003      	add	sp, #12
 800137e:	bd00      	pop	{pc}
 8001380:	00001388 	.word	0x00001388
 8001384:	2000025c 	.word	0x2000025c

08001388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	46ce      	mov	lr, r9
 800138c:	4647      	mov	r7, r8
 800138e:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001390:	6804      	ldr	r4, [r0, #0]
{
 8001392:	b083      	sub	sp, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001394:	07e3      	lsls	r3, r4, #31
 8001396:	d535      	bpl.n	8001404 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001398:	220c      	movs	r2, #12
 800139a:	49c1      	ldr	r1, [pc, #772]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 800139c:	684b      	ldr	r3, [r1, #4]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d100      	bne.n	80013a6 <HAL_RCC_OscConfig+0x1e>
 80013a4:	e12f      	b.n	8001606 <HAL_RCC_OscConfig+0x27e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a6:	684b      	ldr	r3, [r1, #4]
 80013a8:	401a      	ands	r2, r3
 80013aa:	2a08      	cmp	r2, #8
 80013ac:	d100      	bne.n	80013b0 <HAL_RCC_OscConfig+0x28>
 80013ae:	e126      	b.n	80015fe <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b0:	6843      	ldr	r3, [r0, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d100      	bne.n	80013b8 <HAL_RCC_OscConfig+0x30>
 80013b6:	e16b      	b.n	8001690 <HAL_RCC_OscConfig+0x308>
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x36>
 80013bc:	e17e      	b.n	80016bc <HAL_RCC_OscConfig+0x334>
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d100      	bne.n	80013c4 <HAL_RCC_OscConfig+0x3c>
 80013c2:	e249      	b.n	8001858 <HAL_RCC_OscConfig+0x4d0>
 80013c4:	4bb6      	ldr	r3, [pc, #728]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 80013c6:	49b7      	ldr	r1, [pc, #732]	; (80016a4 <HAL_RCC_OscConfig+0x31c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	400a      	ands	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	49b5      	ldr	r1, [pc, #724]	; (80016a8 <HAL_RCC_OscConfig+0x320>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	2780      	movs	r7, #128	; 0x80
	return tick++;;
 80013d8:	4ab4      	ldr	r2, [pc, #720]	; (80016ac <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	49b1      	ldr	r1, [pc, #708]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
	return tick++;;
 80013dc:	6815      	ldr	r5, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	2600      	movs	r6, #0
	return tick++;;
 80013e0:	1c6b      	adds	r3, r5, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	468c      	mov	ip, r1
	return tick++;;
 80013e4:	6013      	str	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	3566      	adds	r5, #102	; 0x66
 80013e8:	02bf      	lsls	r7, r7, #10
 80013ea:	e004      	b.n	80013f6 <HAL_RCC_OscConfig+0x6e>
	return tick++;;
 80013ec:	3301      	adds	r3, #1
 80013ee:	2601      	movs	r6, #1
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	429d      	cmp	r5, r3
 80013f2:	d100      	bne.n	80013f6 <HAL_RCC_OscConfig+0x6e>
 80013f4:	e1b7      	b.n	8001766 <HAL_RCC_OscConfig+0x3de>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	4661      	mov	r1, ip
 80013f8:	6809      	ldr	r1, [r1, #0]
 80013fa:	4239      	tst	r1, r7
 80013fc:	d0f6      	beq.n	80013ec <HAL_RCC_OscConfig+0x64>
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d000      	beq.n	8001404 <HAL_RCC_OscConfig+0x7c>
 8001402:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001404:	07a3      	lsls	r3, r4, #30
 8001406:	d53b      	bpl.n	8001480 <HAL_RCC_OscConfig+0xf8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001408:	230c      	movs	r3, #12
 800140a:	4aa5      	ldr	r2, [pc, #660]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 800140c:	6851      	ldr	r1, [r2, #4]
 800140e:	420b      	tst	r3, r1
 8001410:	d029      	beq.n	8001466 <HAL_RCC_OscConfig+0xde>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001412:	6851      	ldr	r1, [r2, #4]
 8001414:	400b      	ands	r3, r1
 8001416:	2b08      	cmp	r3, #8
 8001418:	d022      	beq.n	8001460 <HAL_RCC_OscConfig+0xd8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141a:	68c3      	ldr	r3, [r0, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	49a0      	ldr	r1, [pc, #640]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <HAL_RCC_OscConfig+0x9c>
 8001422:	e188      	b.n	8001736 <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_HSI_ENABLE();
 8001424:	2201      	movs	r2, #1
 8001426:	680b      	ldr	r3, [r1, #0]
 8001428:	4313      	orrs	r3, r2
	return tick++;;
 800142a:	4aa0      	ldr	r2, [pc, #640]	; (80016ac <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_HSI_ENABLE();
 800142c:	600b      	str	r3, [r1, #0]
	return tick++;;
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	1c5d      	adds	r5, r3, #1
 8001432:	6015      	str	r5, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	2502      	movs	r5, #2
 8001436:	680e      	ldr	r6, [r1, #0]
 8001438:	4235      	tst	r5, r6
 800143a:	d119      	bne.n	8001470 <HAL_RCC_OscConfig+0xe8>
 800143c:	680f      	ldr	r7, [r1, #0]
	return tick++;;
 800143e:	1c9e      	adds	r6, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	423d      	tst	r5, r7
 8001442:	d000      	beq.n	8001446 <HAL_RCC_OscConfig+0xbe>
 8001444:	e1c7      	b.n	80017d6 <HAL_RCC_OscConfig+0x44e>
 8001446:	6809      	ldr	r1, [r1, #0]
	return tick++;;
 8001448:	1cde      	adds	r6, r3, #3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	420d      	tst	r5, r1
 800144c:	d000      	beq.n	8001450 <HAL_RCC_OscConfig+0xc8>
 800144e:	e1c2      	b.n	80017d6 <HAL_RCC_OscConfig+0x44e>
	return tick++;;
 8001450:	3304      	adds	r3, #4
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001452:	2003      	movs	r0, #3
 8001454:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001456:	b003      	add	sp, #12
 8001458:	bcc0      	pop	{r6, r7}
 800145a:	46b9      	mov	r9, r7
 800145c:	46b0      	mov	r8, r6
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001460:	6853      	ldr	r3, [r2, #4]
 8001462:	03db      	lsls	r3, r3, #15
 8001464:	d4d9      	bmi.n	800141a <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	4b8e      	ldr	r3, [pc, #568]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	079b      	lsls	r3, r3, #30
 800146c:	d500      	bpl.n	8001470 <HAL_RCC_OscConfig+0xe8>
 800146e:	e109      	b.n	8001684 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	25f8      	movs	r5, #248	; 0xf8
 8001472:	498b      	ldr	r1, [pc, #556]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001474:	6903      	ldr	r3, [r0, #16]
 8001476:	680a      	ldr	r2, [r1, #0]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	43aa      	bics	r2, r5
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001480:	0723      	lsls	r3, r4, #28
 8001482:	d519      	bpl.n	80014b8 <HAL_RCC_OscConfig+0x130>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001484:	69c3      	ldr	r3, [r0, #28]
      __HAL_RCC_LSI_ENABLE();
 8001486:	4986      	ldr	r1, [pc, #536]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <HAL_RCC_OscConfig+0x106>
 800148c:	e0c6      	b.n	800161c <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 800148e:	2201      	movs	r2, #1
 8001490:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001492:	4313      	orrs	r3, r2
	return tick++;;
 8001494:	4a85      	ldr	r2, [pc, #532]	; (80016ac <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_LSI_ENABLE();
 8001496:	624b      	str	r3, [r1, #36]	; 0x24
	return tick++;;
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	1c5d      	adds	r5, r3, #1
 800149c:	6015      	str	r5, [r2, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	2502      	movs	r5, #2
 80014a0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80014a2:	4235      	tst	r5, r6
 80014a4:	d108      	bne.n	80014b8 <HAL_RCC_OscConfig+0x130>
 80014a6:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	return tick++;;
 80014a8:	1c9e      	adds	r6, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	423d      	tst	r5, r7
 80014ac:	d103      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12e>
 80014ae:	6a49      	ldr	r1, [r1, #36]	; 0x24
	return tick++;;
 80014b0:	1cde      	adds	r6, r3, #3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	420d      	tst	r5, r1
 80014b4:	d0cc      	beq.n	8001450 <HAL_RCC_OscConfig+0xc8>
 80014b6:	6016      	str	r6, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	0763      	lsls	r3, r4, #29
 80014ba:	d549      	bpl.n	8001550 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014bc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80014be:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c0:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 80014c2:	0552      	lsls	r2, r2, #21
 80014c4:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	46a9      	mov	r9, r5
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c8:	4211      	tst	r1, r2
 80014ca:	d108      	bne.n	80014de <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	69d9      	ldr	r1, [r3, #28]
 80014ce:	4311      	orrs	r1, r2
 80014d0:	61d9      	str	r1, [r3, #28]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	401a      	ands	r2, r3
 80014d6:	9201      	str	r2, [sp, #4]
 80014d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014da:	2301      	movs	r3, #1
 80014dc:	4699      	mov	r9, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	2680      	movs	r6, #128	; 0x80
 80014e0:	4d73      	ldr	r5, [pc, #460]	; (80016b0 <HAL_RCC_OscConfig+0x328>)
 80014e2:	0076      	lsls	r6, r6, #1
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	4233      	tst	r3, r6
 80014e8:	d100      	bne.n	80014ec <HAL_RCC_OscConfig+0x164>
 80014ea:	e0b0      	b.n	800164e <HAL_RCC_OscConfig+0x2c6>
	return tick++;;
 80014ec:	4a6f      	ldr	r2, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x324>)
 80014ee:	6813      	ldr	r3, [r2, #0]
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f0:	6881      	ldr	r1, [r0, #8]
 80014f2:	2901      	cmp	r1, #1
 80014f4:	d00f      	beq.n	8001516 <HAL_RCC_OscConfig+0x18e>
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d100      	bne.n	80014fc <HAL_RCC_OscConfig+0x174>
 80014fa:	e102      	b.n	8001702 <HAL_RCC_OscConfig+0x37a>
 80014fc:	2905      	cmp	r1, #5
 80014fe:	d100      	bne.n	8001502 <HAL_RCC_OscConfig+0x17a>
 8001500:	e15f      	b.n	80017c2 <HAL_RCC_OscConfig+0x43a>
 8001502:	2601      	movs	r6, #1
 8001504:	4966      	ldr	r1, [pc, #408]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001506:	6a0d      	ldr	r5, [r1, #32]
 8001508:	43b5      	bics	r5, r6
 800150a:	620d      	str	r5, [r1, #32]
 800150c:	6a0d      	ldr	r5, [r1, #32]
 800150e:	3603      	adds	r6, #3
 8001510:	43b5      	bics	r5, r6
 8001512:	620d      	str	r5, [r1, #32]
 8001514:	e003      	b.n	800151e <HAL_RCC_OscConfig+0x196>
 8001516:	4e62      	ldr	r6, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001518:	6a35      	ldr	r5, [r6, #32]
 800151a:	4329      	orrs	r1, r5
 800151c:	6231      	str	r1, [r6, #32]
	return tick++;;
 800151e:	4d65      	ldr	r5, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x32c>)
 8001520:	1c59      	adds	r1, r3, #1
 8001522:	46ac      	mov	ip, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	4d5e      	ldr	r5, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001526:	4463      	add	r3, ip
 8001528:	2700      	movs	r7, #0
 800152a:	46ac      	mov	ip, r5
 800152c:	2602      	movs	r6, #2
	return tick++;;
 800152e:	6011      	str	r1, [r2, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	e003      	b.n	800153a <HAL_RCC_OscConfig+0x1b2>
	return tick++;;
 8001532:	3101      	adds	r1, #1
 8001534:	2701      	movs	r7, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	4299      	cmp	r1, r3
 8001538:	d02e      	beq.n	8001598 <HAL_RCC_OscConfig+0x210>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	4665      	mov	r5, ip
 800153c:	6a2d      	ldr	r5, [r5, #32]
 800153e:	422e      	tst	r6, r5
 8001540:	d0f7      	beq.n	8001532 <HAL_RCC_OscConfig+0x1aa>
 8001542:	2f00      	cmp	r7, #0
 8001544:	d000      	beq.n	8001548 <HAL_RCC_OscConfig+0x1c0>
 8001546:	6011      	str	r1, [r2, #0]
    if(pwrclkchanged == SET)
 8001548:	464b      	mov	r3, r9
 800154a:	2b01      	cmp	r3, #1
 800154c:	d100      	bne.n	8001550 <HAL_RCC_OscConfig+0x1c8>
 800154e:	e130      	b.n	80017b2 <HAL_RCC_OscConfig+0x42a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001550:	06e3      	lsls	r3, r4, #27
 8001552:	d530      	bpl.n	80015b6 <HAL_RCC_OscConfig+0x22e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001554:	6943      	ldr	r3, [r0, #20]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d100      	bne.n	800155c <HAL_RCC_OscConfig+0x1d4>
 800155a:	e107      	b.n	800176c <HAL_RCC_OscConfig+0x3e4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800155c:	3305      	adds	r3, #5
 800155e:	d01e      	beq.n	800159e <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001560:	2104      	movs	r1, #4
 8001562:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156c:	3903      	subs	r1, #3
 800156e:	438a      	bics	r2, r1
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
	return tick++;;
 8001572:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_RCC_OscConfig+0x324>)
 8001574:	6811      	ldr	r1, [r2, #0]
 8001576:	1c4c      	adds	r4, r1, #1
 8001578:	6014      	str	r4, [r2, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800157a:	2402      	movs	r4, #2
 800157c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800157e:	422c      	tst	r4, r5
 8001580:	d019      	beq.n	80015b6 <HAL_RCC_OscConfig+0x22e>
 8001582:	6b5e      	ldr	r6, [r3, #52]	; 0x34
	return tick++;;
 8001584:	1c8d      	adds	r5, r1, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001586:	4234      	tst	r4, r6
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x204>
 800158a:	e126      	b.n	80017da <HAL_RCC_OscConfig+0x452>
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	return tick++;;
 800158e:	1ccd      	adds	r5, r1, #3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001590:	421c      	tst	r4, r3
 8001592:	d100      	bne.n	8001596 <HAL_RCC_OscConfig+0x20e>
 8001594:	e121      	b.n	80017da <HAL_RCC_OscConfig+0x452>
	return tick++;;
 8001596:	3104      	adds	r1, #4
            return HAL_TIMEOUT;
 8001598:	2003      	movs	r0, #3
 800159a:	6011      	str	r1, [r2, #0]
 800159c:	e75b      	b.n	8001456 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSI14ADC_ENABLE();
 800159e:	2104      	movs	r1, #4
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015a0:	24f8      	movs	r4, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 80015a4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015a6:	438b      	bics	r3, r1
 80015a8:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015aa:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80015ac:	6983      	ldr	r3, [r0, #24]
 80015ae:	43a1      	bics	r1, r4
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	430b      	orrs	r3, r1
 80015b4:	6353      	str	r3, [r2, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b6:	6a02      	ldr	r2, [r0, #32]
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	d01e      	beq.n	80015fa <HAL_RCC_OscConfig+0x272>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015bc:	210c      	movs	r1, #12
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 80015c0:	685c      	ldr	r4, [r3, #4]
 80015c2:	4021      	ands	r1, r4
 80015c4:	2908      	cmp	r1, #8
 80015c6:	d027      	beq.n	8001618 <HAL_RCC_OscConfig+0x290>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c8:	2a02      	cmp	r2, #2
 80015ca:	d100      	bne.n	80015ce <HAL_RCC_OscConfig+0x246>
 80015cc:	e107      	b.n	80017de <HAL_RCC_OscConfig+0x456>
        __HAL_RCC_PLL_DISABLE();
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4939      	ldr	r1, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x330>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
	return tick++;;
 80015d6:	4a35      	ldr	r2, [pc, #212]	; (80016ac <HAL_RCC_OscConfig+0x324>)
 80015d8:	6811      	ldr	r1, [r2, #0]
 80015da:	1c48      	adds	r0, r1, #1
 80015dc:	6010      	str	r0, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	2080      	movs	r0, #128	; 0x80
 80015e0:	681c      	ldr	r4, [r3, #0]
 80015e2:	0480      	lsls	r0, r0, #18
 80015e4:	4204      	tst	r4, r0
 80015e6:	d008      	beq.n	80015fa <HAL_RCC_OscConfig+0x272>
 80015e8:	681d      	ldr	r5, [r3, #0]
	return tick++;;
 80015ea:	1c8c      	adds	r4, r1, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	4205      	tst	r5, r0
 80015ee:	d003      	beq.n	80015f8 <HAL_RCC_OscConfig+0x270>
 80015f0:	681b      	ldr	r3, [r3, #0]
	return tick++;;
 80015f2:	1ccc      	adds	r4, r1, #3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f4:	4203      	tst	r3, r0
 80015f6:	d1ce      	bne.n	8001596 <HAL_RCC_OscConfig+0x20e>
 80015f8:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 80015fa:	2000      	movs	r0, #0
 80015fc:	e72b      	b.n	8001456 <HAL_RCC_OscConfig+0xce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fe:	684b      	ldr	r3, [r1, #4]
 8001600:	03db      	lsls	r3, r3, #15
 8001602:	d400      	bmi.n	8001606 <HAL_RCC_OscConfig+0x27e>
 8001604:	e6d4      	b.n	80013b0 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	039b      	lsls	r3, r3, #14
 800160c:	d400      	bmi.n	8001610 <HAL_RCC_OscConfig+0x288>
 800160e:	e6f9      	b.n	8001404 <HAL_RCC_OscConfig+0x7c>
 8001610:	6843      	ldr	r3, [r0, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d000      	beq.n	8001618 <HAL_RCC_OscConfig+0x290>
 8001616:	e6f5      	b.n	8001404 <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
 800161a:	e71c      	b.n	8001456 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_LSI_DISABLE();
 800161c:	2201      	movs	r2, #1
 800161e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001620:	4393      	bics	r3, r2
	return tick++;;
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_LSI_DISABLE();
 8001624:	624b      	str	r3, [r1, #36]	; 0x24
	return tick++;;
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	1c5d      	adds	r5, r3, #1
 800162a:	6015      	str	r5, [r2, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	2502      	movs	r5, #2
 800162e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8001630:	4235      	tst	r5, r6
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x2ae>
 8001634:	e740      	b.n	80014b8 <HAL_RCC_OscConfig+0x130>
 8001636:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	return tick++;;
 8001638:	1c9e      	adds	r6, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163a:	423d      	tst	r5, r7
 800163c:	d100      	bne.n	8001640 <HAL_RCC_OscConfig+0x2b8>
 800163e:	e73a      	b.n	80014b6 <HAL_RCC_OscConfig+0x12e>
 8001640:	6a49      	ldr	r1, [r1, #36]	; 0x24
	return tick++;;
 8001642:	1cde      	adds	r6, r3, #3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	420d      	tst	r5, r1
 8001646:	d000      	beq.n	800164a <HAL_RCC_OscConfig+0x2c2>
 8001648:	e702      	b.n	8001450 <HAL_RCC_OscConfig+0xc8>
 800164a:	6016      	str	r6, [r2, #0]
 800164c:	e734      	b.n	80014b8 <HAL_RCC_OscConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	682b      	ldr	r3, [r5, #0]
	return tick++;;
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <HAL_RCC_OscConfig+0x324>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4333      	orrs	r3, r6
 8001654:	602b      	str	r3, [r5, #0]
	return tick++;;
 8001656:	6813      	ldr	r3, [r2, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	2700      	movs	r7, #0
	return tick++;;
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	4688      	mov	r8, r1
 800165e:	6011      	str	r1, [r2, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	2166      	movs	r1, #102	; 0x66
 8001662:	468c      	mov	ip, r1
 8001664:	449c      	add	ip, r3
 8001666:	4643      	mov	r3, r8
 8001668:	e004      	b.n	8001674 <HAL_RCC_OscConfig+0x2ec>
	return tick++;;
 800166a:	3301      	adds	r3, #1
 800166c:	2701      	movs	r7, #1
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	4563      	cmp	r3, ip
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x2ec>
 8001672:	e6ee      	b.n	8001452 <HAL_RCC_OscConfig+0xca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	6829      	ldr	r1, [r5, #0]
 8001676:	4231      	tst	r1, r6
 8001678:	d0f7      	beq.n	800166a <HAL_RCC_OscConfig+0x2e2>
 800167a:	2f00      	cmp	r7, #0
 800167c:	d100      	bne.n	8001680 <HAL_RCC_OscConfig+0x2f8>
 800167e:	e09e      	b.n	80017be <HAL_RCC_OscConfig+0x436>
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e735      	b.n	80014f0 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001684:	68c3      	ldr	r3, [r0, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d100      	bne.n	800168c <HAL_RCC_OscConfig+0x304>
 800168a:	e6f1      	b.n	8001470 <HAL_RCC_OscConfig+0xe8>
        return HAL_ERROR;
 800168c:	2001      	movs	r0, #1
 800168e:	e6e2      	b.n	8001456 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_RCC_OscConfig+0x318>)
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	6811      	ldr	r1, [r2, #0]
 8001698:	430b      	orrs	r3, r1
 800169a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	e69b      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40021000 	.word	0x40021000
 80016a4:	fffeffff 	.word	0xfffeffff
 80016a8:	fffbffff 	.word	0xfffbffff
 80016ac:	200002cc 	.word	0x200002cc
 80016b0:	40007000 	.word	0x40007000
 80016b4:	0000138a 	.word	0x0000138a
 80016b8:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	2166      	movs	r1, #102	; 0x66
 80016be:	4688      	mov	r8, r1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c0:	2180      	movs	r1, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c2:	4d6d      	ldr	r5, [pc, #436]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
 80016c4:	4a6d      	ldr	r2, [pc, #436]	; (800187c <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c8:	0289      	lsls	r1, r1, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ca:	4013      	ands	r3, r2
 80016cc:	602b      	str	r3, [r5, #0]
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	4a6b      	ldr	r2, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x4f8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	2700      	movs	r7, #0
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	4013      	ands	r3, r2
	return tick++;;
 80016d6:	4a6b      	ldr	r2, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x4fc>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d8:	602b      	str	r3, [r5, #0]
	return tick++;;
 80016da:	6816      	ldr	r6, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016dc:	468c      	mov	ip, r1
	return tick++;;
 80016de:	1c73      	adds	r3, r6, #1
 80016e0:	6013      	str	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	44b0      	add	r8, r6
 80016e4:	e004      	b.n	80016f0 <HAL_RCC_OscConfig+0x368>
	return tick++;;
 80016e6:	3301      	adds	r3, #1
 80016e8:	2701      	movs	r7, #1
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ea:	4543      	cmp	r3, r8
 80016ec:	d100      	bne.n	80016f0 <HAL_RCC_OscConfig+0x368>
 80016ee:	e6b0      	b.n	8001452 <HAL_RCC_OscConfig+0xca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f0:	4666      	mov	r6, ip
 80016f2:	6829      	ldr	r1, [r5, #0]
 80016f4:	4231      	tst	r1, r6
 80016f6:	d1f6      	bne.n	80016e6 <HAL_RCC_OscConfig+0x35e>
 80016f8:	2f00      	cmp	r7, #0
 80016fa:	d100      	bne.n	80016fe <HAL_RCC_OscConfig+0x376>
 80016fc:	e682      	b.n	8001404 <HAL_RCC_OscConfig+0x7c>
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e680      	b.n	8001404 <HAL_RCC_OscConfig+0x7c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	2501      	movs	r5, #1
 8001704:	4e5c      	ldr	r6, [pc, #368]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001706:	2700      	movs	r7, #0
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	6a31      	ldr	r1, [r6, #32]
 800170a:	43a9      	bics	r1, r5
 800170c:	6231      	str	r1, [r6, #32]
 800170e:	6a31      	ldr	r1, [r6, #32]
 8001710:	3503      	adds	r5, #3
 8001712:	43a9      	bics	r1, r5
 8001714:	4d5c      	ldr	r5, [pc, #368]	; (8001888 <HAL_RCC_OscConfig+0x500>)
 8001716:	6231      	str	r1, [r6, #32]
	return tick++;;
 8001718:	46a8      	mov	r8, r5
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	4498      	add	r8, r3
 800171e:	6011      	str	r1, [r2, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	2302      	movs	r3, #2
 8001722:	e004      	b.n	800172e <HAL_RCC_OscConfig+0x3a6>
	return tick++;;
 8001724:	3101      	adds	r1, #1
 8001726:	2701      	movs	r7, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	4541      	cmp	r1, r8
 800172a:	d100      	bne.n	800172e <HAL_RCC_OscConfig+0x3a6>
 800172c:	e734      	b.n	8001598 <HAL_RCC_OscConfig+0x210>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	6a35      	ldr	r5, [r6, #32]
 8001730:	422b      	tst	r3, r5
 8001732:	d1f7      	bne.n	8001724 <HAL_RCC_OscConfig+0x39c>
 8001734:	e705      	b.n	8001542 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_DISABLE();
 8001736:	2201      	movs	r2, #1
 8001738:	680b      	ldr	r3, [r1, #0]
 800173a:	4393      	bics	r3, r2
	return tick++;;
 800173c:	4a51      	ldr	r2, [pc, #324]	; (8001884 <HAL_RCC_OscConfig+0x4fc>)
        __HAL_RCC_HSI_DISABLE();
 800173e:	600b      	str	r3, [r1, #0]
	return tick++;;
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	1c5d      	adds	r5, r3, #1
 8001744:	6015      	str	r5, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	2502      	movs	r5, #2
 8001748:	680e      	ldr	r6, [r1, #0]
 800174a:	4235      	tst	r5, r6
 800174c:	d100      	bne.n	8001750 <HAL_RCC_OscConfig+0x3c8>
 800174e:	e697      	b.n	8001480 <HAL_RCC_OscConfig+0xf8>
 8001750:	680f      	ldr	r7, [r1, #0]
	return tick++;;
 8001752:	1c9e      	adds	r6, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001754:	423d      	tst	r5, r7
 8001756:	d004      	beq.n	8001762 <HAL_RCC_OscConfig+0x3da>
 8001758:	6809      	ldr	r1, [r1, #0]
	return tick++;;
 800175a:	1cde      	adds	r6, r3, #3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175c:	420d      	tst	r5, r1
 800175e:	d000      	beq.n	8001762 <HAL_RCC_OscConfig+0x3da>
 8001760:	e676      	b.n	8001450 <HAL_RCC_OscConfig+0xc8>
 8001762:	6016      	str	r6, [r2, #0]
 8001764:	e68c      	b.n	8001480 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 8001766:	2003      	movs	r0, #3
 8001768:	6015      	str	r5, [r2, #0]
 800176a:	e674      	b.n	8001456 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSI14ADC_DISABLE();
 800176c:	2404      	movs	r4, #4
 800176e:	4942      	ldr	r1, [pc, #264]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
 8001770:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001772:	4322      	orrs	r2, r4
 8001774:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001776:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001778:	4313      	orrs	r3, r2
	return tick++;;
 800177a:	4a42      	ldr	r2, [pc, #264]	; (8001884 <HAL_RCC_OscConfig+0x4fc>)
      __HAL_RCC_HSI14_ENABLE();
 800177c:	634b      	str	r3, [r1, #52]	; 0x34
	return tick++;;
 800177e:	6813      	ldr	r3, [r2, #0]
 8001780:	1c5c      	adds	r4, r3, #1
 8001782:	6014      	str	r4, [r2, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001784:	2402      	movs	r4, #2
 8001786:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8001788:	422c      	tst	r4, r5
 800178a:	d109      	bne.n	80017a0 <HAL_RCC_OscConfig+0x418>
 800178c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
	return tick++;;
 800178e:	1c9d      	adds	r5, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001790:	4234      	tst	r4, r6
 8001792:	d104      	bne.n	800179e <HAL_RCC_OscConfig+0x416>
 8001794:	6b49      	ldr	r1, [r1, #52]	; 0x34
	return tick++;;
 8001796:	1cdd      	adds	r5, r3, #3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001798:	420c      	tst	r4, r1
 800179a:	d100      	bne.n	800179e <HAL_RCC_OscConfig+0x416>
 800179c:	e658      	b.n	8001450 <HAL_RCC_OscConfig+0xc8>
 800179e:	6015      	str	r5, [r2, #0]
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017a0:	24f8      	movs	r4, #248	; 0xf8
 80017a2:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
 80017a4:	6983      	ldr	r3, [r0, #24]
 80017a6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	43a2      	bics	r2, r4
 80017ac:	4313      	orrs	r3, r2
 80017ae:	634b      	str	r3, [r1, #52]	; 0x34
 80017b0:	e701      	b.n	80015b6 <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
 80017b4:	4935      	ldr	r1, [pc, #212]	; (800188c <HAL_RCC_OscConfig+0x504>)
 80017b6:	69d3      	ldr	r3, [r2, #28]
 80017b8:	400b      	ands	r3, r1
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	e6c8      	b.n	8001550 <HAL_RCC_OscConfig+0x1c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4643      	mov	r3, r8
 80017c0:	e696      	b.n	80014f0 <HAL_RCC_OscConfig+0x168>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c2:	2604      	movs	r6, #4
 80017c4:	492c      	ldr	r1, [pc, #176]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
 80017c6:	6a0d      	ldr	r5, [r1, #32]
 80017c8:	4335      	orrs	r5, r6
 80017ca:	620d      	str	r5, [r1, #32]
 80017cc:	6a0d      	ldr	r5, [r1, #32]
 80017ce:	3e03      	subs	r6, #3
 80017d0:	4335      	orrs	r5, r6
 80017d2:	620d      	str	r5, [r1, #32]
 80017d4:	e6a3      	b.n	800151e <HAL_RCC_OscConfig+0x196>
 80017d6:	6016      	str	r6, [r2, #0]
 80017d8:	e64a      	b.n	8001470 <HAL_RCC_OscConfig+0xe8>
 80017da:	6015      	str	r5, [r2, #0]
 80017dc:	e6eb      	b.n	80015b6 <HAL_RCC_OscConfig+0x22e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	492b      	ldr	r1, [pc, #172]	; (8001890 <HAL_RCC_OscConfig+0x508>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	04ad      	lsls	r5, r5, #18
        __HAL_RCC_PLL_DISABLE();
 80017e6:	400a      	ands	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
	return tick++;;
 80017ea:	4a26      	ldr	r2, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x4fc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ec:	681e      	ldr	r6, [r3, #0]
	return tick++;;
 80017ee:	6811      	ldr	r1, [r2, #0]
 80017f0:	1c4c      	adds	r4, r1, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f2:	422e      	tst	r6, r5
 80017f4:	d008      	beq.n	8001808 <HAL_RCC_OscConfig+0x480>
 80017f6:	681e      	ldr	r6, [r3, #0]
	return tick++;;
 80017f8:	1c8c      	adds	r4, r1, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	422e      	tst	r6, r5
 80017fc:	d004      	beq.n	8001808 <HAL_RCC_OscConfig+0x480>
 80017fe:	681b      	ldr	r3, [r3, #0]
	return tick++;;
 8001800:	1ccc      	adds	r4, r1, #3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	422b      	tst	r3, r5
 8001804:	d000      	beq.n	8001808 <HAL_RCC_OscConfig+0x480>
 8001806:	e6c6      	b.n	8001596 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	250f      	movs	r5, #15
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
 800180c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800180e:	43a9      	bics	r1, r5
 8001810:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8001812:	4329      	orrs	r1, r5
 8001814:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001816:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001818:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800181a:	685d      	ldr	r5, [r3, #4]
 800181c:	4301      	orrs	r1, r0
 800181e:	481d      	ldr	r0, [pc, #116]	; (8001894 <HAL_RCC_OscConfig+0x50c>)
 8001820:	4028      	ands	r0, r5
 8001822:	4301      	orrs	r1, r0
 8001824:	6059      	str	r1, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	0449      	lsls	r1, r1, #17
 800182c:	4301      	orrs	r1, r0
 800182e:	6019      	str	r1, [r3, #0]
	return tick++;;
 8001830:	1c61      	adds	r1, r4, #1
 8001832:	6011      	str	r1, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	0489      	lsls	r1, r1, #18
 800183a:	4208      	tst	r0, r1
 800183c:	d000      	beq.n	8001840 <HAL_RCC_OscConfig+0x4b8>
 800183e:	e6dc      	b.n	80015fa <HAL_RCC_OscConfig+0x272>
 8001840:	681d      	ldr	r5, [r3, #0]
	return tick++;;
 8001842:	1ca0      	adds	r0, r4, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	420d      	tst	r5, r1
 8001846:	d113      	bne.n	8001870 <HAL_RCC_OscConfig+0x4e8>
 8001848:	681b      	ldr	r3, [r3, #0]
	return tick++;;
 800184a:	1ce0      	adds	r0, r4, #3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184c:	420b      	tst	r3, r1
 800184e:	d10f      	bne.n	8001870 <HAL_RCC_OscConfig+0x4e8>
	return tick++;;
 8001850:	3404      	adds	r4, #4
            return HAL_TIMEOUT;
 8001852:	2003      	movs	r0, #3
 8001854:	6014      	str	r4, [r2, #0]
 8001856:	e5fe      	b.n	8001456 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_RCC_OscConfig+0x4f0>)
 800185c:	02d2      	lsls	r2, r2, #11
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	0252      	lsls	r2, r2, #9
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e5b2      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e>
 8001870:	6010      	str	r0, [r2, #0]
  return HAL_OK;
 8001872:	2000      	movs	r0, #0
 8001874:	e5ef      	b.n	8001456 <HAL_RCC_OscConfig+0xce>
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40021000 	.word	0x40021000
 800187c:	fffeffff 	.word	0xfffeffff
 8001880:	fffbffff 	.word	0xfffbffff
 8001884:	200002cc 	.word	0x200002cc
 8001888:	0000138a 	.word	0x0000138a
 800188c:	efffffff 	.word	0xefffffff
 8001890:	feffffff 	.word	0xfeffffff
 8001894:	ffc2ffff 	.word	0xffc2ffff

08001898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800189a:	2301      	movs	r3, #1
{
 800189c:	46ce      	mov	lr, r9
 800189e:	4647      	mov	r7, r8
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018a0:	4c56      	ldr	r4, [pc, #344]	; (80019fc <HAL_RCC_ClockConfig+0x164>)
{
 80018a2:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018a4:	6822      	ldr	r2, [r4, #0]
 80018a6:	401a      	ands	r2, r3
 80018a8:	428a      	cmp	r2, r1
 80018aa:	d209      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x28>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	439a      	bics	r2, r3
 80018b0:	430a      	orrs	r2, r1
 80018b2:	6022      	str	r2, [r4, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	4013      	ands	r3, r2
 80018b8:	428b      	cmp	r3, r1
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x28>
    {
      return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
 80018be:	e049      	b.n	8001954 <HAL_RCC_ClockConfig+0xbc>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	6802      	ldr	r2, [r0, #0]
 80018c2:	0793      	lsls	r3, r2, #30
 80018c4:	d506      	bpl.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c6:	25f0      	movs	r5, #240	; 0xf0
 80018c8:	4c4d      	ldr	r4, [pc, #308]	; (8001a00 <HAL_RCC_ClockConfig+0x168>)
 80018ca:	6863      	ldr	r3, [r4, #4]
 80018cc:	43ab      	bics	r3, r5
 80018ce:	6885      	ldr	r5, [r0, #8]
 80018d0:	432b      	orrs	r3, r5
 80018d2:	6063      	str	r3, [r4, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d4:	07d3      	lsls	r3, r2, #31
 80018d6:	d529      	bpl.n	800192c <HAL_RCC_ClockConfig+0x94>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d8:	4d49      	ldr	r5, [pc, #292]	; (8001a00 <HAL_RCC_ClockConfig+0x168>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	6843      	ldr	r3, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018dc:	682c      	ldr	r4, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d068      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d042      	beq.n	800196c <HAL_RCC_ClockConfig+0xd4>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	07a4      	lsls	r4, r4, #30
 80018e8:	d5e8      	bpl.n	80018bc <HAL_RCC_ClockConfig+0x24>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	2603      	movs	r6, #3
 80018ec:	686c      	ldr	r4, [r5, #4]
 80018ee:	43b4      	bics	r4, r6
 80018f0:	4323      	orrs	r3, r4
 80018f2:	606b      	str	r3, [r5, #4]
	return tick++;;
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_ClockConfig+0x16c>)
 80018f6:	4699      	mov	r9, r3
 80018f8:	464c      	mov	r4, r9
 80018fa:	681f      	ldr	r7, [r3, #0]
 80018fc:	1c7b      	adds	r3, r7, #1
 80018fe:	6023      	str	r3, [r4, #0]
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001900:	4c41      	ldr	r4, [pc, #260]	; (8001a08 <HAL_RCC_ClockConfig+0x170>)
 8001902:	46a4      	mov	ip, r4
	return tick++;;
 8001904:	2400      	movs	r4, #0
 8001906:	46a0      	mov	r8, r4
      }
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001908:	340c      	adds	r4, #12
 800190a:	4467      	add	r7, ip
 800190c:	46a4      	mov	ip, r4
 800190e:	e004      	b.n	800191a <HAL_RCC_ClockConfig+0x82>
	return tick++;;
 8001910:	2401      	movs	r4, #1
 8001912:	3301      	adds	r3, #1
 8001914:	46a0      	mov	r8, r4
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001916:	429f      	cmp	r7, r3
 8001918:	d06c      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800191a:	4666      	mov	r6, ip
 800191c:	686c      	ldr	r4, [r5, #4]
 800191e:	4226      	tst	r6, r4
 8001920:	d1f6      	bne.n	8001910 <HAL_RCC_ClockConfig+0x78>
 8001922:	4644      	mov	r4, r8
 8001924:	2c00      	cmp	r4, #0
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x94>
 8001928:	464c      	mov	r4, r9
 800192a:	6023      	str	r3, [r4, #0]
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800192c:	2501      	movs	r5, #1
 800192e:	4c33      	ldr	r4, [pc, #204]	; (80019fc <HAL_RCC_ClockConfig+0x164>)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	402b      	ands	r3, r5
 8001934:	428b      	cmp	r3, r1
 8001936:	d811      	bhi.n	800195c <HAL_RCC_ClockConfig+0xc4>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	0753      	lsls	r3, r2, #29
 800193a:	d506      	bpl.n	800194a <HAL_RCC_ClockConfig+0xb2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <HAL_RCC_ClockConfig+0x168>)
 800193e:	4933      	ldr	r1, [pc, #204]	; (8001a0c <HAL_RCC_ClockConfig+0x174>)
 8001940:	6853      	ldr	r3, [r2, #4]
 8001942:	400b      	ands	r3, r1
 8001944:	68c1      	ldr	r1, [r0, #12]
 8001946:	430b      	orrs	r3, r1
 8001948:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 800194a:	22e1      	movs	r2, #225	; 0xe1
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 800194c:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 800194e:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_RCC_ClockConfig+0x178>)
 8001950:	03d2      	lsls	r2, r2, #15
 8001952:	601a      	str	r2, [r3, #0]
}
 8001954:	bcc0      	pop	{r6, r7}
 8001956:	46b9      	mov	r9, r7
 8001958:	46b0      	mov	r8, r6
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	43ab      	bics	r3, r5
 8001960:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	421d      	tst	r5, r3
 8001966:	d0e7      	beq.n	8001938 <HAL_RCC_ClockConfig+0xa0>
      return HAL_ERROR;
 8001968:	2001      	movs	r0, #1
 800196a:	e7f3      	b.n	8001954 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196c:	01a4      	lsls	r4, r4, #6
 800196e:	d5a5      	bpl.n	80018bc <HAL_RCC_ClockConfig+0x24>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001970:	2603      	movs	r6, #3
 8001972:	686c      	ldr	r4, [r5, #4]
 8001974:	43b4      	bics	r4, r6
 8001976:	4323      	orrs	r3, r4
 8001978:	606b      	str	r3, [r5, #4]
	return tick++;;
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x16c>)
 800197c:	681f      	ldr	r7, [r3, #0]
 800197e:	4699      	mov	r9, r3
 8001980:	1c7c      	adds	r4, r7, #1
 8001982:	601c      	str	r4, [r3, #0]
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x170>)
 8001986:	469c      	mov	ip, r3
	return tick++;;
 8001988:	2300      	movs	r3, #0
 800198a:	4698      	mov	r8, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198c:	330c      	adds	r3, #12
 800198e:	4467      	add	r7, ip
 8001990:	469c      	mov	ip, r3
 8001992:	e004      	b.n	800199e <HAL_RCC_ClockConfig+0x106>
	return tick++;;
 8001994:	2301      	movs	r3, #1
 8001996:	3401      	adds	r4, #1
 8001998:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199a:	42a7      	cmp	r7, r4
 800199c:	d02a      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199e:	4666      	mov	r6, ip
 80019a0:	686b      	ldr	r3, [r5, #4]
 80019a2:	4033      	ands	r3, r6
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d1f5      	bne.n	8001994 <HAL_RCC_ClockConfig+0xfc>
 80019a8:	4643      	mov	r3, r8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0be      	beq.n	800192c <HAL_RCC_ClockConfig+0x94>
 80019ae:	464b      	mov	r3, r9
 80019b0:	601c      	str	r4, [r3, #0]
 80019b2:	e7bb      	b.n	800192c <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b4:	03a4      	lsls	r4, r4, #14
 80019b6:	d400      	bmi.n	80019ba <HAL_RCC_ClockConfig+0x122>
 80019b8:	e780      	b.n	80018bc <HAL_RCC_ClockConfig+0x24>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	2603      	movs	r6, #3
 80019bc:	686c      	ldr	r4, [r5, #4]
 80019be:	43b4      	bics	r4, r6
 80019c0:	4323      	orrs	r3, r4
 80019c2:	606b      	str	r3, [r5, #4]
	return tick++;;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_ClockConfig+0x16c>)
 80019c6:	681f      	ldr	r7, [r3, #0]
 80019c8:	4699      	mov	r9, r3
 80019ca:	1c7c      	adds	r4, r7, #1
 80019cc:	601c      	str	r4, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x170>)
 80019d0:	469c      	mov	ip, r3
	return tick++;;
 80019d2:	2300      	movs	r3, #0
 80019d4:	4698      	mov	r8, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d6:	330c      	adds	r3, #12
 80019d8:	4467      	add	r7, ip
 80019da:	469c      	mov	ip, r3
 80019dc:	e004      	b.n	80019e8 <HAL_RCC_ClockConfig+0x150>
	return tick++;;
 80019de:	2301      	movs	r3, #1
 80019e0:	3401      	adds	r4, #1
 80019e2:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	42a7      	cmp	r7, r4
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e8:	4666      	mov	r6, ip
 80019ea:	686b      	ldr	r3, [r5, #4]
 80019ec:	4033      	ands	r3, r6
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d1f5      	bne.n	80019de <HAL_RCC_ClockConfig+0x146>
 80019f2:	e7d9      	b.n	80019a8 <HAL_RCC_ClockConfig+0x110>
 80019f4:	464b      	mov	r3, r9
          return HAL_TIMEOUT;
 80019f6:	2003      	movs	r0, #3
 80019f8:	601f      	str	r7, [r3, #0]
 80019fa:	e7ab      	b.n	8001954 <HAL_RCC_ClockConfig+0xbc>
 80019fc:	40022000 	.word	0x40022000
 8001a00:	40021000 	.word	0x40021000
 8001a04:	200002cc 	.word	0x200002cc
 8001a08:	0000138a 	.word	0x0000138a
 8001a0c:	fffff8ff 	.word	0xfffff8ff
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	4645      	mov	r5, r8
 8001a18:	46de      	mov	lr, fp
 8001a1a:	4657      	mov	r7, sl
 8001a1c:	464e      	mov	r6, r9
 8001a1e:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a20:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0x00U;
 8001a22:	2300      	movs	r3, #0
{ 
 8001a24:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a26:	2d00      	cmp	r5, #0
 8001a28:	d100      	bne.n	8001a2c <HAL_GPIO_Init+0x18>
 8001a2a:	e081      	b.n	8001b30 <HAL_GPIO_Init+0x11c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4693      	mov	fp, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	4a6d      	ldr	r2, [pc, #436]	; (8001be8 <HAL_GPIO_Init+0x1d4>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a32:	46aa      	mov	sl, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a34:	4691      	mov	r9, r2
        temp = EXTI->IMR;
 8001a36:	4688      	mov	r8, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a38:	465c      	mov	r4, fp
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	409c      	lsls	r4, r3
 8001a3e:	4022      	ands	r2, r4
 8001a40:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8001a42:	4652      	mov	r2, sl
 8001a44:	4222      	tst	r2, r4
 8001a46:	d06f      	beq.n	8001b28 <HAL_GPIO_Init+0x114>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001a48:	4642      	mov	r2, r8
 8001a4a:	6852      	ldr	r2, [r2, #4]
 8001a4c:	2510      	movs	r5, #16
 8001a4e:	0011      	movs	r1, r2
 8001a50:	43a9      	bics	r1, r5
 8001a52:	9101      	str	r1, [sp, #4]
 8001a54:	2902      	cmp	r1, #2
 8001a56:	d100      	bne.n	8001a5a <HAL_GPIO_Init+0x46>
 8001a58:	e071      	b.n	8001b3e <HAL_GPIO_Init+0x12a>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001a5a:	2603      	movs	r6, #3
 8001a5c:	005d      	lsls	r5, r3, #1
 8001a5e:	40ae      	lsls	r6, r5
 8001a60:	46b4      	mov	ip, r6
 8001a62:	4661      	mov	r1, ip
      temp = GPIOx->MODER;
 8001a64:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001a66:	43f6      	mvns	r6, r6
 8001a68:	438f      	bics	r7, r1
 8001a6a:	0039      	movs	r1, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	2703      	movs	r7, #3
 8001a6e:	4017      	ands	r7, r2
 8001a70:	40af      	lsls	r7, r5
 8001a72:	46bc      	mov	ip, r7
 8001a74:	000f      	movs	r7, r1
 8001a76:	4661      	mov	r1, ip
 8001a78:	430f      	orrs	r7, r1
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7a:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER = temp;
 8001a7c:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7e:	3901      	subs	r1, #1
 8001a80:	2901      	cmp	r1, #1
 8001a82:	d800      	bhi.n	8001a86 <HAL_GPIO_Init+0x72>
 8001a84:	e077      	b.n	8001b76 <HAL_GPIO_Init+0x162>
      temp = GPIOx->PUPDR;
 8001a86:	68c1      	ldr	r1, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a88:	400e      	ands	r6, r1
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	6889      	ldr	r1, [r1, #8]
 8001a8e:	40a9      	lsls	r1, r5
 8001a90:	430e      	orrs	r6, r1
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0549      	lsls	r1, r1, #21
      GPIOx->PUPDR = temp;
 8001a96:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001a98:	420a      	tst	r2, r1
 8001a9a:	d045      	beq.n	8001b28 <HAL_GPIO_Init+0x114>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	465c      	mov	r4, fp
 8001aa0:	6989      	ldr	r1, [r1, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001aa2:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	4321      	orrs	r1, r4
 8001aa6:	464c      	mov	r4, r9
 8001aa8:	61a1      	str	r1, [r4, #24]
 8001aaa:	69a1      	ldr	r1, [r4, #24]
 8001aac:	465c      	mov	r4, fp
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001aae:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab0:	4021      	ands	r1, r4
 8001ab2:	4c4e      	ldr	r4, [pc, #312]	; (8001bec <HAL_GPIO_Init+0x1d8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001ab4:	401d      	ands	r5, r3
 8001ab6:	46a4      	mov	ip, r4
 8001ab8:	00ad      	lsls	r5, r5, #2
 8001aba:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abc:	9103      	str	r1, [sp, #12]
 8001abe:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ac0:	0899      	lsrs	r1, r3, #2
 8001ac2:	0089      	lsls	r1, r1, #2
 8001ac4:	4461      	add	r1, ip
 8001ac6:	688c      	ldr	r4, [r1, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001ac8:	43b4      	bics	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	2690      	movs	r6, #144	; 0x90
 8001acc:	05f6      	lsls	r6, r6, #23
 8001ace:	42b0      	cmp	r0, r6
 8001ad0:	d00e      	beq.n	8001af0 <HAL_GPIO_Init+0xdc>
 8001ad2:	4e47      	ldr	r6, [pc, #284]	; (8001bf0 <HAL_GPIO_Init+0x1dc>)
 8001ad4:	42b0      	cmp	r0, r6
 8001ad6:	d100      	bne.n	8001ada <HAL_GPIO_Init+0xc6>
 8001ad8:	e07d      	b.n	8001bd6 <HAL_GPIO_Init+0x1c2>
 8001ada:	4e46      	ldr	r6, [pc, #280]	; (8001bf4 <HAL_GPIO_Init+0x1e0>)
 8001adc:	42b0      	cmp	r0, r6
 8001ade:	d100      	bne.n	8001ae2 <HAL_GPIO_Init+0xce>
 8001ae0:	e07d      	b.n	8001bde <HAL_GPIO_Init+0x1ca>
 8001ae2:	4e45      	ldr	r6, [pc, #276]	; (8001bf8 <HAL_GPIO_Init+0x1e4>)
 8001ae4:	42b0      	cmp	r0, r6
 8001ae6:	d100      	bne.n	8001aea <HAL_GPIO_Init+0xd6>
 8001ae8:	e071      	b.n	8001bce <HAL_GPIO_Init+0x1ba>
 8001aea:	2605      	movs	r6, #5
 8001aec:	40ae      	lsls	r6, r5
 8001aee:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001af0:	608c      	str	r4, [r1, #8]
        temp = EXTI->IMR;
 8001af2:	4942      	ldr	r1, [pc, #264]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001af4:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8001af6:	6809      	ldr	r1, [r1, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001af8:	43e4      	mvns	r4, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afa:	03d5      	lsls	r5, r2, #15
 8001afc:	d44e      	bmi.n	8001b9c <HAL_GPIO_Init+0x188>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8001afe:	4d3f      	ldr	r5, [pc, #252]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b00:	4021      	ands	r1, r4
        EXTI->IMR = temp;
 8001b02:	6029      	str	r1, [r5, #0]

        temp = EXTI->EMR;
 8001b04:	6869      	ldr	r1, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b06:	0395      	lsls	r5, r2, #14
 8001b08:	d44f      	bmi.n	8001baa <HAL_GPIO_Init+0x196>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8001b0a:	4d3c      	ldr	r5, [pc, #240]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001b0c:	4021      	ands	r1, r4
        EXTI->EMR = temp;
 8001b0e:	6069      	str	r1, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b10:	68a9      	ldr	r1, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b12:	02d5      	lsls	r5, r2, #11
 8001b14:	d450      	bmi.n	8001bb8 <HAL_GPIO_Init+0x1a4>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8001b16:	4d39      	ldr	r5, [pc, #228]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001b18:	4021      	ands	r1, r4
        EXTI->RTSR = temp;
 8001b1a:	60a9      	str	r1, [r5, #8]

        temp = EXTI->FTSR;
 8001b1c:	68e9      	ldr	r1, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1e:	0292      	lsls	r2, r2, #10
 8001b20:	d451      	bmi.n	8001bc6 <HAL_GPIO_Init+0x1b2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001b22:	4021      	ands	r1, r4
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8001b24:	4a35      	ldr	r2, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
 8001b26:	60d1      	str	r1, [r2, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b28:	4652      	mov	r2, sl
      }
    }
    
    position++;
 8001b2a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b2c:	40da      	lsrs	r2, r3
 8001b2e:	d183      	bne.n	8001a38 <HAL_GPIO_Init+0x24>
  } 
}
 8001b30:	b005      	add	sp, #20
 8001b32:	bcf0      	pop	{r4, r5, r6, r7}
 8001b34:	46bb      	mov	fp, r7
 8001b36:	46b2      	mov	sl, r6
 8001b38:	46a9      	mov	r9, r5
 8001b3a:	46a0      	mov	r8, r4
 8001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001b3e:	270f      	movs	r7, #15
 8001b40:	3d09      	subs	r5, #9
 8001b42:	401d      	ands	r5, r3
 8001b44:	00ad      	lsls	r5, r5, #2
 8001b46:	40af      	lsls	r7, r5
        temp = GPIOx->AFR[position >> 3];
 8001b48:	08d9      	lsrs	r1, r3, #3
 8001b4a:	0089      	lsls	r1, r1, #2
 8001b4c:	1841      	adds	r1, r0, r1
 8001b4e:	6a0e      	ldr	r6, [r1, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001b50:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001b52:	4647      	mov	r7, r8
 8001b54:	693f      	ldr	r7, [r7, #16]
 8001b56:	40af      	lsls	r7, r5
 8001b58:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	620e      	str	r6, [r1, #32]
      temp = GPIOx->MODER;
 8001b5c:	6801      	ldr	r1, [r0, #0]
 8001b5e:	005d      	lsls	r5, r3, #1
 8001b60:	468c      	mov	ip, r1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001b62:	2103      	movs	r1, #3
 8001b64:	4667      	mov	r7, ip
 8001b66:	40a9      	lsls	r1, r5
 8001b68:	438f      	bics	r7, r1
 8001b6a:	43ce      	mvns	r6, r1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	4011      	ands	r1, r2
 8001b70:	40a9      	lsls	r1, r5
 8001b72:	4339      	orrs	r1, r7
      GPIOx->MODER = temp;
 8001b74:	6001      	str	r1, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001b76:	6881      	ldr	r1, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b78:	4031      	ands	r1, r6
 8001b7a:	468c      	mov	ip, r1
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	68c9      	ldr	r1, [r1, #12]
 8001b80:	4667      	mov	r7, ip
 8001b82:	40a9      	lsls	r1, r5
 8001b84:	4339      	orrs	r1, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b86:	465f      	mov	r7, fp
        GPIOx->OSPEEDR = temp;
 8001b88:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b8a:	6841      	ldr	r1, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	43a1      	bics	r1, r4
 8001b8e:	000c      	movs	r4, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b90:	0911      	lsrs	r1, r2, #4
 8001b92:	4039      	ands	r1, r7
 8001b94:	4099      	lsls	r1, r3
 8001b96:	4321      	orrs	r1, r4
        GPIOx->OTYPER = temp;
 8001b98:	6041      	str	r1, [r0, #4]
 8001b9a:	e774      	b.n	8001a86 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8001b9c:	9d00      	ldr	r5, [sp, #0]
 8001b9e:	4329      	orrs	r1, r5
        EXTI->IMR = temp;
 8001ba0:	4d16      	ldr	r5, [pc, #88]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
 8001ba2:	6029      	str	r1, [r5, #0]
        temp = EXTI->EMR;
 8001ba4:	6869      	ldr	r1, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba6:	0395      	lsls	r5, r2, #14
 8001ba8:	d5af      	bpl.n	8001b0a <HAL_GPIO_Init+0xf6>
          SET_BIT(temp, iocurrent); 
 8001baa:	9d00      	ldr	r5, [sp, #0]
 8001bac:	4329      	orrs	r1, r5
        EXTI->EMR = temp;
 8001bae:	4d13      	ldr	r5, [pc, #76]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
 8001bb0:	6069      	str	r1, [r5, #4]
        temp = EXTI->RTSR;
 8001bb2:	68a9      	ldr	r1, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb4:	02d5      	lsls	r5, r2, #11
 8001bb6:	d5ae      	bpl.n	8001b16 <HAL_GPIO_Init+0x102>
          SET_BIT(temp, iocurrent); 
 8001bb8:	9d00      	ldr	r5, [sp, #0]
 8001bba:	4329      	orrs	r1, r5
        EXTI->RTSR = temp;
 8001bbc:	4d0f      	ldr	r5, [pc, #60]	; (8001bfc <HAL_GPIO_Init+0x1e8>)
 8001bbe:	60a9      	str	r1, [r5, #8]
        temp = EXTI->FTSR;
 8001bc0:	68e9      	ldr	r1, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc2:	0292      	lsls	r2, r2, #10
 8001bc4:	d5ad      	bpl.n	8001b22 <HAL_GPIO_Init+0x10e>
          SET_BIT(temp, iocurrent); 
 8001bc6:	9a00      	ldr	r2, [sp, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	0011      	movs	r1, r2
 8001bcc:	e7aa      	b.n	8001b24 <HAL_GPIO_Init+0x110>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bce:	2603      	movs	r6, #3
 8001bd0:	40ae      	lsls	r6, r5
 8001bd2:	4334      	orrs	r4, r6
 8001bd4:	e78c      	b.n	8001af0 <HAL_GPIO_Init+0xdc>
 8001bd6:	465e      	mov	r6, fp
 8001bd8:	40ae      	lsls	r6, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	e788      	b.n	8001af0 <HAL_GPIO_Init+0xdc>
 8001bde:	2602      	movs	r6, #2
 8001be0:	40ae      	lsls	r6, r5
 8001be2:	4334      	orrs	r4, r6
 8001be4:	e784      	b.n	8001af0 <HAL_GPIO_Init+0xdc>
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	48000400 	.word	0x48000400
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	48000c00 	.word	0x48000c00
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c04:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8001c06:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c08:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 8001c0a:	e7fc      	b.n	8001c06 <HAL_GPIO_WritePin+0x6>

08001c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c10:	d100      	bne.n	8001c14 <HAL_UART_Init+0x8>
 8001c12:	e06e      	b.n	8001cf2 <HAL_UART_Init+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001c14:	2369      	movs	r3, #105	; 0x69
 8001c16:	5cc3      	ldrb	r3, [r0, r3]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_UART_Init+0x16>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1e:	3368      	adds	r3, #104	; 0x68
 8001c20:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c22:	2369      	movs	r3, #105	; 0x69
 8001c24:	2224      	movs	r2, #36	; 0x24
 8001c26:	54e2      	strb	r2, [r4, r3]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001c28:	6825      	ldr	r5, [r4, #0]
 8001c2a:	3a23      	subs	r2, #35	; 0x23
 8001c2c:	682b      	ldr	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c2e:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8001c30:	4393      	bics	r3, r2
 8001c32:	602b      	str	r3, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c34:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c36:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c38:	4303      	orrs	r3, r0
 8001c3a:	6960      	ldr	r0, [r4, #20]
 8001c3c:	69e2      	ldr	r2, [r4, #28]
 8001c3e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c40:	4840      	ldr	r0, [pc, #256]	; (8001d44 <HAL_UART_Init+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c42:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c44:	4001      	ands	r1, r0
 8001c46:	430b      	orrs	r3, r1
 8001c48:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c4a:	686b      	ldr	r3, [r5, #4]
 8001c4c:	493e      	ldr	r1, [pc, #248]	; (8001d48 <HAL_UART_Init+0x13c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c4e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c50:	400b      	ands	r3, r1
 8001c52:	68e1      	ldr	r1, [r4, #12]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c58:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c5a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c5c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c5e:	483b      	ldr	r0, [pc, #236]	; (8001d4c <HAL_UART_Init+0x140>)
 8001c60:	4001      	ands	r1, r0
 8001c62:	430b      	orrs	r3, r1
 8001c64:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_UART_Init+0x144>)
 8001c68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d926      	bls.n	8001cc2 <HAL_UART_Init+0xb6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d059      	beq.n	8001d30 <HAL_UART_Init+0x124>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c7c:	6863      	ldr	r3, [r4, #4]
 8001c7e:	0858      	lsrs	r0, r3, #1
 8001c80:	23e1      	movs	r3, #225	; 0xe1
 8001c82:	03db      	lsls	r3, r3, #15
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c84:	469c      	mov	ip, r3
 8001c86:	6861      	ldr	r1, [r4, #4]
 8001c88:	4460      	add	r0, ip
 8001c8a:	f7fe faa1 	bl	80001d0 <__udivsi3>
 8001c8e:	0400      	lsls	r0, r0, #16
 8001c90:	0c00      	lsrs	r0, r0, #16
 8001c92:	60e8      	str	r0, [r5, #12]
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c94:	686b      	ldr	r3, [r5, #4]
 8001c96:	4a2f      	ldr	r2, [pc, #188]	; (8001d54 <HAL_UART_Init+0x148>)
  huart->gState  = HAL_UART_STATE_READY;
 8001c98:	2169      	movs	r1, #105	; 0x69
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c9a:	4013      	ands	r3, r2
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c9c:	2208      	movs	r2, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c9e:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ca0:	68ab      	ldr	r3, [r5, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ca2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	3a07      	subs	r2, #7
 8001cac:	4313      	orrs	r3, r2
 8001cae:	602b      	str	r3, [r5, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb0:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001cb2:	321f      	adds	r2, #31
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb4:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 8001cb6:	5462      	strb	r2, [r4, r1]
  huart->RxState = HAL_UART_STATE_READY;
 8001cb8:	3101      	adds	r1, #1
 8001cba:	5462      	strb	r2, [r4, r1]
  __HAL_UNLOCK(huart);
 8001cbc:	3248      	adds	r2, #72	; 0x48
 8001cbe:	54a3      	strb	r3, [r4, r2]
}
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
 8001cc2:	4925      	ldr	r1, [pc, #148]	; (8001d58 <HAL_UART_Init+0x14c>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0209      	lsls	r1, r1, #8
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d013      	beq.n	8001cf6 <HAL_UART_Init+0xea>
    switch (clocksource)
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d0d4      	beq.n	8001c7c <HAL_UART_Init+0x70>
 8001cd2:	d807      	bhi.n	8001ce4 <HAL_UART_Init+0xd8>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0d1      	beq.n	8001c7c <HAL_UART_Init+0x70>
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d10a      	bne.n	8001cf2 <HAL_UART_Init+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001cdc:	6863      	ldr	r3, [r4, #4]
 8001cde:	0858      	lsrs	r0, r3, #1
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_UART_Init+0x150>)
 8001ce2:	e7cf      	b.n	8001c84 <HAL_UART_Init+0x78>
    switch (clocksource)
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d104      	bne.n	8001cf2 <HAL_UART_Init+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	0858      	lsrs	r0, r3, #1
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	e7c8      	b.n	8001c84 <HAL_UART_Init+0x78>
    return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e7e4      	b.n	8001cc0 <HAL_UART_Init+0xb4>
    switch (clocksource)
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d01a      	beq.n	8001d30 <HAL_UART_Init+0x124>
 8001cfa:	d812      	bhi.n	8001d22 <HAL_UART_Init+0x116>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d017      	beq.n	8001d30 <HAL_UART_Init+0x124>
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d11a      	bne.n	8001d3a <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d04:	6863      	ldr	r3, [r4, #4]
 8001d06:	0858      	lsrs	r0, r3, #1
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_UART_Init+0x154>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d0a:	469c      	mov	ip, r3
 8001d0c:	6861      	ldr	r1, [r4, #4]
 8001d0e:	4460      	add	r0, ip
 8001d10:	f7fe fa5e 	bl	80001d0 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_UART_Init+0x158>)
 8001d16:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d18:	0700      	lsls	r0, r0, #28
 8001d1a:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8001d1c:	4318      	orrs	r0, r3
 8001d1e:	60e8      	str	r0, [r5, #12]
  return ret;
 8001d20:	e7b8      	b.n	8001c94 <HAL_UART_Init+0x88>
    switch (clocksource)
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d109      	bne.n	8001d3a <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	0858      	lsrs	r0, r3, #1
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	e7ec      	b.n	8001d0a <HAL_UART_Init+0xfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d30:	6863      	ldr	r3, [r4, #4]
 8001d32:	0858      	lsrs	r0, r3, #1
 8001d34:	23e1      	movs	r3, #225	; 0xe1
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	e7e7      	b.n	8001d0a <HAL_UART_Init+0xfe>
    huart->Instance->BRR = brrtemp;
 8001d3a:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8001d3e:	60eb      	str	r3, [r5, #12]
  return ret;
 8001d40:	e7be      	b.n	8001cc0 <HAL_UART_Init+0xb4>
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	ffff69f3 	.word	0xffff69f3
 8001d48:	ffffcfff 	.word	0xffffcfff
 8001d4c:	fffff4ff 	.word	0xfffff4ff
 8001d50:	40021000 	.word	0x40021000
 8001d54:	fffff7ff 	.word	0xfffff7ff
 8001d58:	0800368c 	.word	0x0800368c
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	01e84800 	.word	0x01e84800
 8001d64:	0000fff0 	.word	0x0000fff0

08001d68 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	4645      	mov	r5, r8
 8001d6c:	46de      	mov	lr, fp
 8001d6e:	4657      	mov	r7, sl
 8001d70:	464e      	mov	r6, r9
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d72:	246a      	movs	r4, #106	; 0x6a
{
 8001d74:	b5e0      	push	{r5, r6, r7, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d76:	5d05      	ldrb	r5, [r0, r4]
 8001d78:	2d20      	cmp	r5, #32
 8001d7a:	d165      	bne.n	8001e48 <HAL_UART_Receive+0xe0>
  {
    if((pData == NULL ) || (Size == 0U))
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	d058      	beq.n	8001e32 <HAL_UART_Receive+0xca>
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d056      	beq.n	8001e32 <HAL_UART_Receive+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d84:	2680      	movs	r6, #128	; 0x80
 8001d86:	6885      	ldr	r5, [r0, #8]
 8001d88:	0176      	lsls	r6, r6, #5
 8001d8a:	42b5      	cmp	r5, r6
 8001d8c:	d048      	beq.n	8001e20 <HAL_UART_Receive+0xb8>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d8e:	2668      	movs	r6, #104	; 0x68
 8001d90:	5d87      	ldrb	r7, [r0, r6]
 8001d92:	2f01      	cmp	r7, #1
 8001d94:	d058      	beq.n	8001e48 <HAL_UART_Receive+0xe0>
 8001d96:	2701      	movs	r7, #1
 8001d98:	5587      	strb	r7, [r0, r6]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9a:	2600      	movs	r6, #0
 8001d9c:	66c6      	str	r6, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d9e:	3622      	adds	r6, #34	; 0x22
 8001da0:	5506      	strb	r6, [r0, r4]
	return tick++;;
 8001da2:	4c60      	ldr	r4, [pc, #384]	; (8001f24 <HAL_UART_Receive+0x1bc>)
 8001da4:	46a3      	mov	fp, r4
 8001da6:	465e      	mov	r6, fp
 8001da8:	6824      	ldr	r4, [r4, #0]
 8001daa:	1c67      	adds	r7, r4, #1
 8001dac:	6037      	str	r7, [r6, #0]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8001dae:	2658      	movs	r6, #88	; 0x58
 8001db0:	5382      	strh	r2, [r0, r6]
    huart->RxXferCount = Size;
 8001db2:	3602      	adds	r6, #2
 8001db4:	5382      	strh	r2, [r0, r6]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001db6:	2d00      	cmp	r5, #0
 8001db8:	d100      	bne.n	8001dbc <HAL_UART_Receive+0x54>
 8001dba:	e071      	b.n	8001ea0 <HAL_UART_Receive+0x138>
    uhMask = huart->Mask;
 8001dbc:	225c      	movs	r2, #92	; 0x5c
 8001dbe:	5a82      	ldrh	r2, [r0, r2]
 8001dc0:	4690      	mov	r8, r2

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001dc2:	225a      	movs	r2, #90	; 0x5a
 8001dc4:	2500      	movs	r5, #0
 8001dc6:	5a82      	ldrh	r2, [r0, r2]
 8001dc8:	46aa      	mov	sl, r5
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d020      	beq.n	8001e10 <HAL_UART_Receive+0xa8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dce:	43e2      	mvns	r2, r4
 8001dd0:	4694      	mov	ip, r2
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	0152      	lsls	r2, r2, #5
      huart->RxXferCount--;
 8001dd6:	265a      	movs	r6, #90	; 0x5a
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd8:	4691      	mov	r9, r2
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dda:	3520      	adds	r5, #32
      huart->RxXferCount--;
 8001ddc:	5b82      	ldrh	r2, [r0, r6]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dde:	6804      	ldr	r4, [r0, #0]
      huart->RxXferCount--;
 8001de0:	3a01      	subs	r2, #1
 8001de2:	b292      	uxth	r2, r2
 8001de4:	5382      	strh	r2, [r0, r6]
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	d130      	bne.n	8001e4c <HAL_UART_Receive+0xe4>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dea:	69e2      	ldr	r2, [r4, #28]
 8001dec:	4215      	tst	r5, r2
 8001dee:	d0fc      	beq.n	8001dea <HAL_UART_Receive+0x82>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df0:	6882      	ldr	r2, [r0, #8]
 8001df2:	454a      	cmp	r2, r9
 8001df4:	d04b      	beq.n	8001e8e <HAL_UART_Receive+0x126>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
        pData +=2U;
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001df6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8001df8:	4644      	mov	r4, r8
 8001dfa:	4022      	ands	r2, r4
 8001dfc:	700a      	strb	r2, [r1, #0]
 8001dfe:	3101      	adds	r1, #1
    while(huart->RxXferCount > 0U)
 8001e00:	5b82      	ldrh	r2, [r0, r6]
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d1ea      	bne.n	8001ddc <HAL_UART_Receive+0x74>
 8001e06:	4653      	mov	r3, sl
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_UART_Receive+0xa8>
 8001e0c:	465b      	mov	r3, fp
 8001e0e:	601f      	str	r7, [r3, #0]
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e10:	236a      	movs	r3, #106	; 0x6a
 8001e12:	2220      	movs	r2, #32
 8001e14:	54c2      	strb	r2, [r0, r3]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e16:	2200      	movs	r2, #0
 8001e18:	3b02      	subs	r3, #2
 8001e1a:	54c2      	strb	r2, [r0, r3]

    return HAL_OK;
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	e009      	b.n	8001e34 <HAL_UART_Receive+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e20:	6905      	ldr	r5, [r0, #16]
 8001e22:	2d00      	cmp	r5, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_UART_Receive+0xd8>
      if((((uint32_t)pData)&1U) != 0U)
 8001e26:	3501      	adds	r5, #1
 8001e28:	002e      	movs	r6, r5
 8001e2a:	400e      	ands	r6, r1
 8001e2c:	46b4      	mov	ip, r6
 8001e2e:	4229      	tst	r1, r5
 8001e30:	d05f      	beq.n	8001ef2 <HAL_UART_Receive+0x18a>
      return  HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001e34:	bcf0      	pop	{r4, r5, r6, r7}
 8001e36:	46bb      	mov	fp, r7
 8001e38:	46b2      	mov	sl, r6
 8001e3a:	46a9      	mov	r9, r5
 8001e3c:	46a0      	mov	r8, r4
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8001e40:	2568      	movs	r5, #104	; 0x68
 8001e42:	5d46      	ldrb	r6, [r0, r5]
 8001e44:	2e01      	cmp	r6, #1
 8001e46:	d138      	bne.n	8001eba <HAL_UART_Receive+0x152>
    return HAL_BUSY;
 8001e48:	2002      	movs	r0, #2
 8001e4a:	e7f3      	b.n	8001e34 <HAL_UART_Receive+0xcc>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e4c:	69e2      	ldr	r2, [r4, #28]
 8001e4e:	4215      	tst	r5, r2
 8001e50:	d1ce      	bne.n	8001df0 <HAL_UART_Receive+0x88>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d02d      	beq.n	8001eb2 <HAL_UART_Receive+0x14a>
	return tick++;;
 8001e56:	2201      	movs	r2, #1
 8001e58:	4692      	mov	sl, r2
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e5a:	4662      	mov	r2, ip
	return tick++;;
 8001e5c:	3701      	adds	r7, #1
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e5e:	19d2      	adds	r2, r2, r7
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d9c0      	bls.n	8001de6 <HAL_UART_Receive+0x7e>
 8001e64:	465b      	mov	r3, fp
 8001e66:	601f      	str	r7, [r3, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <HAL_UART_Receive+0x1c0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e70:	68a3      	ldr	r3, [r4, #8]
 8001e72:	32a3      	adds	r2, #163	; 0xa3
 8001e74:	32ff      	adds	r2, #255	; 0xff
 8001e76:	4393      	bics	r3, r2
 8001e78:	60a3      	str	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	3268      	adds	r2, #104	; 0x68
 8001e7e:	5483      	strb	r3, [r0, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001e80:	3201      	adds	r2, #1
 8001e82:	5483      	strb	r3, [r0, r2]
        __HAL_UNLOCK(huart);
 8001e84:	2200      	movs	r2, #0
 8001e86:	3348      	adds	r3, #72	; 0x48
 8001e88:	54c2      	strb	r2, [r0, r3]
        return HAL_TIMEOUT;
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	e7d2      	b.n	8001e34 <HAL_UART_Receive+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e8e:	6902      	ldr	r2, [r0, #16]
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d1b0      	bne.n	8001df6 <HAL_UART_Receive+0x8e>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001e94:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8001e96:	4644      	mov	r4, r8
 8001e98:	4022      	ands	r2, r4
 8001e9a:	800a      	strh	r2, [r1, #0]
        pData +=2U;
 8001e9c:	3102      	adds	r1, #2
 8001e9e:	e7af      	b.n	8001e00 <HAL_UART_Receive+0x98>
    UART_MASK_COMPUTATION(huart);
 8001ea0:	6902      	ldr	r2, [r0, #16]
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d11f      	bne.n	8001ee6 <HAL_UART_Receive+0x17e>
 8001ea6:	25ff      	movs	r5, #255	; 0xff
 8001ea8:	325c      	adds	r2, #92	; 0x5c
 8001eaa:	5285      	strh	r5, [r0, r2]
 8001eac:	32a3      	adds	r2, #163	; 0xa3
 8001eae:	4690      	mov	r8, r2
 8001eb0:	e787      	b.n	8001dc2 <HAL_UART_Receive+0x5a>
 8001eb2:	4653      	mov	r3, sl
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1d5      	bne.n	8001e64 <HAL_UART_Receive+0xfc>
 8001eb8:	e7d6      	b.n	8001e68 <HAL_UART_Receive+0x100>
    __HAL_LOCK(huart);
 8001eba:	2601      	movs	r6, #1
 8001ebc:	5546      	strb	r6, [r0, r5]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ec2:	3522      	adds	r5, #34	; 0x22
 8001ec4:	5505      	strb	r5, [r0, r4]
	return tick++;;
 8001ec6:	4c17      	ldr	r4, [pc, #92]	; (8001f24 <HAL_UART_Receive+0x1bc>)
 8001ec8:	46a3      	mov	fp, r4
 8001eca:	465d      	mov	r5, fp
 8001ecc:	6824      	ldr	r4, [r4, #0]
 8001ece:	1c67      	adds	r7, r4, #1
 8001ed0:	602f      	str	r7, [r5, #0]
    huart->RxXferSize = Size;
 8001ed2:	2558      	movs	r5, #88	; 0x58
 8001ed4:	5342      	strh	r2, [r0, r5]
    huart->RxXferCount = Size;
 8001ed6:	3502      	adds	r5, #2
 8001ed8:	5342      	strh	r2, [r0, r5]
    UART_MASK_COMPUTATION(huart);
 8001eda:	225c      	movs	r2, #92	; 0x5c
 8001edc:	35a5      	adds	r5, #165	; 0xa5
 8001ede:	5285      	strh	r5, [r0, r2]
 8001ee0:	32a3      	adds	r2, #163	; 0xa3
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	e76d      	b.n	8001dc2 <HAL_UART_Receive+0x5a>
 8001ee6:	225c      	movs	r2, #92	; 0x5c
 8001ee8:	257f      	movs	r5, #127	; 0x7f
 8001eea:	5285      	strh	r5, [r0, r2]
 8001eec:	3223      	adds	r2, #35	; 0x23
 8001eee:	4690      	mov	r8, r2
 8001ef0:	e767      	b.n	8001dc2 <HAL_UART_Receive+0x5a>
    __HAL_LOCK(huart);
 8001ef2:	2668      	movs	r6, #104	; 0x68
 8001ef4:	5d87      	ldrb	r7, [r0, r6]
 8001ef6:	2f01      	cmp	r7, #1
 8001ef8:	d0a6      	beq.n	8001e48 <HAL_UART_Receive+0xe0>
 8001efa:	5585      	strb	r5, [r0, r6]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efc:	4665      	mov	r5, ip
 8001efe:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f00:	2522      	movs	r5, #34	; 0x22
 8001f02:	5505      	strb	r5, [r0, r4]
	return tick++;;
 8001f04:	4c07      	ldr	r4, [pc, #28]	; (8001f24 <HAL_UART_Receive+0x1bc>)
 8001f06:	46a3      	mov	fp, r4
 8001f08:	465d      	mov	r5, fp
 8001f0a:	6824      	ldr	r4, [r4, #0]
 8001f0c:	1c67      	adds	r7, r4, #1
 8001f0e:	602f      	str	r7, [r5, #0]
    huart->RxXferSize = Size;
 8001f10:	2558      	movs	r5, #88	; 0x58
 8001f12:	5342      	strh	r2, [r0, r5]
    huart->RxXferCount = Size;
 8001f14:	3502      	adds	r5, #2
 8001f16:	5342      	strh	r2, [r0, r5]
    UART_MASK_COMPUTATION(huart);
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_UART_Receive+0x1c4>)
 8001f1a:	3502      	adds	r5, #2
 8001f1c:	4690      	mov	r8, r2
 8001f1e:	5342      	strh	r2, [r0, r5]
 8001f20:	e74f      	b.n	8001dc2 <HAL_UART_Receive+0x5a>
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	200002cc 	.word	0x200002cc
 8001f28:	fffffe5f 	.word	0xfffffe5f
 8001f2c:	000001ff 	.word	0x000001ff

08001f30 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f32:	46de      	mov	lr, fp
 8001f34:	4657      	mov	r7, sl
 8001f36:	464e      	mov	r6, r9
 8001f38:	4645      	mov	r5, r8
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001f3a:	2469      	movs	r4, #105	; 0x69
{
 8001f3c:	b5e0      	push	{r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001f3e:	5d04      	ldrb	r4, [r0, r4]
{
 8001f40:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY)
 8001f42:	2c20      	cmp	r4, #32
 8001f44:	d000      	beq.n	8001f48 <HAL_UART_Transmit+0x18>
 8001f46:	e095      	b.n	8002074 <HAL_UART_Transmit+0x144>
  {
    if((pData == NULL ) || (Size == 0U))
 8001f48:	2900      	cmp	r1, #0
 8001f4a:	d061      	beq.n	8002010 <HAL_UART_Transmit+0xe0>
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d05f      	beq.n	8002010 <HAL_UART_Transmit+0xe0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f50:	6884      	ldr	r4, [r0, #8]
 8001f52:	46a4      	mov	ip, r4
 8001f54:	2480      	movs	r4, #128	; 0x80
 8001f56:	0164      	lsls	r4, r4, #5
 8001f58:	45a4      	cmp	ip, r4
 8001f5a:	d054      	beq.n	8002006 <HAL_UART_Transmit+0xd6>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f5c:	2468      	movs	r4, #104	; 0x68
 8001f5e:	5d05      	ldrb	r5, [r0, r4]
 8001f60:	2d01      	cmp	r5, #1
 8001f62:	d100      	bne.n	8001f66 <HAL_UART_Transmit+0x36>
 8001f64:	e086      	b.n	8002074 <HAL_UART_Transmit+0x144>
 8001f66:	2501      	movs	r5, #1
 8001f68:	5505      	strb	r5, [r0, r4]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6a:	2400      	movs	r4, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f6c:	3520      	adds	r5, #32
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6e:	66c4      	str	r4, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f70:	3469      	adds	r4, #105	; 0x69
 8001f72:	5505      	strb	r5, [r0, r4]
	return tick++;;
 8001f74:	4c4c      	ldr	r4, [pc, #304]	; (80020a8 <HAL_UART_Transmit+0x178>)
 8001f76:	46a3      	mov	fp, r4
 8001f78:	465d      	mov	r5, fp
 8001f7a:	6824      	ldr	r4, [r4, #0]
 8001f7c:	9401      	str	r4, [sp, #4]
 8001f7e:	3401      	adds	r4, #1
 8001f80:	9400      	str	r4, [sp, #0]
 8001f82:	602c      	str	r4, [r5, #0]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 8001f84:	2450      	movs	r4, #80	; 0x50
 8001f86:	5302      	strh	r2, [r0, r4]
    huart->TxXferCount = Size;
 8001f88:	3402      	adds	r4, #2
 8001f8a:	5302      	strh	r2, [r0, r4]
    while(huart->TxXferCount > 0)
 8001f8c:	5b02      	ldrh	r2, [r0, r4]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f8e:	6804      	ldr	r4, [r0, #0]
    while(huart->TxXferCount > 0)
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d021      	beq.n	8001fd8 <HAL_UART_Transmit+0xa8>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f94:	2200      	movs	r2, #0
 8001f96:	4691      	mov	r9, r2
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f98:	9a01      	ldr	r2, [sp, #4]
    {
      huart->TxXferCount--;
 8001f9a:	2652      	movs	r6, #82	; 0x52
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f9c:	43d2      	mvns	r2, r2
 8001f9e:	4692      	mov	sl, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	0152      	lsls	r2, r2, #5
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa4:	2580      	movs	r5, #128	; 0x80
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa6:	4690      	mov	r8, r2
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa8:	9f00      	ldr	r7, [sp, #0]
      huart->TxXferCount--;
 8001faa:	5b82      	ldrh	r2, [r0, r6]
 8001fac:	3a01      	subs	r2, #1
 8001fae:	b292      	uxth	r2, r2
 8001fb0:	5382      	strh	r2, [r0, r6]
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	d134      	bne.n	8002020 <HAL_UART_Transmit+0xf0>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb6:	69e2      	ldr	r2, [r4, #28]
 8001fb8:	4215      	tst	r5, r2
 8001fba:	d0fc      	beq.n	8001fb6 <HAL_UART_Transmit+0x86>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fbc:	45c4      	cmp	ip, r8
 8001fbe:	d050      	beq.n	8002062 <HAL_UART_Transmit+0x132>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
        pData += 2;
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001fc0:	780a      	ldrb	r2, [r1, #0]
 8001fc2:	3101      	adds	r1, #1
 8001fc4:	8522      	strh	r2, [r4, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001fc6:	5b82      	ldrh	r2, [r0, r6]
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	d1ee      	bne.n	8001faa <HAL_UART_Transmit+0x7a>
 8001fcc:	464a      	mov	r2, r9
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_UART_Transmit+0xa8>
 8001fd2:	465a      	mov	r2, fp
 8001fd4:	9700      	str	r7, [sp, #0]
 8001fd6:	6017      	str	r7, [r2, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001fd8:	9a01      	ldr	r2, [sp, #4]
    while(huart->TxXferCount > 0)
 8001fda:	2100      	movs	r1, #0
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fdc:	2540      	movs	r5, #64	; 0x40
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001fde:	43d2      	mvns	r2, r2
 8001fe0:	1c5e      	adds	r6, r3, #1
 8001fe2:	d149      	bne.n	8002078 <HAL_UART_Transmit+0x148>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	69e3      	ldr	r3, [r4, #28]
 8001fe8:	421a      	tst	r2, r3
 8001fea:	d0fc      	beq.n	8001fe6 <HAL_UART_Transmit+0xb6>
 8001fec:	2900      	cmp	r1, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_UART_Transmit+0xc6>
 8001ff0:	465b      	mov	r3, fp
 8001ff2:	9a00      	ldr	r2, [sp, #0]
 8001ff4:	601a      	str	r2, [r3, #0]
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff6:	2369      	movs	r3, #105	; 0x69
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	54c2      	strb	r2, [r0, r3]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	3b01      	subs	r3, #1
 8002000:	54c2      	strb	r2, [r0, r3]

    return HAL_OK;
 8002002:	2000      	movs	r0, #0
 8002004:	e005      	b.n	8002012 <HAL_UART_Transmit+0xe2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002006:	6904      	ldr	r4, [r0, #16]
 8002008:	2c00      	cmp	r4, #0
 800200a:	d1a7      	bne.n	8001f5c <HAL_UART_Transmit+0x2c>
      if((((uint32_t)pData)&1U) != 0U)
 800200c:	07cc      	lsls	r4, r1, #31
 800200e:	d5a5      	bpl.n	8001f5c <HAL_UART_Transmit+0x2c>
      return  HAL_ERROR;
 8002010:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002012:	b003      	add	sp, #12
 8002014:	bcf0      	pop	{r4, r5, r6, r7}
 8002016:	46bb      	mov	fp, r7
 8002018:	46b2      	mov	sl, r6
 800201a:	46a9      	mov	r9, r5
 800201c:	46a0      	mov	r8, r4
 800201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002020:	69e2      	ldr	r2, [r4, #28]
 8002022:	4215      	tst	r5, r2
 8002024:	d1ca      	bne.n	8001fbc <HAL_UART_Transmit+0x8c>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002026:	2b00      	cmp	r3, #0
 8002028:	d037      	beq.n	800209a <HAL_UART_Transmit+0x16a>
	return tick++;;
 800202a:	2201      	movs	r2, #1
 800202c:	4691      	mov	r9, r2
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800202e:	4652      	mov	r2, sl
	return tick++;;
 8002030:	3701      	adds	r7, #1
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002032:	19d2      	adds	r2, r2, r7
 8002034:	4293      	cmp	r3, r2
 8002036:	d2bc      	bcs.n	8001fb2 <HAL_UART_Transmit+0x82>
 8002038:	465b      	mov	r3, fp
 800203a:	601f      	str	r7, [r3, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_UART_Transmit+0x17c>)
 8002040:	4013      	ands	r3, r2
 8002042:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002044:	68a3      	ldr	r3, [r4, #8]
 8002046:	32a3      	adds	r2, #163	; 0xa3
 8002048:	32ff      	adds	r2, #255	; 0xff
 800204a:	4393      	bics	r3, r2
 800204c:	60a3      	str	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800204e:	2320      	movs	r3, #32
 8002050:	3268      	adds	r2, #104	; 0x68
 8002052:	5483      	strb	r3, [r0, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002054:	3201      	adds	r2, #1
 8002056:	5483      	strb	r3, [r0, r2]
        __HAL_UNLOCK(huart);
 8002058:	2200      	movs	r2, #0
 800205a:	3348      	adds	r3, #72	; 0x48
 800205c:	54c2      	strb	r2, [r0, r3]
      return HAL_TIMEOUT;
 800205e:	2003      	movs	r0, #3
 8002060:	e7d7      	b.n	8002012 <HAL_UART_Transmit+0xe2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002062:	6902      	ldr	r2, [r0, #16]
 8002064:	2a00      	cmp	r2, #0
 8002066:	d1ab      	bne.n	8001fc0 <HAL_UART_Transmit+0x90>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002068:	880a      	ldrh	r2, [r1, #0]
        pData += 2;
 800206a:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800206c:	05d2      	lsls	r2, r2, #23
 800206e:	0dd2      	lsrs	r2, r2, #23
 8002070:	8522      	strh	r2, [r4, #40]	; 0x28
        pData += 2;
 8002072:	e7a8      	b.n	8001fc6 <HAL_UART_Transmit+0x96>
    return HAL_BUSY;
 8002074:	2002      	movs	r0, #2
 8002076:	e7cc      	b.n	8002012 <HAL_UART_Transmit+0xe2>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002078:	69e6      	ldr	r6, [r4, #28]
 800207a:	4235      	tst	r5, r6
 800207c:	d1b6      	bne.n	8001fec <HAL_UART_Transmit+0xbc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00f      	beq.n	80020a2 <HAL_UART_Transmit+0x172>
	return tick++;;
 8002082:	9900      	ldr	r1, [sp, #0]
 8002084:	3101      	adds	r1, #1
 8002086:	000e      	movs	r6, r1
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002088:	1996      	adds	r6, r2, r6
	return tick++;;
 800208a:	9100      	str	r1, [sp, #0]
 800208c:	2101      	movs	r1, #1
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800208e:	42b3      	cmp	r3, r6
 8002090:	d2a6      	bcs.n	8001fe0 <HAL_UART_Transmit+0xb0>
 8002092:	465b      	mov	r3, fp
 8002094:	9a00      	ldr	r2, [sp, #0]
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e7d0      	b.n	800203c <HAL_UART_Transmit+0x10c>
 800209a:	464b      	mov	r3, r9
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1cb      	bne.n	8002038 <HAL_UART_Transmit+0x108>
 80020a0:	e7cc      	b.n	800203c <HAL_UART_Transmit+0x10c>
 80020a2:	2900      	cmp	r1, #0
 80020a4:	d1f5      	bne.n	8002092 <HAL_UART_Transmit+0x162>
 80020a6:	e7c9      	b.n	800203c <HAL_UART_Transmit+0x10c>
 80020a8:	200002cc 	.word	0x200002cc
 80020ac:	fffffe5f 	.word	0xfffffe5f

080020b0 <Reset_Handler>:
 80020b0:	2100      	movs	r1, #0
 80020b2:	e003      	b.n	80020bc <LoopCopyDataInit>

080020b4 <CopyDataInit>:
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <LoopForever+0x2>)
 80020b6:	585b      	ldr	r3, [r3, r1]
 80020b8:	5043      	str	r3, [r0, r1]
 80020ba:	3104      	adds	r1, #4

080020bc <LoopCopyDataInit>:
 80020bc:	480a      	ldr	r0, [pc, #40]	; (80020e8 <LoopForever+0x6>)
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <LoopForever+0xa>)
 80020c0:	1842      	adds	r2, r0, r1
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3f6      	bcc.n	80020b4 <CopyDataInit>
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <LoopForever+0xe>)
 80020c8:	e002      	b.n	80020d0 <LoopFillZerobss>

080020ca <FillZerobss>:
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	3204      	adds	r2, #4

080020d0 <LoopFillZerobss>:
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <LoopForever+0x12>)
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3f9      	bcc.n	80020ca <FillZerobss>
 80020d6:	e000      	b.n	80020da <LoopFillZerobss+0xa>
 80020d8:	bf00      	nop
 80020da:	f000 f80f 	bl	80020fc <__libc_init_array>
 80020de:	f7fe fa41 	bl	8000564 <main>

080020e2 <LoopForever>:
 80020e2:	e7fe      	b.n	80020e2 <LoopForever>
 80020e4:	08003800 	.word	0x08003800
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000068 	.word	0x20000068
 80020f0:	20000068 	.word	0x20000068
 80020f4:	200002e4 	.word	0x200002e4

080020f8 <BusFault_Handler>:
 80020f8:	e7fe      	b.n	80020f8 <BusFault_Handler>
 80020fa:	0000      	movs	r0, r0

080020fc <__libc_init_array>:
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	2600      	movs	r6, #0
 8002100:	4d0c      	ldr	r5, [pc, #48]	; (8002134 <__libc_init_array+0x38>)
 8002102:	4c0d      	ldr	r4, [pc, #52]	; (8002138 <__libc_init_array+0x3c>)
 8002104:	1b64      	subs	r4, r4, r5
 8002106:	10a4      	asrs	r4, r4, #2
 8002108:	42a6      	cmp	r6, r4
 800210a:	d109      	bne.n	8002120 <__libc_init_array+0x24>
 800210c:	2600      	movs	r6, #0
 800210e:	f001 f92b 	bl	8003368 <_init>
 8002112:	4d0a      	ldr	r5, [pc, #40]	; (800213c <__libc_init_array+0x40>)
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <__libc_init_array+0x44>)
 8002116:	1b64      	subs	r4, r4, r5
 8002118:	10a4      	asrs	r4, r4, #2
 800211a:	42a6      	cmp	r6, r4
 800211c:	d105      	bne.n	800212a <__libc_init_array+0x2e>
 800211e:	bd70      	pop	{r4, r5, r6, pc}
 8002120:	00b3      	lsls	r3, r6, #2
 8002122:	58eb      	ldr	r3, [r5, r3]
 8002124:	4798      	blx	r3
 8002126:	3601      	adds	r6, #1
 8002128:	e7ee      	b.n	8002108 <__libc_init_array+0xc>
 800212a:	00b3      	lsls	r3, r6, #2
 800212c:	58eb      	ldr	r3, [r5, r3]
 800212e:	4798      	blx	r3
 8002130:	3601      	adds	r6, #1
 8002132:	e7f2      	b.n	800211a <__libc_init_array+0x1e>
 8002134:	080037f8 	.word	0x080037f8
 8002138:	080037f8 	.word	0x080037f8
 800213c:	080037f8 	.word	0x080037f8
 8002140:	080037fc 	.word	0x080037fc

08002144 <memcpy>:
 8002144:	2300      	movs	r3, #0
 8002146:	b510      	push	{r4, lr}
 8002148:	429a      	cmp	r2, r3
 800214a:	d100      	bne.n	800214e <memcpy+0xa>
 800214c:	bd10      	pop	{r4, pc}
 800214e:	5ccc      	ldrb	r4, [r1, r3]
 8002150:	54c4      	strb	r4, [r0, r3]
 8002152:	3301      	adds	r3, #1
 8002154:	e7f8      	b.n	8002148 <memcpy+0x4>

08002156 <memset>:
 8002156:	0003      	movs	r3, r0
 8002158:	1882      	adds	r2, r0, r2
 800215a:	4293      	cmp	r3, r2
 800215c:	d100      	bne.n	8002160 <memset+0xa>
 800215e:	4770      	bx	lr
 8002160:	7019      	strb	r1, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	e7f9      	b.n	800215a <memset+0x4>
 8002166:	0000      	movs	r0, r0

08002168 <srand>:
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <srand+0x48>)
 800216a:	b570      	push	{r4, r5, r6, lr}
 800216c:	681d      	ldr	r5, [r3, #0]
 800216e:	0004      	movs	r4, r0
 8002170:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <srand+0x3c>
 8002176:	2018      	movs	r0, #24
 8002178:	f000 f8be 	bl	80022f8 <malloc>
 800217c:	1e02      	subs	r2, r0, #0
 800217e:	63a8      	str	r0, [r5, #56]	; 0x38
 8002180:	d104      	bne.n	800218c <srand+0x24>
 8002182:	2142      	movs	r1, #66	; 0x42
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <srand+0x4c>)
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <srand+0x50>)
 8002188:	f000 f876 	bl	8002278 <__assert_func>
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <srand+0x54>)
 800218e:	2100      	movs	r1, #0
 8002190:	6003      	str	r3, [r0, #0]
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <srand+0x58>)
 8002194:	6043      	str	r3, [r0, #4]
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <srand+0x5c>)
 8002198:	6083      	str	r3, [r0, #8]
 800219a:	230b      	movs	r3, #11
 800219c:	8183      	strh	r3, [r0, #12]
 800219e:	2001      	movs	r0, #1
 80021a0:	6110      	str	r0, [r2, #16]
 80021a2:	6151      	str	r1, [r2, #20]
 80021a4:	2200      	movs	r2, #0
 80021a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80021a8:	611c      	str	r4, [r3, #16]
 80021aa:	615a      	str	r2, [r3, #20]
 80021ac:	bd70      	pop	{r4, r5, r6, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	20000004 	.word	0x20000004
 80021b4:	08003694 	.word	0x08003694
 80021b8:	080036ab 	.word	0x080036ab
 80021bc:	abcd330e 	.word	0xabcd330e
 80021c0:	e66d1234 	.word	0xe66d1234
 80021c4:	0005deec 	.word	0x0005deec

080021c8 <rand>:
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <rand+0x5c>)
 80021ca:	b510      	push	{r4, lr}
 80021cc:	681c      	ldr	r4, [r3, #0]
 80021ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d116      	bne.n	8002202 <rand+0x3a>
 80021d4:	2018      	movs	r0, #24
 80021d6:	f000 f88f 	bl	80022f8 <malloc>
 80021da:	1e02      	subs	r2, r0, #0
 80021dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80021de:	d104      	bne.n	80021ea <rand+0x22>
 80021e0:	214e      	movs	r1, #78	; 0x4e
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <rand+0x60>)
 80021e4:	4811      	ldr	r0, [pc, #68]	; (800222c <rand+0x64>)
 80021e6:	f000 f847 	bl	8002278 <__assert_func>
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <rand+0x68>)
 80021ec:	2100      	movs	r1, #0
 80021ee:	6003      	str	r3, [r0, #0]
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <rand+0x6c>)
 80021f2:	6043      	str	r3, [r0, #4]
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <rand+0x70>)
 80021f6:	6083      	str	r3, [r0, #8]
 80021f8:	230b      	movs	r3, #11
 80021fa:	8183      	strh	r3, [r0, #12]
 80021fc:	2001      	movs	r0, #1
 80021fe:	6110      	str	r0, [r2, #16]
 8002200:	6151      	str	r1, [r2, #20]
 8002202:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <rand+0x74>)
 8002206:	6920      	ldr	r0, [r4, #16]
 8002208:	6961      	ldr	r1, [r4, #20]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <rand+0x78>)
 800220c:	f7fe f876 	bl	80002fc <__aeabi_lmul>
 8002210:	2201      	movs	r2, #1
 8002212:	2300      	movs	r3, #0
 8002214:	1880      	adds	r0, r0, r2
 8002216:	4159      	adcs	r1, r3
 8002218:	6120      	str	r0, [r4, #16]
 800221a:	6161      	str	r1, [r4, #20]
 800221c:	0048      	lsls	r0, r1, #1
 800221e:	0840      	lsrs	r0, r0, #1
 8002220:	bd10      	pop	{r4, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000004 	.word	0x20000004
 8002228:	08003694 	.word	0x08003694
 800222c:	080036ab 	.word	0x080036ab
 8002230:	abcd330e 	.word	0xabcd330e
 8002234:	e66d1234 	.word	0xe66d1234
 8002238:	0005deec 	.word	0x0005deec
 800223c:	4c957f2d 	.word	0x4c957f2d
 8002240:	5851f42d 	.word	0x5851f42d

08002244 <time>:
 8002244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <time+0x30>)
 8002248:	0004      	movs	r4, r0
 800224a:	2200      	movs	r2, #0
 800224c:	4669      	mov	r1, sp
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	f000 f840 	bl	80022d4 <_gettimeofday_r>
 8002254:	2800      	cmp	r0, #0
 8002256:	da04      	bge.n	8002262 <time+0x1e>
 8002258:	2201      	movs	r2, #1
 800225a:	4252      	negs	r2, r2
 800225c:	17d3      	asrs	r3, r2, #31
 800225e:	9200      	str	r2, [sp, #0]
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	9800      	ldr	r0, [sp, #0]
 8002264:	9901      	ldr	r1, [sp, #4]
 8002266:	2c00      	cmp	r4, #0
 8002268:	d001      	beq.n	800226e <time+0x2a>
 800226a:	6020      	str	r0, [r4, #0]
 800226c:	6061      	str	r1, [r4, #4]
 800226e:	b004      	add	sp, #16
 8002270:	bd10      	pop	{r4, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	20000004 	.word	0x20000004

08002278 <__assert_func>:
 8002278:	b530      	push	{r4, r5, lr}
 800227a:	0014      	movs	r4, r2
 800227c:	001a      	movs	r2, r3
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <__assert_func+0x2c>)
 8002280:	0005      	movs	r5, r0
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	b085      	sub	sp, #20
 8002286:	68d8      	ldr	r0, [r3, #12]
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <__assert_func+0x30>)
 800228a:	2c00      	cmp	r4, #0
 800228c:	d101      	bne.n	8002292 <__assert_func+0x1a>
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <__assert_func+0x34>)
 8002290:	001c      	movs	r4, r3
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9100      	str	r1, [sp, #0]
 8002296:	002b      	movs	r3, r5
 8002298:	4905      	ldr	r1, [pc, #20]	; (80022b0 <__assert_func+0x38>)
 800229a:	9402      	str	r4, [sp, #8]
 800229c:	f000 f80a 	bl	80022b4 <fiprintf>
 80022a0:	f000 fca0 	bl	8002be4 <abort>
 80022a4:	20000004 	.word	0x20000004
 80022a8:	08003728 	.word	0x08003728
 80022ac:	08003763 	.word	0x08003763
 80022b0:	08003735 	.word	0x08003735

080022b4 <fiprintf>:
 80022b4:	b40e      	push	{r1, r2, r3}
 80022b6:	b503      	push	{r0, r1, lr}
 80022b8:	0001      	movs	r1, r0
 80022ba:	ab03      	add	r3, sp, #12
 80022bc:	4804      	ldr	r0, [pc, #16]	; (80022d0 <fiprintf+0x1c>)
 80022be:	cb04      	ldmia	r3!, {r2}
 80022c0:	6800      	ldr	r0, [r0, #0]
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	f000 f8f2 	bl	80024ac <_vfiprintf_r>
 80022c8:	b002      	add	sp, #8
 80022ca:	bc08      	pop	{r3}
 80022cc:	b003      	add	sp, #12
 80022ce:	4718      	bx	r3
 80022d0:	20000004 	.word	0x20000004

080022d4 <_gettimeofday_r>:
 80022d4:	2300      	movs	r3, #0
 80022d6:	b570      	push	{r4, r5, r6, lr}
 80022d8:	4d06      	ldr	r5, [pc, #24]	; (80022f4 <_gettimeofday_r+0x20>)
 80022da:	0004      	movs	r4, r0
 80022dc:	0008      	movs	r0, r1
 80022de:	0011      	movs	r1, r2
 80022e0:	602b      	str	r3, [r5, #0]
 80022e2:	f001 f801 	bl	80032e8 <_gettimeofday>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	d103      	bne.n	80022f2 <_gettimeofday_r+0x1e>
 80022ea:	682b      	ldr	r3, [r5, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d000      	beq.n	80022f2 <_gettimeofday_r+0x1e>
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	200002d8 	.word	0x200002d8

080022f8 <malloc>:
 80022f8:	b510      	push	{r4, lr}
 80022fa:	4b03      	ldr	r3, [pc, #12]	; (8002308 <malloc+0x10>)
 80022fc:	0001      	movs	r1, r0
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	f000 f84e 	bl	80023a0 <_malloc_r>
 8002304:	bd10      	pop	{r4, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	20000004 	.word	0x20000004

0800230c <_free_r>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	0005      	movs	r5, r0
 8002310:	2900      	cmp	r1, #0
 8002312:	d010      	beq.n	8002336 <_free_r+0x2a>
 8002314:	1f0c      	subs	r4, r1, #4
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	da00      	bge.n	800231e <_free_r+0x12>
 800231c:	18e4      	adds	r4, r4, r3
 800231e:	0028      	movs	r0, r5
 8002320:	f000 feb2 	bl	8003088 <__malloc_lock>
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <_free_r+0x90>)
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <_free_r+0x2c>
 800232c:	6063      	str	r3, [r4, #4]
 800232e:	6014      	str	r4, [r2, #0]
 8002330:	0028      	movs	r0, r5
 8002332:	f000 feb1 	bl	8003098 <__malloc_unlock>
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	42a3      	cmp	r3, r4
 800233a:	d908      	bls.n	800234e <_free_r+0x42>
 800233c:	6821      	ldr	r1, [r4, #0]
 800233e:	1860      	adds	r0, r4, r1
 8002340:	4283      	cmp	r3, r0
 8002342:	d1f3      	bne.n	800232c <_free_r+0x20>
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	1841      	adds	r1, r0, r1
 800234a:	6021      	str	r1, [r4, #0]
 800234c:	e7ee      	b.n	800232c <_free_r+0x20>
 800234e:	001a      	movs	r2, r3
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <_free_r+0x4e>
 8002356:	42a3      	cmp	r3, r4
 8002358:	d9f9      	bls.n	800234e <_free_r+0x42>
 800235a:	6811      	ldr	r1, [r2, #0]
 800235c:	1850      	adds	r0, r2, r1
 800235e:	42a0      	cmp	r0, r4
 8002360:	d10b      	bne.n	800237a <_free_r+0x6e>
 8002362:	6820      	ldr	r0, [r4, #0]
 8002364:	1809      	adds	r1, r1, r0
 8002366:	1850      	adds	r0, r2, r1
 8002368:	6011      	str	r1, [r2, #0]
 800236a:	4283      	cmp	r3, r0
 800236c:	d1e0      	bne.n	8002330 <_free_r+0x24>
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	1841      	adds	r1, r0, r1
 8002374:	6011      	str	r1, [r2, #0]
 8002376:	6053      	str	r3, [r2, #4]
 8002378:	e7da      	b.n	8002330 <_free_r+0x24>
 800237a:	42a0      	cmp	r0, r4
 800237c:	d902      	bls.n	8002384 <_free_r+0x78>
 800237e:	230c      	movs	r3, #12
 8002380:	602b      	str	r3, [r5, #0]
 8002382:	e7d5      	b.n	8002330 <_free_r+0x24>
 8002384:	6821      	ldr	r1, [r4, #0]
 8002386:	1860      	adds	r0, r4, r1
 8002388:	4283      	cmp	r3, r0
 800238a:	d103      	bne.n	8002394 <_free_r+0x88>
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	1841      	adds	r1, r0, r1
 8002392:	6021      	str	r1, [r4, #0]
 8002394:	6063      	str	r3, [r4, #4]
 8002396:	6054      	str	r4, [r2, #4]
 8002398:	e7ca      	b.n	8002330 <_free_r+0x24>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	200002d0 	.word	0x200002d0

080023a0 <_malloc_r>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	2303      	movs	r3, #3
 80023a4:	1ccd      	adds	r5, r1, #3
 80023a6:	439d      	bics	r5, r3
 80023a8:	3508      	adds	r5, #8
 80023aa:	0006      	movs	r6, r0
 80023ac:	2d0c      	cmp	r5, #12
 80023ae:	d21f      	bcs.n	80023f0 <_malloc_r+0x50>
 80023b0:	250c      	movs	r5, #12
 80023b2:	42a9      	cmp	r1, r5
 80023b4:	d81e      	bhi.n	80023f4 <_malloc_r+0x54>
 80023b6:	0030      	movs	r0, r6
 80023b8:	f000 fe66 	bl	8003088 <__malloc_lock>
 80023bc:	4925      	ldr	r1, [pc, #148]	; (8002454 <_malloc_r+0xb4>)
 80023be:	680a      	ldr	r2, [r1, #0]
 80023c0:	0014      	movs	r4, r2
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	d11a      	bne.n	80023fc <_malloc_r+0x5c>
 80023c6:	4f24      	ldr	r7, [pc, #144]	; (8002458 <_malloc_r+0xb8>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d104      	bne.n	80023d8 <_malloc_r+0x38>
 80023ce:	0021      	movs	r1, r4
 80023d0:	0030      	movs	r0, r6
 80023d2:	f000 fb27 	bl	8002a24 <_sbrk_r>
 80023d6:	6038      	str	r0, [r7, #0]
 80023d8:	0029      	movs	r1, r5
 80023da:	0030      	movs	r0, r6
 80023dc:	f000 fb22 	bl	8002a24 <_sbrk_r>
 80023e0:	1c43      	adds	r3, r0, #1
 80023e2:	d12b      	bne.n	800243c <_malloc_r+0x9c>
 80023e4:	230c      	movs	r3, #12
 80023e6:	0030      	movs	r0, r6
 80023e8:	6033      	str	r3, [r6, #0]
 80023ea:	f000 fe55 	bl	8003098 <__malloc_unlock>
 80023ee:	e003      	b.n	80023f8 <_malloc_r+0x58>
 80023f0:	2d00      	cmp	r5, #0
 80023f2:	dade      	bge.n	80023b2 <_malloc_r+0x12>
 80023f4:	230c      	movs	r3, #12
 80023f6:	6033      	str	r3, [r6, #0]
 80023f8:	2000      	movs	r0, #0
 80023fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	1b5b      	subs	r3, r3, r5
 8002400:	d419      	bmi.n	8002436 <_malloc_r+0x96>
 8002402:	2b0b      	cmp	r3, #11
 8002404:	d903      	bls.n	800240e <_malloc_r+0x6e>
 8002406:	6023      	str	r3, [r4, #0]
 8002408:	18e4      	adds	r4, r4, r3
 800240a:	6025      	str	r5, [r4, #0]
 800240c:	e003      	b.n	8002416 <_malloc_r+0x76>
 800240e:	6863      	ldr	r3, [r4, #4]
 8002410:	42a2      	cmp	r2, r4
 8002412:	d10e      	bne.n	8002432 <_malloc_r+0x92>
 8002414:	600b      	str	r3, [r1, #0]
 8002416:	0030      	movs	r0, r6
 8002418:	f000 fe3e 	bl	8003098 <__malloc_unlock>
 800241c:	0020      	movs	r0, r4
 800241e:	2207      	movs	r2, #7
 8002420:	300b      	adds	r0, #11
 8002422:	1d23      	adds	r3, r4, #4
 8002424:	4390      	bics	r0, r2
 8002426:	1ac2      	subs	r2, r0, r3
 8002428:	4298      	cmp	r0, r3
 800242a:	d0e6      	beq.n	80023fa <_malloc_r+0x5a>
 800242c:	1a1b      	subs	r3, r3, r0
 800242e:	50a3      	str	r3, [r4, r2]
 8002430:	e7e3      	b.n	80023fa <_malloc_r+0x5a>
 8002432:	6053      	str	r3, [r2, #4]
 8002434:	e7ef      	b.n	8002416 <_malloc_r+0x76>
 8002436:	0022      	movs	r2, r4
 8002438:	6864      	ldr	r4, [r4, #4]
 800243a:	e7c2      	b.n	80023c2 <_malloc_r+0x22>
 800243c:	2303      	movs	r3, #3
 800243e:	1cc4      	adds	r4, r0, #3
 8002440:	439c      	bics	r4, r3
 8002442:	42a0      	cmp	r0, r4
 8002444:	d0e1      	beq.n	800240a <_malloc_r+0x6a>
 8002446:	1a21      	subs	r1, r4, r0
 8002448:	0030      	movs	r0, r6
 800244a:	f000 faeb 	bl	8002a24 <_sbrk_r>
 800244e:	1c43      	adds	r3, r0, #1
 8002450:	d1db      	bne.n	800240a <_malloc_r+0x6a>
 8002452:	e7c7      	b.n	80023e4 <_malloc_r+0x44>
 8002454:	200002d0 	.word	0x200002d0
 8002458:	200002d4 	.word	0x200002d4

0800245c <__sfputc_r>:
 800245c:	6893      	ldr	r3, [r2, #8]
 800245e:	b510      	push	{r4, lr}
 8002460:	3b01      	subs	r3, #1
 8002462:	6093      	str	r3, [r2, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da04      	bge.n	8002472 <__sfputc_r+0x16>
 8002468:	6994      	ldr	r4, [r2, #24]
 800246a:	42a3      	cmp	r3, r4
 800246c:	db07      	blt.n	800247e <__sfputc_r+0x22>
 800246e:	290a      	cmp	r1, #10
 8002470:	d005      	beq.n	800247e <__sfputc_r+0x22>
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	1c58      	adds	r0, r3, #1
 8002476:	6010      	str	r0, [r2, #0]
 8002478:	7019      	strb	r1, [r3, #0]
 800247a:	0008      	movs	r0, r1
 800247c:	bd10      	pop	{r4, pc}
 800247e:	f000 fae3 	bl	8002a48 <__swbuf_r>
 8002482:	0001      	movs	r1, r0
 8002484:	e7f9      	b.n	800247a <__sfputc_r+0x1e>

08002486 <__sfputs_r>:
 8002486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002488:	0006      	movs	r6, r0
 800248a:	000f      	movs	r7, r1
 800248c:	0014      	movs	r4, r2
 800248e:	18d5      	adds	r5, r2, r3
 8002490:	42ac      	cmp	r4, r5
 8002492:	d101      	bne.n	8002498 <__sfputs_r+0x12>
 8002494:	2000      	movs	r0, #0
 8002496:	e007      	b.n	80024a8 <__sfputs_r+0x22>
 8002498:	7821      	ldrb	r1, [r4, #0]
 800249a:	003a      	movs	r2, r7
 800249c:	0030      	movs	r0, r6
 800249e:	f7ff ffdd 	bl	800245c <__sfputc_r>
 80024a2:	3401      	adds	r4, #1
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	d1f3      	bne.n	8002490 <__sfputs_r+0xa>
 80024a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024aa:	0000      	movs	r0, r0

080024ac <_vfiprintf_r>:
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	b0a1      	sub	sp, #132	; 0x84
 80024b0:	0006      	movs	r6, r0
 80024b2:	000c      	movs	r4, r1
 80024b4:	001f      	movs	r7, r3
 80024b6:	9203      	str	r2, [sp, #12]
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d004      	beq.n	80024c6 <_vfiprintf_r+0x1a>
 80024bc:	6983      	ldr	r3, [r0, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <_vfiprintf_r+0x1a>
 80024c2:	f000 fcc5 	bl	8002e50 <__sinit>
 80024c6:	4b8e      	ldr	r3, [pc, #568]	; (8002700 <_vfiprintf_r+0x254>)
 80024c8:	429c      	cmp	r4, r3
 80024ca:	d11c      	bne.n	8002506 <_vfiprintf_r+0x5a>
 80024cc:	6874      	ldr	r4, [r6, #4]
 80024ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024d0:	07db      	lsls	r3, r3, #31
 80024d2:	d405      	bmi.n	80024e0 <_vfiprintf_r+0x34>
 80024d4:	89a3      	ldrh	r3, [r4, #12]
 80024d6:	059b      	lsls	r3, r3, #22
 80024d8:	d402      	bmi.n	80024e0 <_vfiprintf_r+0x34>
 80024da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024dc:	f000 fd59 	bl	8002f92 <__retarget_lock_acquire_recursive>
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	071b      	lsls	r3, r3, #28
 80024e4:	d502      	bpl.n	80024ec <_vfiprintf_r+0x40>
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d11d      	bne.n	8002528 <_vfiprintf_r+0x7c>
 80024ec:	0021      	movs	r1, r4
 80024ee:	0030      	movs	r0, r6
 80024f0:	f000 fb00 	bl	8002af4 <__swsetup_r>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d017      	beq.n	8002528 <_vfiprintf_r+0x7c>
 80024f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024fa:	07db      	lsls	r3, r3, #31
 80024fc:	d50d      	bpl.n	800251a <_vfiprintf_r+0x6e>
 80024fe:	2001      	movs	r0, #1
 8002500:	4240      	negs	r0, r0
 8002502:	b021      	add	sp, #132	; 0x84
 8002504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002506:	4b7f      	ldr	r3, [pc, #508]	; (8002704 <_vfiprintf_r+0x258>)
 8002508:	429c      	cmp	r4, r3
 800250a:	d101      	bne.n	8002510 <_vfiprintf_r+0x64>
 800250c:	68b4      	ldr	r4, [r6, #8]
 800250e:	e7de      	b.n	80024ce <_vfiprintf_r+0x22>
 8002510:	4b7d      	ldr	r3, [pc, #500]	; (8002708 <_vfiprintf_r+0x25c>)
 8002512:	429c      	cmp	r4, r3
 8002514:	d1db      	bne.n	80024ce <_vfiprintf_r+0x22>
 8002516:	68f4      	ldr	r4, [r6, #12]
 8002518:	e7d9      	b.n	80024ce <_vfiprintf_r+0x22>
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	059b      	lsls	r3, r3, #22
 800251e:	d4ee      	bmi.n	80024fe <_vfiprintf_r+0x52>
 8002520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002522:	f000 fd37 	bl	8002f94 <__retarget_lock_release_recursive>
 8002526:	e7ea      	b.n	80024fe <_vfiprintf_r+0x52>
 8002528:	2300      	movs	r3, #0
 800252a:	ad08      	add	r5, sp, #32
 800252c:	616b      	str	r3, [r5, #20]
 800252e:	3320      	adds	r3, #32
 8002530:	766b      	strb	r3, [r5, #25]
 8002532:	3310      	adds	r3, #16
 8002534:	76ab      	strb	r3, [r5, #26]
 8002536:	9707      	str	r7, [sp, #28]
 8002538:	9f03      	ldr	r7, [sp, #12]
 800253a:	783b      	ldrb	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <_vfiprintf_r+0x98>
 8002540:	2b25      	cmp	r3, #37	; 0x25
 8002542:	d14e      	bne.n	80025e2 <_vfiprintf_r+0x136>
 8002544:	9b03      	ldr	r3, [sp, #12]
 8002546:	1afb      	subs	r3, r7, r3
 8002548:	9305      	str	r3, [sp, #20]
 800254a:	9b03      	ldr	r3, [sp, #12]
 800254c:	429f      	cmp	r7, r3
 800254e:	d00d      	beq.n	800256c <_vfiprintf_r+0xc0>
 8002550:	9b05      	ldr	r3, [sp, #20]
 8002552:	0021      	movs	r1, r4
 8002554:	0030      	movs	r0, r6
 8002556:	9a03      	ldr	r2, [sp, #12]
 8002558:	f7ff ff95 	bl	8002486 <__sfputs_r>
 800255c:	1c43      	adds	r3, r0, #1
 800255e:	d100      	bne.n	8002562 <_vfiprintf_r+0xb6>
 8002560:	e0b5      	b.n	80026ce <_vfiprintf_r+0x222>
 8002562:	696a      	ldr	r2, [r5, #20]
 8002564:	9b05      	ldr	r3, [sp, #20]
 8002566:	4694      	mov	ip, r2
 8002568:	4463      	add	r3, ip
 800256a:	616b      	str	r3, [r5, #20]
 800256c:	783b      	ldrb	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d100      	bne.n	8002574 <_vfiprintf_r+0xc8>
 8002572:	e0ac      	b.n	80026ce <_vfiprintf_r+0x222>
 8002574:	2201      	movs	r2, #1
 8002576:	1c7b      	adds	r3, r7, #1
 8002578:	9303      	str	r3, [sp, #12]
 800257a:	2300      	movs	r3, #0
 800257c:	4252      	negs	r2, r2
 800257e:	606a      	str	r2, [r5, #4]
 8002580:	a904      	add	r1, sp, #16
 8002582:	3254      	adds	r2, #84	; 0x54
 8002584:	1852      	adds	r2, r2, r1
 8002586:	602b      	str	r3, [r5, #0]
 8002588:	60eb      	str	r3, [r5, #12]
 800258a:	60ab      	str	r3, [r5, #8]
 800258c:	7013      	strb	r3, [r2, #0]
 800258e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002590:	9b03      	ldr	r3, [sp, #12]
 8002592:	2205      	movs	r2, #5
 8002594:	7819      	ldrb	r1, [r3, #0]
 8002596:	485d      	ldr	r0, [pc, #372]	; (800270c <_vfiprintf_r+0x260>)
 8002598:	f000 fd6a 	bl	8003070 <memchr>
 800259c:	9b03      	ldr	r3, [sp, #12]
 800259e:	1c5f      	adds	r7, r3, #1
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d120      	bne.n	80025e6 <_vfiprintf_r+0x13a>
 80025a4:	682a      	ldr	r2, [r5, #0]
 80025a6:	06d3      	lsls	r3, r2, #27
 80025a8:	d504      	bpl.n	80025b4 <_vfiprintf_r+0x108>
 80025aa:	2353      	movs	r3, #83	; 0x53
 80025ac:	a904      	add	r1, sp, #16
 80025ae:	185b      	adds	r3, r3, r1
 80025b0:	2120      	movs	r1, #32
 80025b2:	7019      	strb	r1, [r3, #0]
 80025b4:	0713      	lsls	r3, r2, #28
 80025b6:	d504      	bpl.n	80025c2 <_vfiprintf_r+0x116>
 80025b8:	2353      	movs	r3, #83	; 0x53
 80025ba:	a904      	add	r1, sp, #16
 80025bc:	185b      	adds	r3, r3, r1
 80025be:	212b      	movs	r1, #43	; 0x2b
 80025c0:	7019      	strb	r1, [r3, #0]
 80025c2:	9b03      	ldr	r3, [sp, #12]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b2a      	cmp	r3, #42	; 0x2a
 80025c8:	d016      	beq.n	80025f8 <_vfiprintf_r+0x14c>
 80025ca:	2100      	movs	r1, #0
 80025cc:	68eb      	ldr	r3, [r5, #12]
 80025ce:	9f03      	ldr	r7, [sp, #12]
 80025d0:	783a      	ldrb	r2, [r7, #0]
 80025d2:	1c78      	adds	r0, r7, #1
 80025d4:	3a30      	subs	r2, #48	; 0x30
 80025d6:	4684      	mov	ip, r0
 80025d8:	2a09      	cmp	r2, #9
 80025da:	d94f      	bls.n	800267c <_vfiprintf_r+0x1d0>
 80025dc:	2900      	cmp	r1, #0
 80025de:	d111      	bne.n	8002604 <_vfiprintf_r+0x158>
 80025e0:	e017      	b.n	8002612 <_vfiprintf_r+0x166>
 80025e2:	3701      	adds	r7, #1
 80025e4:	e7a9      	b.n	800253a <_vfiprintf_r+0x8e>
 80025e6:	4b49      	ldr	r3, [pc, #292]	; (800270c <_vfiprintf_r+0x260>)
 80025e8:	682a      	ldr	r2, [r5, #0]
 80025ea:	1ac0      	subs	r0, r0, r3
 80025ec:	2301      	movs	r3, #1
 80025ee:	4083      	lsls	r3, r0
 80025f0:	4313      	orrs	r3, r2
 80025f2:	602b      	str	r3, [r5, #0]
 80025f4:	9703      	str	r7, [sp, #12]
 80025f6:	e7cb      	b.n	8002590 <_vfiprintf_r+0xe4>
 80025f8:	9b07      	ldr	r3, [sp, #28]
 80025fa:	1d19      	adds	r1, r3, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	9107      	str	r1, [sp, #28]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db01      	blt.n	8002608 <_vfiprintf_r+0x15c>
 8002604:	930b      	str	r3, [sp, #44]	; 0x2c
 8002606:	e004      	b.n	8002612 <_vfiprintf_r+0x166>
 8002608:	425b      	negs	r3, r3
 800260a:	60eb      	str	r3, [r5, #12]
 800260c:	2302      	movs	r3, #2
 800260e:	4313      	orrs	r3, r2
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	783b      	ldrb	r3, [r7, #0]
 8002614:	2b2e      	cmp	r3, #46	; 0x2e
 8002616:	d10a      	bne.n	800262e <_vfiprintf_r+0x182>
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b2a      	cmp	r3, #42	; 0x2a
 800261c:	d137      	bne.n	800268e <_vfiprintf_r+0x1e2>
 800261e:	9b07      	ldr	r3, [sp, #28]
 8002620:	3702      	adds	r7, #2
 8002622:	1d1a      	adds	r2, r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	9207      	str	r2, [sp, #28]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db2d      	blt.n	8002688 <_vfiprintf_r+0x1dc>
 800262c:	9309      	str	r3, [sp, #36]	; 0x24
 800262e:	2203      	movs	r2, #3
 8002630:	7839      	ldrb	r1, [r7, #0]
 8002632:	4837      	ldr	r0, [pc, #220]	; (8002710 <_vfiprintf_r+0x264>)
 8002634:	f000 fd1c 	bl	8003070 <memchr>
 8002638:	2800      	cmp	r0, #0
 800263a:	d007      	beq.n	800264c <_vfiprintf_r+0x1a0>
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <_vfiprintf_r+0x264>)
 800263e:	682a      	ldr	r2, [r5, #0]
 8002640:	1ac0      	subs	r0, r0, r3
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	4083      	lsls	r3, r0
 8002646:	4313      	orrs	r3, r2
 8002648:	3701      	adds	r7, #1
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	7839      	ldrb	r1, [r7, #0]
 800264e:	1c7b      	adds	r3, r7, #1
 8002650:	2206      	movs	r2, #6
 8002652:	4830      	ldr	r0, [pc, #192]	; (8002714 <_vfiprintf_r+0x268>)
 8002654:	9303      	str	r3, [sp, #12]
 8002656:	7629      	strb	r1, [r5, #24]
 8002658:	f000 fd0a 	bl	8003070 <memchr>
 800265c:	2800      	cmp	r0, #0
 800265e:	d045      	beq.n	80026ec <_vfiprintf_r+0x240>
 8002660:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <_vfiprintf_r+0x26c>)
 8002662:	2b00      	cmp	r3, #0
 8002664:	d127      	bne.n	80026b6 <_vfiprintf_r+0x20a>
 8002666:	2207      	movs	r2, #7
 8002668:	9b07      	ldr	r3, [sp, #28]
 800266a:	3307      	adds	r3, #7
 800266c:	4393      	bics	r3, r2
 800266e:	3308      	adds	r3, #8
 8002670:	9307      	str	r3, [sp, #28]
 8002672:	696b      	ldr	r3, [r5, #20]
 8002674:	9a04      	ldr	r2, [sp, #16]
 8002676:	189b      	adds	r3, r3, r2
 8002678:	616b      	str	r3, [r5, #20]
 800267a:	e75d      	b.n	8002538 <_vfiprintf_r+0x8c>
 800267c:	210a      	movs	r1, #10
 800267e:	434b      	muls	r3, r1
 8002680:	4667      	mov	r7, ip
 8002682:	189b      	adds	r3, r3, r2
 8002684:	3909      	subs	r1, #9
 8002686:	e7a3      	b.n	80025d0 <_vfiprintf_r+0x124>
 8002688:	2301      	movs	r3, #1
 800268a:	425b      	negs	r3, r3
 800268c:	e7ce      	b.n	800262c <_vfiprintf_r+0x180>
 800268e:	2300      	movs	r3, #0
 8002690:	001a      	movs	r2, r3
 8002692:	3701      	adds	r7, #1
 8002694:	606b      	str	r3, [r5, #4]
 8002696:	7839      	ldrb	r1, [r7, #0]
 8002698:	1c78      	adds	r0, r7, #1
 800269a:	3930      	subs	r1, #48	; 0x30
 800269c:	4684      	mov	ip, r0
 800269e:	2909      	cmp	r1, #9
 80026a0:	d903      	bls.n	80026aa <_vfiprintf_r+0x1fe>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0c3      	beq.n	800262e <_vfiprintf_r+0x182>
 80026a6:	9209      	str	r2, [sp, #36]	; 0x24
 80026a8:	e7c1      	b.n	800262e <_vfiprintf_r+0x182>
 80026aa:	230a      	movs	r3, #10
 80026ac:	435a      	muls	r2, r3
 80026ae:	4667      	mov	r7, ip
 80026b0:	1852      	adds	r2, r2, r1
 80026b2:	3b09      	subs	r3, #9
 80026b4:	e7ef      	b.n	8002696 <_vfiprintf_r+0x1ea>
 80026b6:	ab07      	add	r3, sp, #28
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	0022      	movs	r2, r4
 80026bc:	0029      	movs	r1, r5
 80026be:	0030      	movs	r0, r6
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <_vfiprintf_r+0x270>)
 80026c2:	e000      	b.n	80026c6 <_vfiprintf_r+0x21a>
 80026c4:	bf00      	nop
 80026c6:	9004      	str	r0, [sp, #16]
 80026c8:	9b04      	ldr	r3, [sp, #16]
 80026ca:	3301      	adds	r3, #1
 80026cc:	d1d1      	bne.n	8002672 <_vfiprintf_r+0x1c6>
 80026ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026d0:	07db      	lsls	r3, r3, #31
 80026d2:	d405      	bmi.n	80026e0 <_vfiprintf_r+0x234>
 80026d4:	89a3      	ldrh	r3, [r4, #12]
 80026d6:	059b      	lsls	r3, r3, #22
 80026d8:	d402      	bmi.n	80026e0 <_vfiprintf_r+0x234>
 80026da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026dc:	f000 fc5a 	bl	8002f94 <__retarget_lock_release_recursive>
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	065b      	lsls	r3, r3, #25
 80026e4:	d500      	bpl.n	80026e8 <_vfiprintf_r+0x23c>
 80026e6:	e70a      	b.n	80024fe <_vfiprintf_r+0x52>
 80026e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80026ea:	e70a      	b.n	8002502 <_vfiprintf_r+0x56>
 80026ec:	ab07      	add	r3, sp, #28
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	0022      	movs	r2, r4
 80026f2:	0029      	movs	r1, r5
 80026f4:	0030      	movs	r0, r6
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <_vfiprintf_r+0x270>)
 80026f8:	f000 f882 	bl	8002800 <_printf_i>
 80026fc:	e7e3      	b.n	80026c6 <_vfiprintf_r+0x21a>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	080037b8 	.word	0x080037b8
 8002704:	080037d8 	.word	0x080037d8
 8002708:	08003798 	.word	0x08003798
 800270c:	08003764 	.word	0x08003764
 8002710:	0800376a 	.word	0x0800376a
 8002714:	0800376e 	.word	0x0800376e
 8002718:	00000000 	.word	0x00000000
 800271c:	08002487 	.word	0x08002487

08002720 <_printf_common>:
 8002720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002722:	0015      	movs	r5, r2
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	688a      	ldr	r2, [r1, #8]
 8002728:	690b      	ldr	r3, [r1, #16]
 800272a:	000c      	movs	r4, r1
 800272c:	9000      	str	r0, [sp, #0]
 800272e:	4293      	cmp	r3, r2
 8002730:	da00      	bge.n	8002734 <_printf_common+0x14>
 8002732:	0013      	movs	r3, r2
 8002734:	0022      	movs	r2, r4
 8002736:	602b      	str	r3, [r5, #0]
 8002738:	3243      	adds	r2, #67	; 0x43
 800273a:	7812      	ldrb	r2, [r2, #0]
 800273c:	2a00      	cmp	r2, #0
 800273e:	d001      	beq.n	8002744 <_printf_common+0x24>
 8002740:	3301      	adds	r3, #1
 8002742:	602b      	str	r3, [r5, #0]
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	d502      	bpl.n	8002750 <_printf_common+0x30>
 800274a:	682b      	ldr	r3, [r5, #0]
 800274c:	3302      	adds	r3, #2
 800274e:	602b      	str	r3, [r5, #0]
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	2306      	movs	r3, #6
 8002754:	0017      	movs	r7, r2
 8002756:	401f      	ands	r7, r3
 8002758:	421a      	tst	r2, r3
 800275a:	d027      	beq.n	80027ac <_printf_common+0x8c>
 800275c:	0023      	movs	r3, r4
 800275e:	3343      	adds	r3, #67	; 0x43
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	4193      	sbcs	r3, r2
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	0692      	lsls	r2, r2, #26
 800276a:	d430      	bmi.n	80027ce <_printf_common+0xae>
 800276c:	0022      	movs	r2, r4
 800276e:	9901      	ldr	r1, [sp, #4]
 8002770:	9800      	ldr	r0, [sp, #0]
 8002772:	9e08      	ldr	r6, [sp, #32]
 8002774:	3243      	adds	r2, #67	; 0x43
 8002776:	47b0      	blx	r6
 8002778:	1c43      	adds	r3, r0, #1
 800277a:	d025      	beq.n	80027c8 <_printf_common+0xa8>
 800277c:	2306      	movs	r3, #6
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	682a      	ldr	r2, [r5, #0]
 8002782:	68e1      	ldr	r1, [r4, #12]
 8002784:	2500      	movs	r5, #0
 8002786:	4003      	ands	r3, r0
 8002788:	2b04      	cmp	r3, #4
 800278a:	d103      	bne.n	8002794 <_printf_common+0x74>
 800278c:	1a8d      	subs	r5, r1, r2
 800278e:	43eb      	mvns	r3, r5
 8002790:	17db      	asrs	r3, r3, #31
 8002792:	401d      	ands	r5, r3
 8002794:	68a3      	ldr	r3, [r4, #8]
 8002796:	6922      	ldr	r2, [r4, #16]
 8002798:	4293      	cmp	r3, r2
 800279a:	dd01      	ble.n	80027a0 <_printf_common+0x80>
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	18ed      	adds	r5, r5, r3
 80027a0:	2700      	movs	r7, #0
 80027a2:	42bd      	cmp	r5, r7
 80027a4:	d120      	bne.n	80027e8 <_printf_common+0xc8>
 80027a6:	2000      	movs	r0, #0
 80027a8:	e010      	b.n	80027cc <_printf_common+0xac>
 80027aa:	3701      	adds	r7, #1
 80027ac:	68e3      	ldr	r3, [r4, #12]
 80027ae:	682a      	ldr	r2, [r5, #0]
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	42bb      	cmp	r3, r7
 80027b4:	ddd2      	ble.n	800275c <_printf_common+0x3c>
 80027b6:	0022      	movs	r2, r4
 80027b8:	2301      	movs	r3, #1
 80027ba:	9901      	ldr	r1, [sp, #4]
 80027bc:	9800      	ldr	r0, [sp, #0]
 80027be:	9e08      	ldr	r6, [sp, #32]
 80027c0:	3219      	adds	r2, #25
 80027c2:	47b0      	blx	r6
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	d1f0      	bne.n	80027aa <_printf_common+0x8a>
 80027c8:	2001      	movs	r0, #1
 80027ca:	4240      	negs	r0, r0
 80027cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027ce:	2030      	movs	r0, #48	; 0x30
 80027d0:	18e1      	adds	r1, r4, r3
 80027d2:	3143      	adds	r1, #67	; 0x43
 80027d4:	7008      	strb	r0, [r1, #0]
 80027d6:	0021      	movs	r1, r4
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	3145      	adds	r1, #69	; 0x45
 80027dc:	7809      	ldrb	r1, [r1, #0]
 80027de:	18a2      	adds	r2, r4, r2
 80027e0:	3243      	adds	r2, #67	; 0x43
 80027e2:	3302      	adds	r3, #2
 80027e4:	7011      	strb	r1, [r2, #0]
 80027e6:	e7c1      	b.n	800276c <_printf_common+0x4c>
 80027e8:	0022      	movs	r2, r4
 80027ea:	2301      	movs	r3, #1
 80027ec:	9901      	ldr	r1, [sp, #4]
 80027ee:	9800      	ldr	r0, [sp, #0]
 80027f0:	9e08      	ldr	r6, [sp, #32]
 80027f2:	321a      	adds	r2, #26
 80027f4:	47b0      	blx	r6
 80027f6:	1c43      	adds	r3, r0, #1
 80027f8:	d0e6      	beq.n	80027c8 <_printf_common+0xa8>
 80027fa:	3701      	adds	r7, #1
 80027fc:	e7d1      	b.n	80027a2 <_printf_common+0x82>
 80027fe:	0000      	movs	r0, r0

08002800 <_printf_i>:
 8002800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002802:	b08b      	sub	sp, #44	; 0x2c
 8002804:	9206      	str	r2, [sp, #24]
 8002806:	000a      	movs	r2, r1
 8002808:	3243      	adds	r2, #67	; 0x43
 800280a:	9307      	str	r3, [sp, #28]
 800280c:	9005      	str	r0, [sp, #20]
 800280e:	9204      	str	r2, [sp, #16]
 8002810:	7e0a      	ldrb	r2, [r1, #24]
 8002812:	000c      	movs	r4, r1
 8002814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002816:	2a78      	cmp	r2, #120	; 0x78
 8002818:	d807      	bhi.n	800282a <_printf_i+0x2a>
 800281a:	2a62      	cmp	r2, #98	; 0x62
 800281c:	d809      	bhi.n	8002832 <_printf_i+0x32>
 800281e:	2a00      	cmp	r2, #0
 8002820:	d100      	bne.n	8002824 <_printf_i+0x24>
 8002822:	e0c1      	b.n	80029a8 <_printf_i+0x1a8>
 8002824:	2a58      	cmp	r2, #88	; 0x58
 8002826:	d100      	bne.n	800282a <_printf_i+0x2a>
 8002828:	e08c      	b.n	8002944 <_printf_i+0x144>
 800282a:	0026      	movs	r6, r4
 800282c:	3642      	adds	r6, #66	; 0x42
 800282e:	7032      	strb	r2, [r6, #0]
 8002830:	e022      	b.n	8002878 <_printf_i+0x78>
 8002832:	0010      	movs	r0, r2
 8002834:	3863      	subs	r0, #99	; 0x63
 8002836:	2815      	cmp	r0, #21
 8002838:	d8f7      	bhi.n	800282a <_printf_i+0x2a>
 800283a:	f7fd fd55 	bl	80002e8 <__gnu_thumb1_case_shi>
 800283e:	0016      	.short	0x0016
 8002840:	fff6001f 	.word	0xfff6001f
 8002844:	fff6fff6 	.word	0xfff6fff6
 8002848:	001ffff6 	.word	0x001ffff6
 800284c:	fff6fff6 	.word	0xfff6fff6
 8002850:	fff6fff6 	.word	0xfff6fff6
 8002854:	003600a8 	.word	0x003600a8
 8002858:	fff6009a 	.word	0xfff6009a
 800285c:	00b9fff6 	.word	0x00b9fff6
 8002860:	0036fff6 	.word	0x0036fff6
 8002864:	fff6fff6 	.word	0xfff6fff6
 8002868:	009e      	.short	0x009e
 800286a:	0026      	movs	r6, r4
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	3642      	adds	r6, #66	; 0x42
 8002870:	1d11      	adds	r1, r2, #4
 8002872:	6019      	str	r1, [r3, #0]
 8002874:	6813      	ldr	r3, [r2, #0]
 8002876:	7033      	strb	r3, [r6, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	e0a7      	b.n	80029cc <_printf_i+0x1cc>
 800287c:	6808      	ldr	r0, [r1, #0]
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	1d0a      	adds	r2, r1, #4
 8002882:	0605      	lsls	r5, r0, #24
 8002884:	d50b      	bpl.n	800289e <_printf_i+0x9e>
 8002886:	680d      	ldr	r5, [r1, #0]
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	2d00      	cmp	r5, #0
 800288c:	da03      	bge.n	8002896 <_printf_i+0x96>
 800288e:	232d      	movs	r3, #45	; 0x2d
 8002890:	9a04      	ldr	r2, [sp, #16]
 8002892:	426d      	negs	r5, r5
 8002894:	7013      	strb	r3, [r2, #0]
 8002896:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <_printf_i+0x21c>)
 8002898:	270a      	movs	r7, #10
 800289a:	9303      	str	r3, [sp, #12]
 800289c:	e01b      	b.n	80028d6 <_printf_i+0xd6>
 800289e:	680d      	ldr	r5, [r1, #0]
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	0641      	lsls	r1, r0, #25
 80028a4:	d5f1      	bpl.n	800288a <_printf_i+0x8a>
 80028a6:	b22d      	sxth	r5, r5
 80028a8:	e7ef      	b.n	800288a <_printf_i+0x8a>
 80028aa:	680d      	ldr	r5, [r1, #0]
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	1d08      	adds	r0, r1, #4
 80028b0:	6018      	str	r0, [r3, #0]
 80028b2:	062e      	lsls	r6, r5, #24
 80028b4:	d501      	bpl.n	80028ba <_printf_i+0xba>
 80028b6:	680d      	ldr	r5, [r1, #0]
 80028b8:	e003      	b.n	80028c2 <_printf_i+0xc2>
 80028ba:	066d      	lsls	r5, r5, #25
 80028bc:	d5fb      	bpl.n	80028b6 <_printf_i+0xb6>
 80028be:	680d      	ldr	r5, [r1, #0]
 80028c0:	b2ad      	uxth	r5, r5
 80028c2:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <_printf_i+0x21c>)
 80028c4:	2708      	movs	r7, #8
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	2a6f      	cmp	r2, #111	; 0x6f
 80028ca:	d000      	beq.n	80028ce <_printf_i+0xce>
 80028cc:	3702      	adds	r7, #2
 80028ce:	0023      	movs	r3, r4
 80028d0:	2200      	movs	r2, #0
 80028d2:	3343      	adds	r3, #67	; 0x43
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	60a3      	str	r3, [r4, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	db03      	blt.n	80028e6 <_printf_i+0xe6>
 80028de:	2204      	movs	r2, #4
 80028e0:	6821      	ldr	r1, [r4, #0]
 80028e2:	4391      	bics	r1, r2
 80028e4:	6021      	str	r1, [r4, #0]
 80028e6:	2d00      	cmp	r5, #0
 80028e8:	d102      	bne.n	80028f0 <_printf_i+0xf0>
 80028ea:	9e04      	ldr	r6, [sp, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <_printf_i+0x10a>
 80028f0:	9e04      	ldr	r6, [sp, #16]
 80028f2:	0028      	movs	r0, r5
 80028f4:	0039      	movs	r1, r7
 80028f6:	f7fd fcf1 	bl	80002dc <__aeabi_uidivmod>
 80028fa:	9b03      	ldr	r3, [sp, #12]
 80028fc:	3e01      	subs	r6, #1
 80028fe:	5c5b      	ldrb	r3, [r3, r1]
 8002900:	7033      	strb	r3, [r6, #0]
 8002902:	002b      	movs	r3, r5
 8002904:	0005      	movs	r5, r0
 8002906:	429f      	cmp	r7, r3
 8002908:	d9f3      	bls.n	80028f2 <_printf_i+0xf2>
 800290a:	2f08      	cmp	r7, #8
 800290c:	d109      	bne.n	8002922 <_printf_i+0x122>
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	07db      	lsls	r3, r3, #31
 8002912:	d506      	bpl.n	8002922 <_printf_i+0x122>
 8002914:	6863      	ldr	r3, [r4, #4]
 8002916:	6922      	ldr	r2, [r4, #16]
 8002918:	4293      	cmp	r3, r2
 800291a:	dc02      	bgt.n	8002922 <_printf_i+0x122>
 800291c:	2330      	movs	r3, #48	; 0x30
 800291e:	3e01      	subs	r6, #1
 8002920:	7033      	strb	r3, [r6, #0]
 8002922:	9b04      	ldr	r3, [sp, #16]
 8002924:	1b9b      	subs	r3, r3, r6
 8002926:	6123      	str	r3, [r4, #16]
 8002928:	9b07      	ldr	r3, [sp, #28]
 800292a:	0021      	movs	r1, r4
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	9805      	ldr	r0, [sp, #20]
 8002930:	9b06      	ldr	r3, [sp, #24]
 8002932:	aa09      	add	r2, sp, #36	; 0x24
 8002934:	f7ff fef4 	bl	8002720 <_printf_common>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d14c      	bne.n	80029d6 <_printf_i+0x1d6>
 800293c:	2001      	movs	r0, #1
 800293e:	4240      	negs	r0, r0
 8002940:	b00b      	add	sp, #44	; 0x2c
 8002942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002944:	3145      	adds	r1, #69	; 0x45
 8002946:	700a      	strb	r2, [r1, #0]
 8002948:	4a34      	ldr	r2, [pc, #208]	; (8002a1c <_printf_i+0x21c>)
 800294a:	9203      	str	r2, [sp, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	6821      	ldr	r1, [r4, #0]
 8002950:	ca20      	ldmia	r2!, {r5}
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	0608      	lsls	r0, r1, #24
 8002956:	d516      	bpl.n	8002986 <_printf_i+0x186>
 8002958:	07cb      	lsls	r3, r1, #31
 800295a:	d502      	bpl.n	8002962 <_printf_i+0x162>
 800295c:	2320      	movs	r3, #32
 800295e:	4319      	orrs	r1, r3
 8002960:	6021      	str	r1, [r4, #0]
 8002962:	2710      	movs	r7, #16
 8002964:	2d00      	cmp	r5, #0
 8002966:	d1b2      	bne.n	80028ce <_printf_i+0xce>
 8002968:	2320      	movs	r3, #32
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	439a      	bics	r2, r3
 800296e:	6022      	str	r2, [r4, #0]
 8002970:	e7ad      	b.n	80028ce <_printf_i+0xce>
 8002972:	2220      	movs	r2, #32
 8002974:	6809      	ldr	r1, [r1, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	6022      	str	r2, [r4, #0]
 800297a:	0022      	movs	r2, r4
 800297c:	2178      	movs	r1, #120	; 0x78
 800297e:	3245      	adds	r2, #69	; 0x45
 8002980:	7011      	strb	r1, [r2, #0]
 8002982:	4a27      	ldr	r2, [pc, #156]	; (8002a20 <_printf_i+0x220>)
 8002984:	e7e1      	b.n	800294a <_printf_i+0x14a>
 8002986:	0648      	lsls	r0, r1, #25
 8002988:	d5e6      	bpl.n	8002958 <_printf_i+0x158>
 800298a:	b2ad      	uxth	r5, r5
 800298c:	e7e4      	b.n	8002958 <_printf_i+0x158>
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	680d      	ldr	r5, [r1, #0]
 8002992:	1d10      	adds	r0, r2, #4
 8002994:	6949      	ldr	r1, [r1, #20]
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	6813      	ldr	r3, [r2, #0]
 800299a:	062e      	lsls	r6, r5, #24
 800299c:	d501      	bpl.n	80029a2 <_printf_i+0x1a2>
 800299e:	6019      	str	r1, [r3, #0]
 80029a0:	e002      	b.n	80029a8 <_printf_i+0x1a8>
 80029a2:	066d      	lsls	r5, r5, #25
 80029a4:	d5fb      	bpl.n	800299e <_printf_i+0x19e>
 80029a6:	8019      	strh	r1, [r3, #0]
 80029a8:	2300      	movs	r3, #0
 80029aa:	9e04      	ldr	r6, [sp, #16]
 80029ac:	6123      	str	r3, [r4, #16]
 80029ae:	e7bb      	b.n	8002928 <_printf_i+0x128>
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	1d11      	adds	r1, r2, #4
 80029b4:	6019      	str	r1, [r3, #0]
 80029b6:	6816      	ldr	r6, [r2, #0]
 80029b8:	2100      	movs	r1, #0
 80029ba:	0030      	movs	r0, r6
 80029bc:	6862      	ldr	r2, [r4, #4]
 80029be:	f000 fb57 	bl	8003070 <memchr>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d001      	beq.n	80029ca <_printf_i+0x1ca>
 80029c6:	1b80      	subs	r0, r0, r6
 80029c8:	6060      	str	r0, [r4, #4]
 80029ca:	6863      	ldr	r3, [r4, #4]
 80029cc:	6123      	str	r3, [r4, #16]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9a04      	ldr	r2, [sp, #16]
 80029d2:	7013      	strb	r3, [r2, #0]
 80029d4:	e7a8      	b.n	8002928 <_printf_i+0x128>
 80029d6:	6923      	ldr	r3, [r4, #16]
 80029d8:	0032      	movs	r2, r6
 80029da:	9906      	ldr	r1, [sp, #24]
 80029dc:	9805      	ldr	r0, [sp, #20]
 80029de:	9d07      	ldr	r5, [sp, #28]
 80029e0:	47a8      	blx	r5
 80029e2:	1c43      	adds	r3, r0, #1
 80029e4:	d0aa      	beq.n	800293c <_printf_i+0x13c>
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	079b      	lsls	r3, r3, #30
 80029ea:	d415      	bmi.n	8002a18 <_printf_i+0x218>
 80029ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029ee:	68e0      	ldr	r0, [r4, #12]
 80029f0:	4298      	cmp	r0, r3
 80029f2:	daa5      	bge.n	8002940 <_printf_i+0x140>
 80029f4:	0018      	movs	r0, r3
 80029f6:	e7a3      	b.n	8002940 <_printf_i+0x140>
 80029f8:	0022      	movs	r2, r4
 80029fa:	2301      	movs	r3, #1
 80029fc:	9906      	ldr	r1, [sp, #24]
 80029fe:	9805      	ldr	r0, [sp, #20]
 8002a00:	9e07      	ldr	r6, [sp, #28]
 8002a02:	3219      	adds	r2, #25
 8002a04:	47b0      	blx	r6
 8002a06:	1c43      	adds	r3, r0, #1
 8002a08:	d098      	beq.n	800293c <_printf_i+0x13c>
 8002a0a:	3501      	adds	r5, #1
 8002a0c:	68e3      	ldr	r3, [r4, #12]
 8002a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	42ab      	cmp	r3, r5
 8002a14:	dcf0      	bgt.n	80029f8 <_printf_i+0x1f8>
 8002a16:	e7e9      	b.n	80029ec <_printf_i+0x1ec>
 8002a18:	2500      	movs	r5, #0
 8002a1a:	e7f7      	b.n	8002a0c <_printf_i+0x20c>
 8002a1c:	08003775 	.word	0x08003775
 8002a20:	08003786 	.word	0x08003786

08002a24 <_sbrk_r>:
 8002a24:	2300      	movs	r3, #0
 8002a26:	b570      	push	{r4, r5, r6, lr}
 8002a28:	4d06      	ldr	r5, [pc, #24]	; (8002a44 <_sbrk_r+0x20>)
 8002a2a:	0004      	movs	r4, r0
 8002a2c:	0008      	movs	r0, r1
 8002a2e:	602b      	str	r3, [r5, #0]
 8002a30:	f000 fc82 	bl	8003338 <_sbrk>
 8002a34:	1c43      	adds	r3, r0, #1
 8002a36:	d103      	bne.n	8002a40 <_sbrk_r+0x1c>
 8002a38:	682b      	ldr	r3, [r5, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <_sbrk_r+0x1c>
 8002a3e:	6023      	str	r3, [r4, #0]
 8002a40:	bd70      	pop	{r4, r5, r6, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	200002d8 	.word	0x200002d8

08002a48 <__swbuf_r>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	0005      	movs	r5, r0
 8002a4c:	000e      	movs	r6, r1
 8002a4e:	0014      	movs	r4, r2
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d004      	beq.n	8002a5e <__swbuf_r+0x16>
 8002a54:	6983      	ldr	r3, [r0, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <__swbuf_r+0x16>
 8002a5a:	f000 f9f9 	bl	8002e50 <__sinit>
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <__swbuf_r+0xa0>)
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d12e      	bne.n	8002ac2 <__swbuf_r+0x7a>
 8002a64:	686c      	ldr	r4, [r5, #4]
 8002a66:	69a3      	ldr	r3, [r4, #24]
 8002a68:	60a3      	str	r3, [r4, #8]
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	071b      	lsls	r3, r3, #28
 8002a6e:	d532      	bpl.n	8002ad6 <__swbuf_r+0x8e>
 8002a70:	6923      	ldr	r3, [r4, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d02f      	beq.n	8002ad6 <__swbuf_r+0x8e>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	6922      	ldr	r2, [r4, #16]
 8002a7a:	b2f7      	uxtb	r7, r6
 8002a7c:	1a98      	subs	r0, r3, r2
 8002a7e:	6963      	ldr	r3, [r4, #20]
 8002a80:	b2f6      	uxtb	r6, r6
 8002a82:	4283      	cmp	r3, r0
 8002a84:	dc05      	bgt.n	8002a92 <__swbuf_r+0x4a>
 8002a86:	0021      	movs	r1, r4
 8002a88:	0028      	movs	r0, r5
 8002a8a:	f000 f93f 	bl	8002d0c <_fflush_r>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d127      	bne.n	8002ae2 <__swbuf_r+0x9a>
 8002a92:	68a3      	ldr	r3, [r4, #8]
 8002a94:	3001      	adds	r0, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	60a3      	str	r3, [r4, #8]
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	6022      	str	r2, [r4, #0]
 8002aa0:	701f      	strb	r7, [r3, #0]
 8002aa2:	6963      	ldr	r3, [r4, #20]
 8002aa4:	4283      	cmp	r3, r0
 8002aa6:	d004      	beq.n	8002ab2 <__swbuf_r+0x6a>
 8002aa8:	89a3      	ldrh	r3, [r4, #12]
 8002aaa:	07db      	lsls	r3, r3, #31
 8002aac:	d507      	bpl.n	8002abe <__swbuf_r+0x76>
 8002aae:	2e0a      	cmp	r6, #10
 8002ab0:	d105      	bne.n	8002abe <__swbuf_r+0x76>
 8002ab2:	0021      	movs	r1, r4
 8002ab4:	0028      	movs	r0, r5
 8002ab6:	f000 f929 	bl	8002d0c <_fflush_r>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d111      	bne.n	8002ae2 <__swbuf_r+0x9a>
 8002abe:	0030      	movs	r0, r6
 8002ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <__swbuf_r+0xa4>)
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	d101      	bne.n	8002acc <__swbuf_r+0x84>
 8002ac8:	68ac      	ldr	r4, [r5, #8]
 8002aca:	e7cc      	b.n	8002a66 <__swbuf_r+0x1e>
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <__swbuf_r+0xa8>)
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	d1c9      	bne.n	8002a66 <__swbuf_r+0x1e>
 8002ad2:	68ec      	ldr	r4, [r5, #12]
 8002ad4:	e7c7      	b.n	8002a66 <__swbuf_r+0x1e>
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	0028      	movs	r0, r5
 8002ada:	f000 f80b 	bl	8002af4 <__swsetup_r>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d0c9      	beq.n	8002a76 <__swbuf_r+0x2e>
 8002ae2:	2601      	movs	r6, #1
 8002ae4:	4276      	negs	r6, r6
 8002ae6:	e7ea      	b.n	8002abe <__swbuf_r+0x76>
 8002ae8:	080037b8 	.word	0x080037b8
 8002aec:	080037d8 	.word	0x080037d8
 8002af0:	08003798 	.word	0x08003798

08002af4 <__swsetup_r>:
 8002af4:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <__swsetup_r+0xe0>)
 8002af6:	b570      	push	{r4, r5, r6, lr}
 8002af8:	681d      	ldr	r5, [r3, #0]
 8002afa:	0006      	movs	r6, r0
 8002afc:	000c      	movs	r4, r1
 8002afe:	2d00      	cmp	r5, #0
 8002b00:	d005      	beq.n	8002b0e <__swsetup_r+0x1a>
 8002b02:	69ab      	ldr	r3, [r5, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <__swsetup_r+0x1a>
 8002b08:	0028      	movs	r0, r5
 8002b0a:	f000 f9a1 	bl	8002e50 <__sinit>
 8002b0e:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <__swsetup_r+0xe4>)
 8002b10:	429c      	cmp	r4, r3
 8002b12:	d10f      	bne.n	8002b34 <__swsetup_r+0x40>
 8002b14:	686c      	ldr	r4, [r5, #4]
 8002b16:	230c      	movs	r3, #12
 8002b18:	5ee2      	ldrsh	r2, [r4, r3]
 8002b1a:	b293      	uxth	r3, r2
 8002b1c:	0711      	lsls	r1, r2, #28
 8002b1e:	d42d      	bmi.n	8002b7c <__swsetup_r+0x88>
 8002b20:	06d9      	lsls	r1, r3, #27
 8002b22:	d411      	bmi.n	8002b48 <__swsetup_r+0x54>
 8002b24:	2309      	movs	r3, #9
 8002b26:	2001      	movs	r0, #1
 8002b28:	6033      	str	r3, [r6, #0]
 8002b2a:	3337      	adds	r3, #55	; 0x37
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	81a3      	strh	r3, [r4, #12]
 8002b30:	4240      	negs	r0, r0
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <__swsetup_r+0xe8>)
 8002b36:	429c      	cmp	r4, r3
 8002b38:	d101      	bne.n	8002b3e <__swsetup_r+0x4a>
 8002b3a:	68ac      	ldr	r4, [r5, #8]
 8002b3c:	e7eb      	b.n	8002b16 <__swsetup_r+0x22>
 8002b3e:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <__swsetup_r+0xec>)
 8002b40:	429c      	cmp	r4, r3
 8002b42:	d1e8      	bne.n	8002b16 <__swsetup_r+0x22>
 8002b44:	68ec      	ldr	r4, [r5, #12]
 8002b46:	e7e6      	b.n	8002b16 <__swsetup_r+0x22>
 8002b48:	075b      	lsls	r3, r3, #29
 8002b4a:	d513      	bpl.n	8002b74 <__swsetup_r+0x80>
 8002b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	d008      	beq.n	8002b64 <__swsetup_r+0x70>
 8002b52:	0023      	movs	r3, r4
 8002b54:	3344      	adds	r3, #68	; 0x44
 8002b56:	4299      	cmp	r1, r3
 8002b58:	d002      	beq.n	8002b60 <__swsetup_r+0x6c>
 8002b5a:	0030      	movs	r0, r6
 8002b5c:	f7ff fbd6 	bl	800230c <_free_r>
 8002b60:	2300      	movs	r3, #0
 8002b62:	6363      	str	r3, [r4, #52]	; 0x34
 8002b64:	2224      	movs	r2, #36	; 0x24
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	4393      	bics	r3, r2
 8002b6a:	81a3      	strh	r3, [r4, #12]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	6063      	str	r3, [r4, #4]
 8002b70:	6923      	ldr	r3, [r4, #16]
 8002b72:	6023      	str	r3, [r4, #0]
 8002b74:	2308      	movs	r3, #8
 8002b76:	89a2      	ldrh	r2, [r4, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	81a3      	strh	r3, [r4, #12]
 8002b7c:	6923      	ldr	r3, [r4, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <__swsetup_r+0xa6>
 8002b82:	21a0      	movs	r1, #160	; 0xa0
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	0089      	lsls	r1, r1, #2
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <__swsetup_r+0xa6>
 8002b92:	0021      	movs	r1, r4
 8002b94:	0030      	movs	r0, r6
 8002b96:	f000 fa27 	bl	8002fe8 <__smakebuf_r>
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	5ea3      	ldrsh	r3, [r4, r2]
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	b299      	uxth	r1, r3
 8002ba4:	4002      	ands	r2, r0
 8002ba6:	4203      	tst	r3, r0
 8002ba8:	d00f      	beq.n	8002bca <__swsetup_r+0xd6>
 8002baa:	2200      	movs	r2, #0
 8002bac:	60a2      	str	r2, [r4, #8]
 8002bae:	6962      	ldr	r2, [r4, #20]
 8002bb0:	4252      	negs	r2, r2
 8002bb2:	61a2      	str	r2, [r4, #24]
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	6922      	ldr	r2, [r4, #16]
 8002bb8:	4282      	cmp	r2, r0
 8002bba:	d1ba      	bne.n	8002b32 <__swsetup_r+0x3e>
 8002bbc:	060a      	lsls	r2, r1, #24
 8002bbe:	d5b8      	bpl.n	8002b32 <__swsetup_r+0x3e>
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	81a3      	strh	r3, [r4, #12]
 8002bc6:	3801      	subs	r0, #1
 8002bc8:	e7b3      	b.n	8002b32 <__swsetup_r+0x3e>
 8002bca:	0788      	lsls	r0, r1, #30
 8002bcc:	d400      	bmi.n	8002bd0 <__swsetup_r+0xdc>
 8002bce:	6962      	ldr	r2, [r4, #20]
 8002bd0:	60a2      	str	r2, [r4, #8]
 8002bd2:	e7ef      	b.n	8002bb4 <__swsetup_r+0xc0>
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	080037b8 	.word	0x080037b8
 8002bdc:	080037d8 	.word	0x080037d8
 8002be0:	08003798 	.word	0x08003798

08002be4 <abort>:
 8002be4:	2006      	movs	r0, #6
 8002be6:	b510      	push	{r4, lr}
 8002be8:	f000 fa88 	bl	80030fc <raise>
 8002bec:	2001      	movs	r0, #1
 8002bee:	f000 fbb9 	bl	8003364 <_exit>
 8002bf2:	0000      	movs	r0, r0

08002bf4 <__sflush_r>:
 8002bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bf6:	898b      	ldrh	r3, [r1, #12]
 8002bf8:	0005      	movs	r5, r0
 8002bfa:	000c      	movs	r4, r1
 8002bfc:	071a      	lsls	r2, r3, #28
 8002bfe:	d45f      	bmi.n	8002cc0 <__sflush_r+0xcc>
 8002c00:	684a      	ldr	r2, [r1, #4]
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	dc04      	bgt.n	8002c10 <__sflush_r+0x1c>
 8002c06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002c08:	2a00      	cmp	r2, #0
 8002c0a:	dc01      	bgt.n	8002c10 <__sflush_r+0x1c>
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c12:	2f00      	cmp	r7, #0
 8002c14:	d0fa      	beq.n	8002c0c <__sflush_r+0x18>
 8002c16:	2200      	movs	r2, #0
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	682e      	ldr	r6, [r5, #0]
 8002c1c:	602a      	str	r2, [r5, #0]
 8002c1e:	001a      	movs	r2, r3
 8002c20:	0149      	lsls	r1, r1, #5
 8002c22:	400a      	ands	r2, r1
 8002c24:	420b      	tst	r3, r1
 8002c26:	d034      	beq.n	8002c92 <__sflush_r+0x9e>
 8002c28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	075b      	lsls	r3, r3, #29
 8002c2e:	d506      	bpl.n	8002c3e <__sflush_r+0x4a>
 8002c30:	6863      	ldr	r3, [r4, #4]
 8002c32:	1ac0      	subs	r0, r0, r3
 8002c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <__sflush_r+0x4a>
 8002c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c3c:	1ac0      	subs	r0, r0, r3
 8002c3e:	0002      	movs	r2, r0
 8002c40:	6a21      	ldr	r1, [r4, #32]
 8002c42:	2300      	movs	r3, #0
 8002c44:	0028      	movs	r0, r5
 8002c46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c48:	47b8      	blx	r7
 8002c4a:	89a1      	ldrh	r1, [r4, #12]
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d106      	bne.n	8002c5e <__sflush_r+0x6a>
 8002c50:	682b      	ldr	r3, [r5, #0]
 8002c52:	2b1d      	cmp	r3, #29
 8002c54:	d831      	bhi.n	8002cba <__sflush_r+0xc6>
 8002c56:	4a2c      	ldr	r2, [pc, #176]	; (8002d08 <__sflush_r+0x114>)
 8002c58:	40da      	lsrs	r2, r3
 8002c5a:	07d3      	lsls	r3, r2, #31
 8002c5c:	d52d      	bpl.n	8002cba <__sflush_r+0xc6>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	6063      	str	r3, [r4, #4]
 8002c62:	6923      	ldr	r3, [r4, #16]
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	04cb      	lsls	r3, r1, #19
 8002c68:	d505      	bpl.n	8002c76 <__sflush_r+0x82>
 8002c6a:	1c43      	adds	r3, r0, #1
 8002c6c:	d102      	bne.n	8002c74 <__sflush_r+0x80>
 8002c6e:	682b      	ldr	r3, [r5, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d100      	bne.n	8002c76 <__sflush_r+0x82>
 8002c74:	6560      	str	r0, [r4, #84]	; 0x54
 8002c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c78:	602e      	str	r6, [r5, #0]
 8002c7a:	2900      	cmp	r1, #0
 8002c7c:	d0c6      	beq.n	8002c0c <__sflush_r+0x18>
 8002c7e:	0023      	movs	r3, r4
 8002c80:	3344      	adds	r3, #68	; 0x44
 8002c82:	4299      	cmp	r1, r3
 8002c84:	d002      	beq.n	8002c8c <__sflush_r+0x98>
 8002c86:	0028      	movs	r0, r5
 8002c88:	f7ff fb40 	bl	800230c <_free_r>
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8002c90:	e7bd      	b.n	8002c0e <__sflush_r+0x1a>
 8002c92:	2301      	movs	r3, #1
 8002c94:	0028      	movs	r0, r5
 8002c96:	6a21      	ldr	r1, [r4, #32]
 8002c98:	47b8      	blx	r7
 8002c9a:	1c43      	adds	r3, r0, #1
 8002c9c:	d1c5      	bne.n	8002c2a <__sflush_r+0x36>
 8002c9e:	682b      	ldr	r3, [r5, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0c2      	beq.n	8002c2a <__sflush_r+0x36>
 8002ca4:	2b1d      	cmp	r3, #29
 8002ca6:	d001      	beq.n	8002cac <__sflush_r+0xb8>
 8002ca8:	2b16      	cmp	r3, #22
 8002caa:	d101      	bne.n	8002cb0 <__sflush_r+0xbc>
 8002cac:	602e      	str	r6, [r5, #0]
 8002cae:	e7ad      	b.n	8002c0c <__sflush_r+0x18>
 8002cb0:	2340      	movs	r3, #64	; 0x40
 8002cb2:	89a2      	ldrh	r2, [r4, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	e7a9      	b.n	8002c0e <__sflush_r+0x1a>
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	e7fa      	b.n	8002cb6 <__sflush_r+0xc2>
 8002cc0:	690f      	ldr	r7, [r1, #16]
 8002cc2:	2f00      	cmp	r7, #0
 8002cc4:	d0a2      	beq.n	8002c0c <__sflush_r+0x18>
 8002cc6:	680a      	ldr	r2, [r1, #0]
 8002cc8:	600f      	str	r7, [r1, #0]
 8002cca:	1bd2      	subs	r2, r2, r7
 8002ccc:	9201      	str	r2, [sp, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	079b      	lsls	r3, r3, #30
 8002cd2:	d100      	bne.n	8002cd6 <__sflush_r+0xe2>
 8002cd4:	694a      	ldr	r2, [r1, #20]
 8002cd6:	60a2      	str	r2, [r4, #8]
 8002cd8:	9b01      	ldr	r3, [sp, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	dc00      	bgt.n	8002ce0 <__sflush_r+0xec>
 8002cde:	e795      	b.n	8002c0c <__sflush_r+0x18>
 8002ce0:	003a      	movs	r2, r7
 8002ce2:	0028      	movs	r0, r5
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	6a21      	ldr	r1, [r4, #32]
 8002ce8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cea:	47b0      	blx	r6
 8002cec:	2800      	cmp	r0, #0
 8002cee:	dc06      	bgt.n	8002cfe <__sflush_r+0x10a>
 8002cf0:	2340      	movs	r3, #64	; 0x40
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	89a2      	ldrh	r2, [r4, #12]
 8002cf6:	4240      	negs	r0, r0
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	81a3      	strh	r3, [r4, #12]
 8002cfc:	e787      	b.n	8002c0e <__sflush_r+0x1a>
 8002cfe:	9b01      	ldr	r3, [sp, #4]
 8002d00:	183f      	adds	r7, r7, r0
 8002d02:	1a1b      	subs	r3, r3, r0
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	e7e7      	b.n	8002cd8 <__sflush_r+0xe4>
 8002d08:	20400001 	.word	0x20400001

08002d0c <_fflush_r>:
 8002d0c:	690b      	ldr	r3, [r1, #16]
 8002d0e:	b570      	push	{r4, r5, r6, lr}
 8002d10:	0005      	movs	r5, r0
 8002d12:	000c      	movs	r4, r1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_fflush_r+0x12>
 8002d18:	2500      	movs	r5, #0
 8002d1a:	0028      	movs	r0, r5
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d004      	beq.n	8002d2c <_fflush_r+0x20>
 8002d22:	6983      	ldr	r3, [r0, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <_fflush_r+0x20>
 8002d28:	f000 f892 	bl	8002e50 <__sinit>
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <_fflush_r+0x74>)
 8002d2e:	429c      	cmp	r4, r3
 8002d30:	d11b      	bne.n	8002d6a <_fflush_r+0x5e>
 8002d32:	686c      	ldr	r4, [r5, #4]
 8002d34:	220c      	movs	r2, #12
 8002d36:	5ea3      	ldrsh	r3, [r4, r2]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ed      	beq.n	8002d18 <_fflush_r+0xc>
 8002d3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d3e:	07d2      	lsls	r2, r2, #31
 8002d40:	d404      	bmi.n	8002d4c <_fflush_r+0x40>
 8002d42:	059b      	lsls	r3, r3, #22
 8002d44:	d402      	bmi.n	8002d4c <_fflush_r+0x40>
 8002d46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d48:	f000 f923 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8002d4c:	0028      	movs	r0, r5
 8002d4e:	0021      	movs	r1, r4
 8002d50:	f7ff ff50 	bl	8002bf4 <__sflush_r>
 8002d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d56:	0005      	movs	r5, r0
 8002d58:	07db      	lsls	r3, r3, #31
 8002d5a:	d4de      	bmi.n	8002d1a <_fflush_r+0xe>
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	059b      	lsls	r3, r3, #22
 8002d60:	d4db      	bmi.n	8002d1a <_fflush_r+0xe>
 8002d62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d64:	f000 f916 	bl	8002f94 <__retarget_lock_release_recursive>
 8002d68:	e7d7      	b.n	8002d1a <_fflush_r+0xe>
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <_fflush_r+0x78>)
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	d101      	bne.n	8002d74 <_fflush_r+0x68>
 8002d70:	68ac      	ldr	r4, [r5, #8]
 8002d72:	e7df      	b.n	8002d34 <_fflush_r+0x28>
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <_fflush_r+0x7c>)
 8002d76:	429c      	cmp	r4, r3
 8002d78:	d1dc      	bne.n	8002d34 <_fflush_r+0x28>
 8002d7a:	68ec      	ldr	r4, [r5, #12]
 8002d7c:	e7da      	b.n	8002d34 <_fflush_r+0x28>
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	080037b8 	.word	0x080037b8
 8002d84:	080037d8 	.word	0x080037d8
 8002d88:	08003798 	.word	0x08003798

08002d8c <std>:
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	b510      	push	{r4, lr}
 8002d90:	0004      	movs	r4, r0
 8002d92:	6003      	str	r3, [r0, #0]
 8002d94:	6043      	str	r3, [r0, #4]
 8002d96:	6083      	str	r3, [r0, #8]
 8002d98:	8181      	strh	r1, [r0, #12]
 8002d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	81c2      	strh	r2, [r0, #14]
 8002da0:	6103      	str	r3, [r0, #16]
 8002da2:	6143      	str	r3, [r0, #20]
 8002da4:	6183      	str	r3, [r0, #24]
 8002da6:	2208      	movs	r2, #8
 8002da8:	305c      	adds	r0, #92	; 0x5c
 8002daa:	f7ff f9d4 	bl	8002156 <memset>
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <std+0x38>)
 8002db0:	6224      	str	r4, [r4, #32]
 8002db2:	6263      	str	r3, [r4, #36]	; 0x24
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <std+0x3c>)
 8002db6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <std+0x40>)
 8002dba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <std+0x44>)
 8002dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	0800313d 	.word	0x0800313d
 8002dc8:	08003165 	.word	0x08003165
 8002dcc:	0800319d 	.word	0x0800319d
 8002dd0:	080031c9 	.word	0x080031c9

08002dd4 <_cleanup_r>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4902      	ldr	r1, [pc, #8]	; (8002de0 <_cleanup_r+0xc>)
 8002dd8:	f000 f8ba 	bl	8002f50 <_fwalk_reent>
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	08002d0d 	.word	0x08002d0d

08002de4 <__sfmoreglue>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	2568      	movs	r5, #104	; 0x68
 8002de8:	1e4a      	subs	r2, r1, #1
 8002dea:	4355      	muls	r5, r2
 8002dec:	000e      	movs	r6, r1
 8002dee:	0029      	movs	r1, r5
 8002df0:	3174      	adds	r1, #116	; 0x74
 8002df2:	f7ff fad5 	bl	80023a0 <_malloc_r>
 8002df6:	1e04      	subs	r4, r0, #0
 8002df8:	d008      	beq.n	8002e0c <__sfmoreglue+0x28>
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	002a      	movs	r2, r5
 8002dfe:	6001      	str	r1, [r0, #0]
 8002e00:	6046      	str	r6, [r0, #4]
 8002e02:	300c      	adds	r0, #12
 8002e04:	60a0      	str	r0, [r4, #8]
 8002e06:	3268      	adds	r2, #104	; 0x68
 8002e08:	f7ff f9a5 	bl	8002156 <memset>
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}

08002e10 <__sfp_lock_acquire>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4802      	ldr	r0, [pc, #8]	; (8002e1c <__sfp_lock_acquire+0xc>)
 8002e14:	f000 f8bd 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8002e18:	bd10      	pop	{r4, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	200002dd 	.word	0x200002dd

08002e20 <__sfp_lock_release>:
 8002e20:	b510      	push	{r4, lr}
 8002e22:	4802      	ldr	r0, [pc, #8]	; (8002e2c <__sfp_lock_release+0xc>)
 8002e24:	f000 f8b6 	bl	8002f94 <__retarget_lock_release_recursive>
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	200002dd 	.word	0x200002dd

08002e30 <__sinit_lock_acquire>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4802      	ldr	r0, [pc, #8]	; (8002e3c <__sinit_lock_acquire+0xc>)
 8002e34:	f000 f8ad 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	200002de 	.word	0x200002de

08002e40 <__sinit_lock_release>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4802      	ldr	r0, [pc, #8]	; (8002e4c <__sinit_lock_release+0xc>)
 8002e44:	f000 f8a6 	bl	8002f94 <__retarget_lock_release_recursive>
 8002e48:	bd10      	pop	{r4, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	200002de 	.word	0x200002de

08002e50 <__sinit>:
 8002e50:	b513      	push	{r0, r1, r4, lr}
 8002e52:	0004      	movs	r4, r0
 8002e54:	f7ff ffec 	bl	8002e30 <__sinit_lock_acquire>
 8002e58:	69a3      	ldr	r3, [r4, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <__sinit+0x14>
 8002e5e:	f7ff ffef 	bl	8002e40 <__sinit_lock_release>
 8002e62:	bd13      	pop	{r0, r1, r4, pc}
 8002e64:	64a3      	str	r3, [r4, #72]	; 0x48
 8002e66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e68:	6523      	str	r3, [r4, #80]	; 0x50
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <__sinit+0x68>)
 8002e6c:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <__sinit+0x6c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	42a3      	cmp	r3, r4
 8002e76:	d101      	bne.n	8002e7c <__sinit+0x2c>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	61a3      	str	r3, [r4, #24]
 8002e7c:	0020      	movs	r0, r4
 8002e7e:	f000 f81f 	bl	8002ec0 <__sfp>
 8002e82:	6060      	str	r0, [r4, #4]
 8002e84:	0020      	movs	r0, r4
 8002e86:	f000 f81b 	bl	8002ec0 <__sfp>
 8002e8a:	60a0      	str	r0, [r4, #8]
 8002e8c:	0020      	movs	r0, r4
 8002e8e:	f000 f817 	bl	8002ec0 <__sfp>
 8002e92:	2200      	movs	r2, #0
 8002e94:	2104      	movs	r1, #4
 8002e96:	60e0      	str	r0, [r4, #12]
 8002e98:	6860      	ldr	r0, [r4, #4]
 8002e9a:	f7ff ff77 	bl	8002d8c <std>
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	2109      	movs	r1, #9
 8002ea2:	68a0      	ldr	r0, [r4, #8]
 8002ea4:	f7ff ff72 	bl	8002d8c <std>
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	2112      	movs	r1, #18
 8002eac:	68e0      	ldr	r0, [r4, #12]
 8002eae:	f7ff ff6d 	bl	8002d8c <std>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61a3      	str	r3, [r4, #24]
 8002eb6:	e7d2      	b.n	8002e5e <__sinit+0xe>
 8002eb8:	08003690 	.word	0x08003690
 8002ebc:	08002dd5 	.word	0x08002dd5

08002ec0 <__sfp>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	0007      	movs	r7, r0
 8002ec4:	f7ff ffa4 	bl	8002e10 <__sfp_lock_acquire>
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <__sfp+0x88>)
 8002eca:	681e      	ldr	r6, [r3, #0]
 8002ecc:	69b3      	ldr	r3, [r6, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <__sfp+0x18>
 8002ed2:	0030      	movs	r0, r6
 8002ed4:	f7ff ffbc 	bl	8002e50 <__sinit>
 8002ed8:	3648      	adds	r6, #72	; 0x48
 8002eda:	68b4      	ldr	r4, [r6, #8]
 8002edc:	6873      	ldr	r3, [r6, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	d504      	bpl.n	8002eec <__sfp+0x2c>
 8002ee2:	6833      	ldr	r3, [r6, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d022      	beq.n	8002f2e <__sfp+0x6e>
 8002ee8:	6836      	ldr	r6, [r6, #0]
 8002eea:	e7f6      	b.n	8002eda <__sfp+0x1a>
 8002eec:	220c      	movs	r2, #12
 8002eee:	5ea5      	ldrsh	r5, [r4, r2]
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	d11a      	bne.n	8002f2a <__sfp+0x6a>
 8002ef4:	0020      	movs	r0, r4
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <__sfp+0x8c>)
 8002ef8:	3058      	adds	r0, #88	; 0x58
 8002efa:	60e3      	str	r3, [r4, #12]
 8002efc:	6665      	str	r5, [r4, #100]	; 0x64
 8002efe:	f000 f847 	bl	8002f90 <__retarget_lock_init_recursive>
 8002f02:	f7ff ff8d 	bl	8002e20 <__sfp_lock_release>
 8002f06:	0020      	movs	r0, r4
 8002f08:	2208      	movs	r2, #8
 8002f0a:	0029      	movs	r1, r5
 8002f0c:	6025      	str	r5, [r4, #0]
 8002f0e:	60a5      	str	r5, [r4, #8]
 8002f10:	6065      	str	r5, [r4, #4]
 8002f12:	6125      	str	r5, [r4, #16]
 8002f14:	6165      	str	r5, [r4, #20]
 8002f16:	61a5      	str	r5, [r4, #24]
 8002f18:	305c      	adds	r0, #92	; 0x5c
 8002f1a:	f7ff f91c 	bl	8002156 <memset>
 8002f1e:	6365      	str	r5, [r4, #52]	; 0x34
 8002f20:	63a5      	str	r5, [r4, #56]	; 0x38
 8002f22:	64a5      	str	r5, [r4, #72]	; 0x48
 8002f24:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002f26:	0020      	movs	r0, r4
 8002f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f2a:	3468      	adds	r4, #104	; 0x68
 8002f2c:	e7d7      	b.n	8002ede <__sfp+0x1e>
 8002f2e:	2104      	movs	r1, #4
 8002f30:	0038      	movs	r0, r7
 8002f32:	f7ff ff57 	bl	8002de4 <__sfmoreglue>
 8002f36:	1e04      	subs	r4, r0, #0
 8002f38:	6030      	str	r0, [r6, #0]
 8002f3a:	d1d5      	bne.n	8002ee8 <__sfp+0x28>
 8002f3c:	f7ff ff70 	bl	8002e20 <__sfp_lock_release>
 8002f40:	230c      	movs	r3, #12
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	e7ef      	b.n	8002f26 <__sfp+0x66>
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	08003690 	.word	0x08003690
 8002f4c:	ffff0001 	.word	0xffff0001

08002f50 <_fwalk_reent>:
 8002f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f52:	0004      	movs	r4, r0
 8002f54:	0006      	movs	r6, r0
 8002f56:	2700      	movs	r7, #0
 8002f58:	9101      	str	r1, [sp, #4]
 8002f5a:	3448      	adds	r4, #72	; 0x48
 8002f5c:	6863      	ldr	r3, [r4, #4]
 8002f5e:	68a5      	ldr	r5, [r4, #8]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	d504      	bpl.n	8002f74 <_fwalk_reent+0x24>
 8002f6a:	6824      	ldr	r4, [r4, #0]
 8002f6c:	2c00      	cmp	r4, #0
 8002f6e:	d1f5      	bne.n	8002f5c <_fwalk_reent+0xc>
 8002f70:	0038      	movs	r0, r7
 8002f72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f74:	89ab      	ldrh	r3, [r5, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d908      	bls.n	8002f8c <_fwalk_reent+0x3c>
 8002f7a:	220e      	movs	r2, #14
 8002f7c:	5eab      	ldrsh	r3, [r5, r2]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	d004      	beq.n	8002f8c <_fwalk_reent+0x3c>
 8002f82:	0029      	movs	r1, r5
 8002f84:	0030      	movs	r0, r6
 8002f86:	9b01      	ldr	r3, [sp, #4]
 8002f88:	4798      	blx	r3
 8002f8a:	4307      	orrs	r7, r0
 8002f8c:	3568      	adds	r5, #104	; 0x68
 8002f8e:	e7e8      	b.n	8002f62 <_fwalk_reent+0x12>

08002f90 <__retarget_lock_init_recursive>:
 8002f90:	4770      	bx	lr

08002f92 <__retarget_lock_acquire_recursive>:
 8002f92:	4770      	bx	lr

08002f94 <__retarget_lock_release_recursive>:
 8002f94:	4770      	bx	lr
 8002f96:	0000      	movs	r0, r0

08002f98 <__swhatbuf_r>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	000e      	movs	r6, r1
 8002f9c:	001d      	movs	r5, r3
 8002f9e:	230e      	movs	r3, #14
 8002fa0:	5ec9      	ldrsh	r1, [r1, r3]
 8002fa2:	0014      	movs	r4, r2
 8002fa4:	b096      	sub	sp, #88	; 0x58
 8002fa6:	2900      	cmp	r1, #0
 8002fa8:	da08      	bge.n	8002fbc <__swhatbuf_r+0x24>
 8002faa:	220c      	movs	r2, #12
 8002fac:	5eb3      	ldrsh	r3, [r6, r2]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	602a      	str	r2, [r5, #0]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	d411      	bmi.n	8002fda <__swhatbuf_r+0x42>
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	e00f      	b.n	8002fdc <__swhatbuf_r+0x44>
 8002fbc:	466a      	mov	r2, sp
 8002fbe:	f000 f92f 	bl	8003220 <_fstat_r>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	dbf1      	blt.n	8002faa <__swhatbuf_r+0x12>
 8002fc6:	23f0      	movs	r3, #240	; 0xf0
 8002fc8:	9901      	ldr	r1, [sp, #4]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	4019      	ands	r1, r3
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <__swhatbuf_r+0x4c>)
 8002fd0:	18c9      	adds	r1, r1, r3
 8002fd2:	424b      	negs	r3, r1
 8002fd4:	4159      	adcs	r1, r3
 8002fd6:	6029      	str	r1, [r5, #0]
 8002fd8:	e7ed      	b.n	8002fb6 <__swhatbuf_r+0x1e>
 8002fda:	2340      	movs	r3, #64	; 0x40
 8002fdc:	2000      	movs	r0, #0
 8002fde:	6023      	str	r3, [r4, #0]
 8002fe0:	b016      	add	sp, #88	; 0x58
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	ffffe000 	.word	0xffffe000

08002fe8 <__smakebuf_r>:
 8002fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fea:	2602      	movs	r6, #2
 8002fec:	898b      	ldrh	r3, [r1, #12]
 8002fee:	0005      	movs	r5, r0
 8002ff0:	000c      	movs	r4, r1
 8002ff2:	4233      	tst	r3, r6
 8002ff4:	d006      	beq.n	8003004 <__smakebuf_r+0x1c>
 8002ff6:	0023      	movs	r3, r4
 8002ff8:	3347      	adds	r3, #71	; 0x47
 8002ffa:	6023      	str	r3, [r4, #0]
 8002ffc:	6123      	str	r3, [r4, #16]
 8002ffe:	2301      	movs	r3, #1
 8003000:	6163      	str	r3, [r4, #20]
 8003002:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003004:	466a      	mov	r2, sp
 8003006:	ab01      	add	r3, sp, #4
 8003008:	f7ff ffc6 	bl	8002f98 <__swhatbuf_r>
 800300c:	9900      	ldr	r1, [sp, #0]
 800300e:	0007      	movs	r7, r0
 8003010:	0028      	movs	r0, r5
 8003012:	f7ff f9c5 	bl	80023a0 <_malloc_r>
 8003016:	2800      	cmp	r0, #0
 8003018:	d108      	bne.n	800302c <__smakebuf_r+0x44>
 800301a:	220c      	movs	r2, #12
 800301c:	5ea3      	ldrsh	r3, [r4, r2]
 800301e:	059a      	lsls	r2, r3, #22
 8003020:	d4ef      	bmi.n	8003002 <__smakebuf_r+0x1a>
 8003022:	2203      	movs	r2, #3
 8003024:	4393      	bics	r3, r2
 8003026:	431e      	orrs	r6, r3
 8003028:	81a6      	strh	r6, [r4, #12]
 800302a:	e7e4      	b.n	8002ff6 <__smakebuf_r+0xe>
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <__smakebuf_r+0x84>)
 800302e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	89a2      	ldrh	r2, [r4, #12]
 8003034:	6020      	str	r0, [r4, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	81a3      	strh	r3, [r4, #12]
 800303a:	9b00      	ldr	r3, [sp, #0]
 800303c:	6120      	str	r0, [r4, #16]
 800303e:	6163      	str	r3, [r4, #20]
 8003040:	9b01      	ldr	r3, [sp, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <__smakebuf_r+0x7a>
 8003046:	0028      	movs	r0, r5
 8003048:	230e      	movs	r3, #14
 800304a:	5ee1      	ldrsh	r1, [r4, r3]
 800304c:	f000 f8fa 	bl	8003244 <_isatty_r>
 8003050:	2800      	cmp	r0, #0
 8003052:	d006      	beq.n	8003062 <__smakebuf_r+0x7a>
 8003054:	2203      	movs	r2, #3
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	4393      	bics	r3, r2
 800305a:	001a      	movs	r2, r3
 800305c:	2301      	movs	r3, #1
 800305e:	4313      	orrs	r3, r2
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	89a0      	ldrh	r0, [r4, #12]
 8003064:	4307      	orrs	r7, r0
 8003066:	81a7      	strh	r7, [r4, #12]
 8003068:	e7cb      	b.n	8003002 <__smakebuf_r+0x1a>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	08002dd5 	.word	0x08002dd5

08003070 <memchr>:
 8003070:	b2c9      	uxtb	r1, r1
 8003072:	1882      	adds	r2, r0, r2
 8003074:	4290      	cmp	r0, r2
 8003076:	d101      	bne.n	800307c <memchr+0xc>
 8003078:	2000      	movs	r0, #0
 800307a:	4770      	bx	lr
 800307c:	7803      	ldrb	r3, [r0, #0]
 800307e:	428b      	cmp	r3, r1
 8003080:	d0fb      	beq.n	800307a <memchr+0xa>
 8003082:	3001      	adds	r0, #1
 8003084:	e7f6      	b.n	8003074 <memchr+0x4>
 8003086:	0000      	movs	r0, r0

08003088 <__malloc_lock>:
 8003088:	b510      	push	{r4, lr}
 800308a:	4802      	ldr	r0, [pc, #8]	; (8003094 <__malloc_lock+0xc>)
 800308c:	f7ff ff81 	bl	8002f92 <__retarget_lock_acquire_recursive>
 8003090:	bd10      	pop	{r4, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	200002dc 	.word	0x200002dc

08003098 <__malloc_unlock>:
 8003098:	b510      	push	{r4, lr}
 800309a:	4802      	ldr	r0, [pc, #8]	; (80030a4 <__malloc_unlock+0xc>)
 800309c:	f7ff ff7a 	bl	8002f94 <__retarget_lock_release_recursive>
 80030a0:	bd10      	pop	{r4, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	200002dc 	.word	0x200002dc

080030a8 <_raise_r>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	0004      	movs	r4, r0
 80030ac:	000d      	movs	r5, r1
 80030ae:	291f      	cmp	r1, #31
 80030b0:	d904      	bls.n	80030bc <_raise_r+0x14>
 80030b2:	2316      	movs	r3, #22
 80030b4:	6003      	str	r3, [r0, #0]
 80030b6:	2001      	movs	r0, #1
 80030b8:	4240      	negs	r0, r0
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <_raise_r+0x24>
 80030c2:	008a      	lsls	r2, r1, #2
 80030c4:	189b      	adds	r3, r3, r2
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	d108      	bne.n	80030de <_raise_r+0x36>
 80030cc:	0020      	movs	r0, r4
 80030ce:	f000 f831 	bl	8003134 <_getpid_r>
 80030d2:	002a      	movs	r2, r5
 80030d4:	0001      	movs	r1, r0
 80030d6:	0020      	movs	r0, r4
 80030d8:	f000 f81a 	bl	8003110 <_kill_r>
 80030dc:	e7ed      	b.n	80030ba <_raise_r+0x12>
 80030de:	2000      	movs	r0, #0
 80030e0:	2a01      	cmp	r2, #1
 80030e2:	d0ea      	beq.n	80030ba <_raise_r+0x12>
 80030e4:	1c51      	adds	r1, r2, #1
 80030e6:	d103      	bne.n	80030f0 <_raise_r+0x48>
 80030e8:	2316      	movs	r3, #22
 80030ea:	3001      	adds	r0, #1
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	e7e4      	b.n	80030ba <_raise_r+0x12>
 80030f0:	2400      	movs	r4, #0
 80030f2:	0028      	movs	r0, r5
 80030f4:	601c      	str	r4, [r3, #0]
 80030f6:	4790      	blx	r2
 80030f8:	0020      	movs	r0, r4
 80030fa:	e7de      	b.n	80030ba <_raise_r+0x12>

080030fc <raise>:
 80030fc:	b510      	push	{r4, lr}
 80030fe:	4b03      	ldr	r3, [pc, #12]	; (800310c <raise+0x10>)
 8003100:	0001      	movs	r1, r0
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	f7ff ffd0 	bl	80030a8 <_raise_r>
 8003108:	bd10      	pop	{r4, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	20000004 	.word	0x20000004

08003110 <_kill_r>:
 8003110:	2300      	movs	r3, #0
 8003112:	b570      	push	{r4, r5, r6, lr}
 8003114:	4d06      	ldr	r5, [pc, #24]	; (8003130 <_kill_r+0x20>)
 8003116:	0004      	movs	r4, r0
 8003118:	0008      	movs	r0, r1
 800311a:	0011      	movs	r1, r2
 800311c:	602b      	str	r3, [r5, #0]
 800311e:	f000 f8f3 	bl	8003308 <_kill>
 8003122:	1c43      	adds	r3, r0, #1
 8003124:	d103      	bne.n	800312e <_kill_r+0x1e>
 8003126:	682b      	ldr	r3, [r5, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d000      	beq.n	800312e <_kill_r+0x1e>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	200002d8 	.word	0x200002d8

08003134 <_getpid_r>:
 8003134:	b510      	push	{r4, lr}
 8003136:	f000 f8cf 	bl	80032d8 <_getpid>
 800313a:	bd10      	pop	{r4, pc}

0800313c <__sread>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	000c      	movs	r4, r1
 8003140:	250e      	movs	r5, #14
 8003142:	5f49      	ldrsh	r1, [r1, r5]
 8003144:	f000 f8a4 	bl	8003290 <_read_r>
 8003148:	2800      	cmp	r0, #0
 800314a:	db03      	blt.n	8003154 <__sread+0x18>
 800314c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800314e:	181b      	adds	r3, r3, r0
 8003150:	6563      	str	r3, [r4, #84]	; 0x54
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	4a02      	ldr	r2, [pc, #8]	; (8003160 <__sread+0x24>)
 8003158:	4013      	ands	r3, r2
 800315a:	81a3      	strh	r3, [r4, #12]
 800315c:	e7f9      	b.n	8003152 <__sread+0x16>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	ffffefff 	.word	0xffffefff

08003164 <__swrite>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	001f      	movs	r7, r3
 8003168:	898b      	ldrh	r3, [r1, #12]
 800316a:	0005      	movs	r5, r0
 800316c:	000c      	movs	r4, r1
 800316e:	0016      	movs	r6, r2
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	d505      	bpl.n	8003180 <__swrite+0x1c>
 8003174:	230e      	movs	r3, #14
 8003176:	5ec9      	ldrsh	r1, [r1, r3]
 8003178:	2200      	movs	r2, #0
 800317a:	2302      	movs	r3, #2
 800317c:	f000 f874 	bl	8003268 <_lseek_r>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <__swrite+0x34>)
 8003184:	0028      	movs	r0, r5
 8003186:	4013      	ands	r3, r2
 8003188:	81a3      	strh	r3, [r4, #12]
 800318a:	0032      	movs	r2, r6
 800318c:	230e      	movs	r3, #14
 800318e:	5ee1      	ldrsh	r1, [r4, r3]
 8003190:	003b      	movs	r3, r7
 8003192:	f000 f81f 	bl	80031d4 <_write_r>
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	ffffefff 	.word	0xffffefff

0800319c <__sseek>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	000c      	movs	r4, r1
 80031a0:	250e      	movs	r5, #14
 80031a2:	5f49      	ldrsh	r1, [r1, r5]
 80031a4:	f000 f860 	bl	8003268 <_lseek_r>
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	1c42      	adds	r2, r0, #1
 80031ac:	d103      	bne.n	80031b6 <__sseek+0x1a>
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <__sseek+0x28>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	0152      	lsls	r2, r2, #5
 80031ba:	4313      	orrs	r3, r2
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	6560      	str	r0, [r4, #84]	; 0x54
 80031c0:	e7f8      	b.n	80031b4 <__sseek+0x18>
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	ffffefff 	.word	0xffffefff

080031c8 <__sclose>:
 80031c8:	b510      	push	{r4, lr}
 80031ca:	230e      	movs	r3, #14
 80031cc:	5ec9      	ldrsh	r1, [r1, r3]
 80031ce:	f000 f815 	bl	80031fc <_close_r>
 80031d2:	bd10      	pop	{r4, pc}

080031d4 <_write_r>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	0004      	movs	r4, r0
 80031d8:	0008      	movs	r0, r1
 80031da:	0011      	movs	r1, r2
 80031dc:	001a      	movs	r2, r3
 80031de:	2300      	movs	r3, #0
 80031e0:	4d05      	ldr	r5, [pc, #20]	; (80031f8 <_write_r+0x24>)
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	f000 f8b6 	bl	8003354 <_write>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d103      	bne.n	80031f4 <_write_r+0x20>
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d000      	beq.n	80031f4 <_write_r+0x20>
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	200002d8 	.word	0x200002d8

080031fc <_close_r>:
 80031fc:	2300      	movs	r3, #0
 80031fe:	b570      	push	{r4, r5, r6, lr}
 8003200:	4d06      	ldr	r5, [pc, #24]	; (800321c <_close_r+0x20>)
 8003202:	0004      	movs	r4, r0
 8003204:	0008      	movs	r0, r1
 8003206:	602b      	str	r3, [r5, #0]
 8003208:	f000 f856 	bl	80032b8 <_close>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d103      	bne.n	8003218 <_close_r+0x1c>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d000      	beq.n	8003218 <_close_r+0x1c>
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	bd70      	pop	{r4, r5, r6, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	200002d8 	.word	0x200002d8

08003220 <_fstat_r>:
 8003220:	2300      	movs	r3, #0
 8003222:	b570      	push	{r4, r5, r6, lr}
 8003224:	4d06      	ldr	r5, [pc, #24]	; (8003240 <_fstat_r+0x20>)
 8003226:	0004      	movs	r4, r0
 8003228:	0008      	movs	r0, r1
 800322a:	0011      	movs	r1, r2
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	f000 f84b 	bl	80032c8 <_fstat>
 8003232:	1c43      	adds	r3, r0, #1
 8003234:	d103      	bne.n	800323e <_fstat_r+0x1e>
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d000      	beq.n	800323e <_fstat_r+0x1e>
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	200002d8 	.word	0x200002d8

08003244 <_isatty_r>:
 8003244:	2300      	movs	r3, #0
 8003246:	b570      	push	{r4, r5, r6, lr}
 8003248:	4d06      	ldr	r5, [pc, #24]	; (8003264 <_isatty_r+0x20>)
 800324a:	0004      	movs	r4, r0
 800324c:	0008      	movs	r0, r1
 800324e:	602b      	str	r3, [r5, #0]
 8003250:	f000 f852 	bl	80032f8 <_isatty>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d103      	bne.n	8003260 <_isatty_r+0x1c>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d000      	beq.n	8003260 <_isatty_r+0x1c>
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	bd70      	pop	{r4, r5, r6, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	200002d8 	.word	0x200002d8

08003268 <_lseek_r>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	0004      	movs	r4, r0
 800326c:	0008      	movs	r0, r1
 800326e:	0011      	movs	r1, r2
 8003270:	001a      	movs	r2, r3
 8003272:	2300      	movs	r3, #0
 8003274:	4d05      	ldr	r5, [pc, #20]	; (800328c <_lseek_r+0x24>)
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	f000 f84e 	bl	8003318 <_lseek>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d103      	bne.n	8003288 <_lseek_r+0x20>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d000      	beq.n	8003288 <_lseek_r+0x20>
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	200002d8 	.word	0x200002d8

08003290 <_read_r>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	0004      	movs	r4, r0
 8003294:	0008      	movs	r0, r1
 8003296:	0011      	movs	r1, r2
 8003298:	001a      	movs	r2, r3
 800329a:	2300      	movs	r3, #0
 800329c:	4d05      	ldr	r5, [pc, #20]	; (80032b4 <_read_r+0x24>)
 800329e:	602b      	str	r3, [r5, #0]
 80032a0:	f000 f842 	bl	8003328 <_read>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d103      	bne.n	80032b0 <_read_r+0x20>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d000      	beq.n	80032b0 <_read_r+0x20>
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	bd70      	pop	{r4, r5, r6, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	200002d8 	.word	0x200002d8

080032b8 <_close>:
 80032b8:	2258      	movs	r2, #88	; 0x58
 80032ba:	2001      	movs	r0, #1
 80032bc:	4b01      	ldr	r3, [pc, #4]	; (80032c4 <_close+0xc>)
 80032be:	4240      	negs	r0, r0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	4770      	bx	lr
 80032c4:	200002d8 	.word	0x200002d8

080032c8 <_fstat>:
 80032c8:	2258      	movs	r2, #88	; 0x58
 80032ca:	2001      	movs	r0, #1
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <_fstat+0xc>)
 80032ce:	4240      	negs	r0, r0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	4770      	bx	lr
 80032d4:	200002d8 	.word	0x200002d8

080032d8 <_getpid>:
 80032d8:	2258      	movs	r2, #88	; 0x58
 80032da:	2001      	movs	r0, #1
 80032dc:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <_getpid+0xc>)
 80032de:	4240      	negs	r0, r0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	4770      	bx	lr
 80032e4:	200002d8 	.word	0x200002d8

080032e8 <_gettimeofday>:
 80032e8:	2258      	movs	r2, #88	; 0x58
 80032ea:	2001      	movs	r0, #1
 80032ec:	4b01      	ldr	r3, [pc, #4]	; (80032f4 <_gettimeofday+0xc>)
 80032ee:	4240      	negs	r0, r0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	4770      	bx	lr
 80032f4:	200002d8 	.word	0x200002d8

080032f8 <_isatty>:
 80032f8:	2258      	movs	r2, #88	; 0x58
 80032fa:	4b02      	ldr	r3, [pc, #8]	; (8003304 <_isatty+0xc>)
 80032fc:	2000      	movs	r0, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	4770      	bx	lr
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	200002d8 	.word	0x200002d8

08003308 <_kill>:
 8003308:	2258      	movs	r2, #88	; 0x58
 800330a:	2001      	movs	r0, #1
 800330c:	4b01      	ldr	r3, [pc, #4]	; (8003314 <_kill+0xc>)
 800330e:	4240      	negs	r0, r0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	4770      	bx	lr
 8003314:	200002d8 	.word	0x200002d8

08003318 <_lseek>:
 8003318:	2258      	movs	r2, #88	; 0x58
 800331a:	2001      	movs	r0, #1
 800331c:	4b01      	ldr	r3, [pc, #4]	; (8003324 <_lseek+0xc>)
 800331e:	4240      	negs	r0, r0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	4770      	bx	lr
 8003324:	200002d8 	.word	0x200002d8

08003328 <_read>:
 8003328:	2258      	movs	r2, #88	; 0x58
 800332a:	2001      	movs	r0, #1
 800332c:	4b01      	ldr	r3, [pc, #4]	; (8003334 <_read+0xc>)
 800332e:	4240      	negs	r0, r0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	4770      	bx	lr
 8003334:	200002d8 	.word	0x200002d8

08003338 <_sbrk>:
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <_sbrk+0x14>)
 800333a:	0003      	movs	r3, r0
 800333c:	6810      	ldr	r0, [r2, #0]
 800333e:	2800      	cmp	r0, #0
 8003340:	d002      	beq.n	8003348 <_sbrk+0x10>
 8003342:	18c3      	adds	r3, r0, r3
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4770      	bx	lr
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <_sbrk+0x18>)
 800334a:	e7fa      	b.n	8003342 <_sbrk+0xa>
 800334c:	200002e0 	.word	0x200002e0
 8003350:	200002e8 	.word	0x200002e8

08003354 <_write>:
 8003354:	2258      	movs	r2, #88	; 0x58
 8003356:	2001      	movs	r0, #1
 8003358:	4b01      	ldr	r3, [pc, #4]	; (8003360 <_write+0xc>)
 800335a:	4240      	negs	r0, r0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	4770      	bx	lr
 8003360:	200002d8 	.word	0x200002d8

08003364 <_exit>:
 8003364:	e7fe      	b.n	8003364 <_exit>
 8003366:	46c0      	nop			; (mov r8, r8)

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr

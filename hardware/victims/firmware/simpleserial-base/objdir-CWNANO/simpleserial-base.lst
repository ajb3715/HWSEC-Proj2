   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"simpleserial-base.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "simpleserial-base.c"
  18              		.section	.text.get_key,"ax",%progbits
  19              		.align	1
  20              		.p2align 2,,3
  21              		.global	get_key
  22              		.syntax unified
  23              		.code	16
  24              		.thumb_func
  26              	get_key:
  27              	.LVL0:
  28              	.LFB3:
   1:simpleserial-base.c **** /*
   2:simpleserial-base.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-base.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:simpleserial-base.c **** 
   5:simpleserial-base.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-base.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-base.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-base.c ****     (at your option) any later version.
   9:simpleserial-base.c **** 
  10:simpleserial-base.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-base.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-base.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-base.c ****     GNU General Public License for more details.
  14:simpleserial-base.c **** 
  15:simpleserial-base.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-base.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-base.c **** */
  18:simpleserial-base.c **** 
  19:simpleserial-base.c **** #include "hal.h"
  20:simpleserial-base.c **** #include <stdint.h>
  21:simpleserial-base.c **** #include "simpleserial.h"
  22:simpleserial-base.c **** #include "AES_128.h"
  23:simpleserial-base.c **** #include <time.h>
  24:simpleserial-base.c **** 
  25:simpleserial-base.c **** unsigned char StateArray [4][4];
  26:simpleserial-base.c **** unsigned char ExpandedKey[11][4][4];
  27:simpleserial-base.c **** unsigned char ST_Matrix [4][4];
  28:simpleserial-base.c **** unsigned char Mask_Matrix[4][4];
  29:simpleserial-base.c **** unsigned char S_Matrix[4][4];
  30:simpleserial-base.c **** 
  31:simpleserial-base.c **** unsigned char key_entered = 0;
  32:simpleserial-base.c **** unsigned char Key[4][4]= {  {0x00, 0x00, 0x00, 0x00},
  33:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  34:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  35:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00} };
  36:simpleserial-base.c **** 
  37:simpleserial-base.c **** unsigned char PlainText[4][4]  = {  {0x00, 0x00, 0x00, 0x00},
  38:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  39:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  40:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00} };
  41:simpleserial-base.c **** 
  42:simpleserial-base.c **** void AESRound(unsigned int StateArray[4],unsigned int Key [4] );
  43:simpleserial-base.c **** 
  44:simpleserial-base.c **** void encrypt();
  45:simpleserial-base.c **** uint8_t get_key(uint8_t* k, uint8_t len)
  46:simpleserial-base.c **** {
  29              		.loc 1 46 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  47:simpleserial-base.c **** 	memcpy(Key, k, 16);
  33              		.loc 1 47 2 view .LVU1
  46:simpleserial-base.c **** 	memcpy(Key, k, 16);
  34              		.loc 1 46 1 is_stmt 0 view .LVU2
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 47 2 view .LVU3
  41 0002 044B     		ldr	r3, .L3
  46:simpleserial-base.c **** 	memcpy(Key, k, 16);
  42              		.loc 1 46 1 view .LVU4
  43 0004 0100     		movs	r1, r0
  44              	.LVL1:
  48:simpleserial-base.c **** 	return 0x00;
  49:simpleserial-base.c **** }
  45              		.loc 1 49 1 view .LVU5
  46              		@ sp needed
  47:simpleserial-base.c **** 	return 0x00;
  47              		.loc 1 47 2 view .LVU6
  48 0006 1022     		movs	r2, #16
  49 0008 1800     		movs	r0, r3
  50              	.LVL2:
  47:simpleserial-base.c **** 	return 0x00;
  51              		.loc 1 47 2 view .LVU7
  52 000a FFF7FEFF 		bl	memcpy
  53              	.LVL3:
  48:simpleserial-base.c **** 	return 0x00;
  54              		.loc 1 48 2 is_stmt 1 view .LVU8
  55              		.loc 1 49 1 is_stmt 0 view .LVU9
  56 000e 0020     		movs	r0, #0
  57 0010 10BD     		pop	{r4, pc}
  58              	.L4:
  59 0012 C046     		.align	2
  60              	.L3:
  61 0014 00000000 		.word	.LANCHOR0
  62              		.cfi_endproc
  63              	.LFE3:
  65              		.section	.text.encrypt,"ax",%progbits
  66              		.align	1
  67              		.p2align 2,,3
  68              		.global	encrypt
  69              		.syntax unified
  70              		.code	16
  71              		.thumb_func
  73              	encrypt:
  74              	.LFB4:
  50:simpleserial-base.c **** 
  51:simpleserial-base.c **** void encrypt(){
  75              		.loc 1 51 15 is_stmt 1 view -0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  52:simpleserial-base.c **** 	//generate 16 random values for the mask
  53:simpleserial-base.c **** 	srand(time(NULL));
  79              		.loc 1 53 2 view .LVU11
  51:simpleserial-base.c **** 	//generate 16 random values for the mask
  80              		.loc 1 51 15 is_stmt 0 view .LVU12
  81 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 20
  84              		.cfi_offset 4, -20
  85              		.cfi_offset 5, -16
  86              		.cfi_offset 6, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 D646     		mov	lr, r10
  90 0004 4646     		mov	r6, r8
  91 0006 4F46     		mov	r7, r9
  92              		.loc 1 53 2 view .LVU13
  93 0008 0020     		movs	r0, #0
  51:simpleserial-base.c **** 	//generate 16 random values for the mask
  94              		.loc 1 51 15 view .LVU14
  95 000a C0B5     		push	{r6, r7, lr}
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 32
  98              		.cfi_offset 8, -32
  99              		.cfi_offset 9, -28
 100              		.cfi_offset 10, -24
 101              		.loc 1 53 2 view .LVU15
 102 000c FFF7FEFF 		bl	time
 103              	.LVL4:
 104              		.loc 1 53 2 discriminator 1 view .LVU16
 105 0010 FFF7FEFF 		bl	srand
 106              	.LVL5:
  54:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 107              		.loc 1 54 2 is_stmt 1 view .LVU17
 108              	.LBB4:
 109              		.loc 1 54 7 view .LVU18
 110              		.loc 1 54 20 discriminator 1 view .LVU19
 111 0014 2023     		movs	r3, #32
 112 0016 424E     		ldr	r6, .L14
 113 0018 9846     		mov	r8, r3
 114 001a 3500     		movs	r5, r6
 115              	.LBB5:
 116              	.LBB6:
  55:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
  56:simpleserial-base.c **** 			Mask_Matrix[i][j] = rand() % 256;
 117              		.loc 1 56 31 is_stmt 0 discriminator 1 view .LVU20
 118 001c FF27     		movs	r7, #255
 119 001e 1035     		adds	r5, r5, #16
 120 0020 B044     		add	r8, r8, r6
 121              	.LVL6:
 122              	.L6:
 123              		.loc 1 56 31 discriminator 1 view .LVU21
 124              	.LBE6:
  55:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 125              		.loc 1 55 19 is_stmt 1 discriminator 1 view .LVU22
  55:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 126              		.loc 1 55 11 is_stmt 0 view .LVU23
 127 0022 0024     		movs	r4, #0
 128              	.LVL7:
 129              	.L7:
 130              	.LBB7:
 131              		.loc 1 56 4 is_stmt 1 view .LVU24
 132              		.loc 1 56 24 is_stmt 0 view .LVU25
 133 0024 FFF7FEFF 		bl	rand
 134              	.LVL8:
 135              		.loc 1 56 31 discriminator 1 view .LVU26
 136 0028 C317     		asrs	r3, r0, #31
 137 002a 1B0E     		lsrs	r3, r3, #24
 138 002c C018     		adds	r0, r0, r3
 139 002e 3840     		ands	r0, r7
 140 0030 C01A     		subs	r0, r0, r3
 141              		.loc 1 56 22 discriminator 1 view .LVU27
 142 0032 2855     		strb	r0, [r5, r4]
 143              	.LBE7:
  55:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 144              		.loc 1 55 24 is_stmt 1 discriminator 3 view .LVU28
 145 0034 0134     		adds	r4, r4, #1
 146              	.LVL9:
  55:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 147              		.loc 1 55 19 discriminator 1 view .LVU29
 148 0036 042C     		cmp	r4, #4
 149 0038 F4D1     		bne	.L7
 150              	.LBE5:
  54:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 151              		.loc 1 54 27 discriminator 2 view .LVU30
  54:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 152              		.loc 1 54 20 discriminator 1 view .LVU31
 153 003a 0435     		adds	r5, r5, #4
 154 003c 4545     		cmp	r5, r8
 155 003e F0D1     		bne	.L6
 156              	.LBE4:
  57:simpleserial-base.c **** 		}
  58:simpleserial-base.c **** 	}
  59:simpleserial-base.c **** 
  60:simpleserial-base.c **** 	AddMatrices(Mask_Matrix, PlainText, ST_Matrix);
 157              		.loc 1 60 2 view .LVU32
 158 0040 3023     		movs	r3, #48
 159 0042 3400     		movs	r4, r6
 160              	.LVL10:
 161              		.loc 1 60 2 is_stmt 0 view .LVU33
 162 0044 9846     		mov	r8, r3
 163 0046 3700     		movs	r7, r6
 164 0048 B044     		add	r8, r8, r6
 165 004a 2034     		adds	r4, r4, #32
 166 004c 1037     		adds	r7, r7, #16
 167 004e 2200     		movs	r2, r4
 168 0050 4146     		mov	r1, r8
 169 0052 3800     		movs	r0, r7
 170 0054 FFF7FEFF 		bl	AddMatrices
 171              	.LVL11:
  61:simpleserial-base.c **** 
  62:simpleserial-base.c **** 	ExpandKey(Key, ExpandedKey);
 172              		.loc 1 62 2 is_stmt 1 view .LVU34
 173 0058 324B     		ldr	r3, .L14+4
 174 005a 3000     		movs	r0, r6
 175 005c 1900     		movs	r1, r3
 176 005e 9946     		mov	r9, r3
 177 0060 FFF7FEFF 		bl	ExpandKey
 178              	.LVL12:
  63:simpleserial-base.c **** 	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 179              		.loc 1 63 2 view .LVU35
 180 0064 3200     		movs	r2, r6
 181 0066 4346     		mov	r3, r8
 182 0068 4032     		adds	r2, r2, #64
 183 006a 23CB     		ldmia	r3!, {r0, r1, r5}
 184 006c 23C2     		stmia	r2!, {r0, r1, r5}
  64:simpleserial-base.c **** 
  65:simpleserial-base.c **** 	AddRoundKey(ExpandedKey[0], StateArray);
 185              		.loc 1 65 2 is_stmt 0 view .LVU36
 186 006e 3100     		movs	r1, r6
  63:simpleserial-base.c **** 	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 187              		.loc 1 63 2 view .LVU37
 188 0070 1B68     		ldr	r3, [r3]
 189              		.loc 1 65 2 view .LVU38
 190 0072 4846     		mov	r0, r9
  63:simpleserial-base.c **** 	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 191              		.loc 1 63 2 view .LVU39
 192 0074 1360     		str	r3, [r2]
 193              		.loc 1 65 2 is_stmt 1 view .LVU40
 194 0076 4031     		adds	r1, r1, #64
 195 0078 FFF7FEFF 		bl	AddRoundKey
 196              	.LVL13:
  66:simpleserial-base.c **** 
  67:simpleserial-base.c **** 	AddRoundKey(ExpandedKey[0], ST_Matrix);
 197              		.loc 1 67 2 view .LVU41
 198 007c 4846     		mov	r0, r9
 199 007e 2100     		movs	r1, r4
 200 0080 FFF7FEFF 		bl	AddRoundKey
 201              	.LVL14:
  68:simpleserial-base.c **** 	int i;
 202              		.loc 1 68 2 view .LVU42
  69:simpleserial-base.c **** 	for(i=1; i<=10; i++){
 203              		.loc 1 69 2 view .LVU43
 204              		.loc 1 69 12 discriminator 1 view .LVU44
 205 0084 1023     		movs	r3, #16
 206 0086 9846     		mov	r8, r3
 207 0088 9033     		adds	r3, r3, #144
 208 008a 9A46     		mov	r10, r3
  70:simpleserial-base.c **** 
  71:simpleserial-base.c **** 		//Unmask input
  72:simpleserial-base.c **** 		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 209              		.loc 1 72 3 is_stmt 0 view .LVU45
 210 008c 503B     		subs	r3, r3, #80
 211 008e C844     		add	r8, r8, r9
 212 0090 CA44     		add	r10, r10, r9
 213 0092 9946     		mov	r9, r3
 214 0094 B144     		add	r9, r9, r6
 215              	.LVL15:
 216              	.L10:
 217              		.loc 1 72 3 is_stmt 1 view .LVU46
  73:simpleserial-base.c **** 		//Apply Sbox
  74:simpleserial-base.c **** 		SubBytes(S_Matrix);
  75:simpleserial-base.c **** 		SubBytes(StateArray);
 218              		.loc 1 75 3 is_stmt 0 view .LVU47
 219 0096 3500     		movs	r5, r6
  72:simpleserial-base.c **** 		//Apply Sbox
 220              		.loc 1 72 3 view .LVU48
 221 0098 4A46     		mov	r2, r9
 222 009a 3900     		movs	r1, r7
 223 009c 2000     		movs	r0, r4
 224 009e FFF7FEFF 		bl	AddMatrices
 225              	.LVL16:
  74:simpleserial-base.c **** 		SubBytes(StateArray);
 226              		.loc 1 74 3 is_stmt 1 view .LVU49
 227              		.loc 1 75 3 is_stmt 0 view .LVU50
 228 00a2 4035     		adds	r5, r5, #64
  74:simpleserial-base.c **** 		SubBytes(StateArray);
 229              		.loc 1 74 3 view .LVU51
 230 00a4 4846     		mov	r0, r9
 231 00a6 FFF7FEFF 		bl	SubBytes
 232              	.LVL17:
 233              		.loc 1 75 3 is_stmt 1 view .LVU52
 234 00aa 2800     		movs	r0, r5
 235 00ac FFF7FEFF 		bl	SubBytes
 236              	.LVL18:
  76:simpleserial-base.c **** 		//Remask Output
  77:simpleserial-base.c **** 		AddMatrices(S_Matrix, Mask_Matrix, ST_Matrix);
 237              		.loc 1 77 3 view .LVU53
 238 00b0 2200     		movs	r2, r4
 239 00b2 3900     		movs	r1, r7
 240 00b4 4846     		mov	r0, r9
 241 00b6 FFF7FEFF 		bl	AddMatrices
 242              	.LVL19:
  78:simpleserial-base.c **** 
  79:simpleserial-base.c **** 		ShiftRows(StateArray);
 243              		.loc 1 79 3 view .LVU54
 244 00ba 2800     		movs	r0, r5
 245 00bc FFF7FEFF 		bl	ShiftRows
 246              	.LVL20:
  80:simpleserial-base.c **** 		ShiftRows(ST_Matrix);
 247              		.loc 1 80 3 view .LVU55
 248 00c0 2000     		movs	r0, r4
 249 00c2 FFF7FEFF 		bl	ShiftRows
 250              	.LVL21:
  81:simpleserial-base.c **** 		ShiftRows(Mask_Matrix);
 251              		.loc 1 81 3 view .LVU56
 252 00c6 3800     		movs	r0, r7
 253 00c8 FFF7FEFF 		bl	ShiftRows
 254              	.LVL22:
  82:simpleserial-base.c **** 
  83:simpleserial-base.c **** 		if(i!=10){
 255              		.loc 1 83 3 view .LVU57
 256              		.loc 1 83 5 is_stmt 0 view .LVU58
 257 00cc D045     		cmp	r8, r10
 258 00ce 14D0     		beq	.L13
  84:simpleserial-base.c **** 			MixColumns(StateArray);
 259              		.loc 1 84 4 is_stmt 1 view .LVU59
 260 00d0 2800     		movs	r0, r5
 261 00d2 FFF7FEFF 		bl	MixColumns
 262              	.LVL23:
  85:simpleserial-base.c **** 			MixColumns(ST_Matrix);
 263              		.loc 1 85 4 view .LVU60
 264 00d6 2000     		movs	r0, r4
 265 00d8 FFF7FEFF 		bl	MixColumns
 266              	.LVL24:
  86:simpleserial-base.c **** 			MixColumns(Mask_Matrix);
 267              		.loc 1 86 4 view .LVU61
 268 00dc 3800     		movs	r0, r7
 269 00de FFF7FEFF 		bl	MixColumns
 270              	.LVL25:
  87:simpleserial-base.c **** 		}
  88:simpleserial-base.c **** 
  89:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], StateArray);
 271              		.loc 1 89 3 view .LVU62
 272 00e2 4046     		mov	r0, r8
 273 00e4 2900     		movs	r1, r5
 274 00e6 FFF7FEFF 		bl	AddRoundKey
 275              	.LVL26:
  90:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 276              		.loc 1 90 3 view .LVU63
 277 00ea 4046     		mov	r0, r8
 278 00ec 2100     		movs	r1, r4
 279 00ee FFF7FEFF 		bl	AddRoundKey
 280              	.LVL27:
  69:simpleserial-base.c **** 
 281              		.loc 1 69 19 discriminator 2 view .LVU64
  69:simpleserial-base.c **** 
 282              		.loc 1 69 12 discriminator 1 view .LVU65
 283 00f2 1023     		movs	r3, #16
 284 00f4 9C46     		mov	ip, r3
 285 00f6 E044     		add	r8, r8, ip
 286 00f8 CDE7     		b	.L10
 287              	.L13:
  89:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 288              		.loc 1 89 3 view .LVU66
 289 00fa 0B4E     		ldr	r6, .L14+8
 290 00fc 2900     		movs	r1, r5
  91:simpleserial-base.c **** 	}
  92:simpleserial-base.c **** 	//Do unmasking stuff
  93:simpleserial-base.c **** 	AddMatrices(ST_Matrix, Mask_Matrix, StateArray);
  94:simpleserial-base.c **** }	
 291              		.loc 1 94 1 is_stmt 0 view .LVU67
 292              		@ sp needed
  89:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 293              		.loc 1 89 3 view .LVU68
 294 00fe 3000     		movs	r0, r6
 295 0100 FFF7FEFF 		bl	AddRoundKey
 296              	.LVL28:
  90:simpleserial-base.c **** 	}
 297              		.loc 1 90 3 is_stmt 1 view .LVU69
 298 0104 3000     		movs	r0, r6
 299 0106 2100     		movs	r1, r4
 300 0108 FFF7FEFF 		bl	AddRoundKey
 301              	.LVL29:
  69:simpleserial-base.c **** 
 302              		.loc 1 69 19 discriminator 2 view .LVU70
  69:simpleserial-base.c **** 
 303              		.loc 1 69 12 discriminator 1 view .LVU71
  93:simpleserial-base.c **** }	
 304              		.loc 1 93 2 view .LVU72
 305 010c 2A00     		movs	r2, r5
 306 010e 3900     		movs	r1, r7
 307 0110 2000     		movs	r0, r4
 308 0112 FFF7FEFF 		bl	AddMatrices
 309              	.LVL30:
 310              		.loc 1 94 1 is_stmt 0 view .LVU73
 311 0116 E0BC     		pop	{r5, r6, r7}
 312 0118 BA46     		mov	r10, r7
 313 011a B146     		mov	r9, r6
 314 011c A846     		mov	r8, r5
 315 011e F0BD     		pop	{r4, r5, r6, r7, pc}
 316              	.L15:
 317              		.align	2
 318              	.L14:
 319 0120 00000000 		.word	.LANCHOR0
 320 0124 00000000 		.word	ExpandedKey
 321 0128 A0000000 		.word	ExpandedKey+160
 322              		.cfi_endproc
 323              	.LFE4:
 325              		.section	.text.aes,"ax",%progbits
 326              		.align	1
 327              		.p2align 2,,3
 328              		.global	aes
 329              		.syntax unified
 330              		.code	16
 331              		.thumb_func
 333              	aes:
 334              	.LVL31:
 335              	.LFB7:
  95:simpleserial-base.c **** 
  96:simpleserial-base.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
  97:simpleserial-base.c **** {
  98:simpleserial-base.c **** 	/**********************************
  99:simpleserial-base.c **** 	* Start user-specific code here. */
 100:simpleserial-base.c **** 	trigger_high();
 101:simpleserial-base.c **** 
 102:simpleserial-base.c **** 	if ( key_entered == 1 ){
 103:simpleserial-base.c **** 
 104:simpleserial-base.c **** 	memcpy(PlainText, pt, 16);
 105:simpleserial-base.c **** 
 106:simpleserial-base.c **** 	encrypt();
 107:simpleserial-base.c **** 
 108:simpleserial-base.c **** 	pt = (uint8_t*)StateArray;
 109:simpleserial-base.c **** 
 110:simpleserial-base.c **** 	trigger_low();
 111:simpleserial-base.c **** 
 112:simpleserial-base.c **** 	simpleserial_put('r', 16, pt);
 113:simpleserial-base.c **** 
 114:simpleserial-base.c **** 	return 0x00;
 115:simpleserial-base.c **** 
 116:simpleserial-base.c **** 	}
 117:simpleserial-base.c **** 	else{
 118:simpleserial-base.c **** 		memcpy(Key, pt, 16);
 119:simpleserial-base.c **** 		key_entered = 1;
 120:simpleserial-base.c **** 
 121:simpleserial-base.c **** 		trigger_low();
 122:simpleserial-base.c **** 
 123:simpleserial-base.c **** 		simpleserial_put('r', 16, pt);
 124:simpleserial-base.c **** 		return 0x00;
 125:simpleserial-base.c **** 	}
 126:simpleserial-base.c **** 
 127:simpleserial-base.c **** }
 128:simpleserial-base.c **** 
 129:simpleserial-base.c **** uint8_t reset(uint8_t* x, uint8_t len)
 130:simpleserial-base.c **** {
 131:simpleserial-base.c **** 	// Reset key here if needed
 132:simpleserial-base.c **** 	return 0x00;
 133:simpleserial-base.c **** }
 134:simpleserial-base.c **** 
 135:simpleserial-base.c **** #if SS_VER == SS_VER_2_1
 136:simpleserial-base.c **** uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
 137:simpleserial-base.c **** {
 336              		.loc 1 137 1 is_stmt 1 view -0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 138:simpleserial-base.c ****     uint8_t req_len = 0;
 340              		.loc 1 138 5 view .LVU75
 139:simpleserial-base.c ****     uint8_t err = 0;
 341              		.loc 1 139 5 view .LVU76
 140:simpleserial-base.c **** 
 141:simpleserial-base.c ****     if (scmd & 0x02) {
 342              		.loc 1 141 5 view .LVU77
 137:simpleserial-base.c ****     uint8_t req_len = 0;
 343              		.loc 1 137 1 is_stmt 0 view .LVU78
 344 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 345              	.LCFI3:
 346              		.cfi_def_cfa_offset 24
 347              		.cfi_offset 3, -24
 348              		.cfi_offset 4, -20
 349              		.cfi_offset 5, -16
 350              		.cfi_offset 6, -12
 351              		.cfi_offset 7, -8
 352              		.cfi_offset 14, -4
 353 0002 0226     		movs	r6, #2
 354 0004 4746     		mov	r7, r8
 355 0006 CE46     		mov	lr, r9
 356 0008 3000     		movs	r0, r6
 357              	.LVL32:
 137:simpleserial-base.c ****     uint8_t req_len = 0;
 358              		.loc 1 137 1 view .LVU79
 359 000a 80B5     		push	{r7, lr}
 360              	.LCFI4:
 361              		.cfi_def_cfa_offset 32
 362              		.cfi_offset 8, -32
 363              		.cfi_offset 9, -28
 137:simpleserial-base.c ****     uint8_t req_len = 0;
 364              		.loc 1 137 1 view .LVU80
 365 000c 0C00     		movs	r4, r1
 366 000e 1500     		movs	r5, r2
 367 0010 1F00     		movs	r7, r3
 368 0012 0840     		ands	r0, r1
 369              		.loc 1 141 8 view .LVU81
 370 0014 0E42     		tst	r6, r1
 371 0016 2FD0     		beq	.L24
 142:simpleserial-base.c ****         req_len += 16;
 372              		.loc 1 142 9 is_stmt 1 view .LVU82
 373              	.LVL33:
 143:simpleserial-base.c ****         if (req_len > len) {
 374              		.loc 1 143 9 view .LVU83
 375              		.loc 1 143 12 is_stmt 0 view .LVU84
 376 0018 0F2A     		cmp	r2, #15
 377 001a 35D9     		bls	.L21
 144:simpleserial-base.c ****             return SS_ERR_LEN;
 145:simpleserial-base.c ****         }
 146:simpleserial-base.c ****         err = get_key(buf + req_len - 16, 16);
 378              		.loc 1 146 9 is_stmt 1 view .LVU85
 379              	.LVL34:
 380              	.LBB14:
 381              	.LBI14:
  45:simpleserial-base.c **** {
 382              		.loc 1 45 9 view .LVU86
 383              	.LBB15:
  47:simpleserial-base.c **** 	return 0x00;
 384              		.loc 1 47 2 view .LVU87
 385 001c 1022     		movs	r2, #16
 386              	.LVL35:
  47:simpleserial-base.c **** 	return 0x00;
 387              		.loc 1 47 2 is_stmt 0 view .LVU88
 388 001e 1900     		movs	r1, r3
 389              	.LVL36:
  47:simpleserial-base.c **** 	return 0x00;
 390              		.loc 1 47 2 view .LVU89
 391 0020 2348     		ldr	r0, .L30
 392 0022 FFF7FEFF 		bl	memcpy
 393              	.LVL37:
  48:simpleserial-base.c **** }
 394              		.loc 1 48 2 is_stmt 1 view .LVU90
  48:simpleserial-base.c **** }
 395              		.loc 1 48 2 is_stmt 0 view .LVU91
 396              	.LBE15:
 397              	.LBE14:
 147:simpleserial-base.c ****         if (err)
 398              		.loc 1 147 9 is_stmt 1 view .LVU92
 148:simpleserial-base.c ****             return err;
 149:simpleserial-base.c ****     }
 150:simpleserial-base.c ****     if (scmd & 0x01) {
 399              		.loc 1 150 8 is_stmt 0 view .LVU93
 400 0026 0126     		movs	r6, #1
 401 0028 2022     		movs	r2, #32
 402 002a 1023     		movs	r3, #16
 403 002c 9046     		mov	r8, r2
 142:simpleserial-base.c ****         if (req_len > len) {
 404              		.loc 1 142 17 view .LVU94
 405 002e 1020     		movs	r0, #16
 406              		.loc 1 150 5 is_stmt 1 view .LVU95
 407              		.loc 1 150 8 is_stmt 0 view .LVU96
 408 0030 2642     		tst	r6, r4
 409 0032 19D0     		beq	.L20
 151:simpleserial-base.c ****         req_len += 16;
 410              		.loc 1 151 9 is_stmt 1 view .LVU97
 411              	.LVL38:
 152:simpleserial-base.c ****         if (req_len > len) {
 412              		.loc 1 152 9 view .LVU98
 413              		.loc 1 152 12 is_stmt 0 view .LVU99
 414 0034 4545     		cmp	r5, r8
 415 0036 27D3     		bcc	.L21
 416              	.LVL39:
 417              	.L29:
 153:simpleserial-base.c ****             return SS_ERR_LEN;
 154:simpleserial-base.c ****         }
 155:simpleserial-base.c ****         err = get_pt(buf + req_len - 16, 16);
 418              		.loc 1 155 9 is_stmt 1 view .LVU100
 419              		.loc 1 155 15 is_stmt 0 view .LVU101
 420 0038 FC18     		adds	r4, r7, r3
 421              	.LVL40:
 422              	.LBB16:
 423              	.LBI16:
  96:simpleserial-base.c **** {
 424              		.loc 1 96 9 is_stmt 1 view .LVU102
 425              	.LBB17:
 100:simpleserial-base.c **** 
 426              		.loc 1 100 2 view .LVU103
 427 003a FFF7FEFF 		bl	trigger_high
 428              	.LVL41:
 102:simpleserial-base.c **** 
 429              		.loc 1 102 2 view .LVU104
 102:simpleserial-base.c **** 
 430              		.loc 1 102 19 is_stmt 0 view .LVU105
 431 003e 6023     		movs	r3, #96
 432 0040 1B4F     		ldr	r7, .L30
 433              	.LVL42:
 102:simpleserial-base.c **** 
 434              		.loc 1 102 19 view .LVU106
 435 0042 9946     		mov	r9, r3
 102:simpleserial-base.c **** 
 436              		.loc 1 102 5 view .LVU107
 437 0044 FB5C     		ldrb	r3, [r7, r3]
 438 0046 012B     		cmp	r3, #1
 439 0048 20D0     		beq	.L28
 118:simpleserial-base.c **** 		key_entered = 1;
 440              		.loc 1 118 3 is_stmt 1 view .LVU108
 441 004a 1022     		movs	r2, #16
 442 004c 2100     		movs	r1, r4
 443 004e 3800     		movs	r0, r7
 444 0050 FFF7FEFF 		bl	memcpy
 445              	.LVL43:
 119:simpleserial-base.c **** 
 446              		.loc 1 119 3 view .LVU109
 119:simpleserial-base.c **** 
 447              		.loc 1 119 15 is_stmt 0 view .LVU110
 448 0054 4B46     		mov	r3, r9
 449 0056 FE54     		strb	r6, [r7, r3]
 121:simpleserial-base.c **** 
 450              		.loc 1 121 3 is_stmt 1 view .LVU111
 451 0058 FFF7FEFF 		bl	trigger_low
 452              	.LVL44:
 123:simpleserial-base.c **** 		return 0x00;
 453              		.loc 1 123 3 view .LVU112
 454 005c 7220     		movs	r0, #114
 455 005e 2200     		movs	r2, r4
 456 0060 1021     		movs	r1, #16
 457 0062 FFF7FEFF 		bl	simpleserial_put
 458              	.LVL45:
 124:simpleserial-base.c **** 	}
 459              		.loc 1 124 3 view .LVU113
 460              	.LBE17:
 461              	.LBE16:
 151:simpleserial-base.c ****         if (req_len > len) {
 462              		.loc 1 151 17 is_stmt 0 view .LVU114
 463 0066 4046     		mov	r0, r8
 464              	.LVL46:
 465              	.L20:
 156:simpleserial-base.c ****         if (err)
 157:simpleserial-base.c ****             return err;
 158:simpleserial-base.c ****     }
 159:simpleserial-base.c **** 
 160:simpleserial-base.c ****     if (len != req_len) {
 466              		.loc 1 160 5 is_stmt 1 view .LVU115
 467              		.loc 1 160 8 is_stmt 0 view .LVU116
 468 0068 401B     		subs	r0, r0, r5
 469 006a 431E     		subs	r3, r0, #1
 470 006c 9841     		sbcs	r0, r0, r3
 471 006e 8000     		lsls	r0, r0, #2
 472              	.LVL47:
 473              	.L19:
 161:simpleserial-base.c ****         return SS_ERR_LEN;
 162:simpleserial-base.c ****     }
 163:simpleserial-base.c **** 
 164:simpleserial-base.c ****     return 0x00;
 165:simpleserial-base.c **** 
 166:simpleserial-base.c **** }
 474              		.loc 1 166 1 view .LVU117
 475              		@ sp needed
 476              	.LVL48:
 477              		.loc 1 166 1 view .LVU118
 478 0070 C0BC     		pop	{r6, r7}
 479 0072 B946     		mov	r9, r7
 480 0074 B046     		mov	r8, r6
 481 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 482              	.LVL49:
 483              	.L24:
 484              		.loc 1 166 1 view .LVU119
 485 0078 1022     		movs	r2, #16
 486              	.LVL50:
 150:simpleserial-base.c ****         req_len += 16;
 487              		.loc 1 150 8 view .LVU120
 488 007a 0126     		movs	r6, #1
 489 007c 0023     		movs	r3, #0
 490              	.LVL51:
 150:simpleserial-base.c ****         req_len += 16;
 491              		.loc 1 150 8 view .LVU121
 492 007e 9046     		mov	r8, r2
 493              	.LVL52:
 150:simpleserial-base.c ****         req_len += 16;
 494              		.loc 1 150 5 is_stmt 1 view .LVU122
 150:simpleserial-base.c ****         req_len += 16;
 495              		.loc 1 150 8 is_stmt 0 view .LVU123
 496 0080 2642     		tst	r6, r4
 497 0082 F1D0     		beq	.L20
 151:simpleserial-base.c ****         if (req_len > len) {
 498              		.loc 1 151 9 is_stmt 1 view .LVU124
 499              	.LVL53:
 152:simpleserial-base.c ****             return SS_ERR_LEN;
 500              		.loc 1 152 9 view .LVU125
 152:simpleserial-base.c ****             return SS_ERR_LEN;
 501              		.loc 1 152 12 is_stmt 0 view .LVU126
 502 0084 4545     		cmp	r5, r8
 503 0086 D7D2     		bcs	.L29
 504              	.LVL54:
 505              	.L21:
 144:simpleserial-base.c ****         }
 506              		.loc 1 144 20 view .LVU127
 507 0088 0420     		movs	r0, #4
 508 008a F1E7     		b	.L19
 509              	.LVL55:
 510              	.L28:
 511              	.LBB21:
 512              	.LBB20:
 513              	.LBB18:
 514              	.LBI18:
  96:simpleserial-base.c **** {
 515              		.loc 1 96 9 is_stmt 1 view .LVU128
 516              	.LBB19:
 104:simpleserial-base.c **** 
 517              		.loc 1 104 2 view .LVU129
 518 008c 3800     		movs	r0, r7
 519 008e 1022     		movs	r2, #16
 520 0090 2100     		movs	r1, r4
 521 0092 3030     		adds	r0, r0, #48
 522 0094 FFF7FEFF 		bl	memcpy
 523              	.LVL56:
 106:simpleserial-base.c **** 
 524              		.loc 1 106 2 view .LVU130
 525 0098 FFF7FEFF 		bl	encrypt
 526              	.LVL57:
 108:simpleserial-base.c **** 
 527              		.loc 1 108 2 view .LVU131
 110:simpleserial-base.c **** 
 528              		.loc 1 110 2 view .LVU132
 529 009c FFF7FEFF 		bl	trigger_low
 530              	.LVL58:
 112:simpleserial-base.c **** 
 531              		.loc 1 112 2 view .LVU133
 532 00a0 3A00     		movs	r2, r7
 533 00a2 7220     		movs	r0, #114
 534 00a4 1021     		movs	r1, #16
 535 00a6 4032     		adds	r2, r2, #64
 536 00a8 FFF7FEFF 		bl	simpleserial_put
 537              	.LVL59:
 114:simpleserial-base.c **** 
 538              		.loc 1 114 2 view .LVU134
 114:simpleserial-base.c **** 
 539              		.loc 1 114 2 is_stmt 0 view .LVU135
 540              	.LBE19:
 541              	.LBE18:
 542              	.LBE20:
 543              	.LBE21:
 151:simpleserial-base.c ****         if (req_len > len) {
 544              		.loc 1 151 17 view .LVU136
 545 00ac 4046     		mov	r0, r8
 546 00ae DBE7     		b	.L20
 547              	.L31:
 548              		.align	2
 549              	.L30:
 550 00b0 00000000 		.word	.LANCHOR0
 551              		.cfi_endproc
 552              	.LFE7:
 554              		.section	.text.get_pt,"ax",%progbits
 555              		.align	1
 556              		.p2align 2,,3
 557              		.global	get_pt
 558              		.syntax unified
 559              		.code	16
 560              		.thumb_func
 562              	get_pt:
 563              	.LVL60:
 564              	.LFB5:
  97:simpleserial-base.c **** 	/**********************************
 565              		.loc 1 97 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 100:simpleserial-base.c **** 
 569              		.loc 1 100 2 view .LVU138
  97:simpleserial-base.c **** 	/**********************************
 570              		.loc 1 97 1 is_stmt 0 view .LVU139
 571 0000 70B5     		push	{r4, r5, r6, lr}
 572              	.LCFI5:
 573              		.cfi_def_cfa_offset 16
 574              		.cfi_offset 4, -16
 575              		.cfi_offset 5, -12
 576              		.cfi_offset 6, -8
 577              		.cfi_offset 14, -4
 102:simpleserial-base.c **** 
 578              		.loc 1 102 19 view .LVU140
 579 0002 6026     		movs	r6, #96
  97:simpleserial-base.c **** 	/**********************************
 580              		.loc 1 97 1 view .LVU141
 581 0004 0500     		movs	r5, r0
 100:simpleserial-base.c **** 
 582              		.loc 1 100 2 view .LVU142
 583 0006 FFF7FEFF 		bl	trigger_high
 584              	.LVL61:
 102:simpleserial-base.c **** 
 585              		.loc 1 102 2 is_stmt 1 view .LVU143
 102:simpleserial-base.c **** 
 586              		.loc 1 102 19 is_stmt 0 view .LVU144
 587 000a 124C     		ldr	r4, .L36
 102:simpleserial-base.c **** 
 588              		.loc 1 102 5 view .LVU145
 589 000c A35D     		ldrb	r3, [r4, r6]
 590 000e 012B     		cmp	r3, #1
 591 0010 0FD0     		beq	.L35
 118:simpleserial-base.c **** 		key_entered = 1;
 592              		.loc 1 118 3 is_stmt 1 view .LVU146
 593 0012 1022     		movs	r2, #16
 594 0014 2900     		movs	r1, r5
 595 0016 2000     		movs	r0, r4
 596 0018 FFF7FEFF 		bl	memcpy
 597              	.LVL62:
 119:simpleserial-base.c **** 
 598              		.loc 1 119 3 view .LVU147
 119:simpleserial-base.c **** 
 599              		.loc 1 119 15 is_stmt 0 view .LVU148
 600 001c 0123     		movs	r3, #1
 601 001e A355     		strb	r3, [r4, r6]
 121:simpleserial-base.c **** 
 602              		.loc 1 121 3 is_stmt 1 view .LVU149
 603 0020 FFF7FEFF 		bl	trigger_low
 604              	.LVL63:
 123:simpleserial-base.c **** 		return 0x00;
 605              		.loc 1 123 3 view .LVU150
 606 0024 2A00     		movs	r2, r5
 607 0026 1021     		movs	r1, #16
 608 0028 7220     		movs	r0, #114
 609 002a FFF7FEFF 		bl	simpleserial_put
 610              	.LVL64:
 124:simpleserial-base.c **** 	}
 611              		.loc 1 124 3 view .LVU151
 612              	.L34:
 127:simpleserial-base.c **** 
 613              		.loc 1 127 1 is_stmt 0 view .LVU152
 614              		@ sp needed
 615 002e 0020     		movs	r0, #0
 616              	.LVL65:
 127:simpleserial-base.c **** 
 617              		.loc 1 127 1 view .LVU153
 618 0030 70BD     		pop	{r4, r5, r6, pc}
 619              	.LVL66:
 620              	.L35:
 621              	.LBB24:
 622              	.LBI24:
  96:simpleserial-base.c **** {
 623              		.loc 1 96 9 is_stmt 1 view .LVU154
 624              	.LBB25:
 104:simpleserial-base.c **** 
 625              		.loc 1 104 2 view .LVU155
 626 0032 2000     		movs	r0, r4
 627 0034 2900     		movs	r1, r5
 628 0036 1022     		movs	r2, #16
 629 0038 3030     		adds	r0, r0, #48
 630 003a FFF7FEFF 		bl	memcpy
 631              	.LVL67:
 106:simpleserial-base.c **** 
 632              		.loc 1 106 2 view .LVU156
 633 003e FFF7FEFF 		bl	encrypt
 634              	.LVL68:
 108:simpleserial-base.c **** 
 635              		.loc 1 108 2 view .LVU157
 110:simpleserial-base.c **** 
 636              		.loc 1 110 2 view .LVU158
 637 0042 FFF7FEFF 		bl	trigger_low
 638              	.LVL69:
 112:simpleserial-base.c **** 
 639              		.loc 1 112 2 view .LVU159
 640 0046 2200     		movs	r2, r4
 641 0048 1021     		movs	r1, #16
 642 004a 7220     		movs	r0, #114
 643 004c 4032     		adds	r2, r2, #64
 644 004e FFF7FEFF 		bl	simpleserial_put
 645              	.LVL70:
 114:simpleserial-base.c **** 
 646              		.loc 1 114 2 view .LVU160
 114:simpleserial-base.c **** 
 647              		.loc 1 114 2 is_stmt 0 view .LVU161
 648 0052 ECE7     		b	.L34
 649              	.L37:
 650              		.align	2
 651              	.L36:
 652 0054 00000000 		.word	.LANCHOR0
 653              	.LBE25:
 654              	.LBE24:
 655              		.cfi_endproc
 656              	.LFE5:
 658              		.section	.text.reset,"ax",%progbits
 659              		.align	1
 660              		.p2align 2,,3
 661              		.global	reset
 662              		.syntax unified
 663              		.code	16
 664              		.thumb_func
 666              	reset:
 667              	.LVL71:
 668              	.LFB6:
 130:simpleserial-base.c **** 	// Reset key here if needed
 669              		.loc 1 130 1 is_stmt 1 view -0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 132:simpleserial-base.c **** }
 674              		.loc 1 132 2 view .LVU163
 133:simpleserial-base.c **** 
 675              		.loc 1 133 1 is_stmt 0 view .LVU164
 676 0000 0020     		movs	r0, #0
 677              	.LVL72:
 133:simpleserial-base.c **** 
 678              		.loc 1 133 1 view .LVU165
 679              		@ sp needed
 680 0002 7047     		bx	lr
 681              		.cfi_endproc
 682              	.LFE6:
 684              		.section	.text.startup.main,"ax",%progbits
 685              		.align	1
 686              		.p2align 2,,3
 687              		.global	main
 688              		.syntax unified
 689              		.code	16
 690              		.thumb_func
 692              	main:
 693              	.LFB8:
 167:simpleserial-base.c **** #endif
 168:simpleserial-base.c **** 
 169:simpleserial-base.c **** int main(void)
 170:simpleserial-base.c **** {
 694              		.loc 1 170 1 is_stmt 1 view -0
 695              		.cfi_startproc
 696              		@ Volatile: function does not return.
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 171:simpleserial-base.c ****     platform_init();
 699              		.loc 1 171 5 view .LVU167
 170:simpleserial-base.c ****     platform_init();
 700              		.loc 1 170 1 is_stmt 0 view .LVU168
 701 0000 10B5     		push	{r4, lr}
 702              	.LCFI6:
 703              		.cfi_def_cfa_offset 8
 704              		.cfi_offset 4, -8
 705              		.cfi_offset 14, -4
 706              		.loc 1 171 5 view .LVU169
 707 0002 FFF7FEFF 		bl	platform_init
 708              	.LVL73:
 172:simpleserial-base.c **** 	init_uart();
 709              		.loc 1 172 2 is_stmt 1 view .LVU170
 710 0006 FFF7FEFF 		bl	init_uart
 711              	.LVL74:
 173:simpleserial-base.c **** 	trigger_setup();
 712              		.loc 1 173 2 view .LVU171
 713 000a FFF7FEFF 		bl	trigger_setup
 714              	.LVL75:
 174:simpleserial-base.c **** 
 175:simpleserial-base.c **** 	simpleserial_init();
 715              		.loc 1 175 2 view .LVU172
 716 000e FFF7FEFF 		bl	simpleserial_init
 717              	.LVL76:
 176:simpleserial-base.c **** #if SS_VER != SS_VER_2_1
 177:simpleserial-base.c **** 	simpleserial_addcmd('p', 16, get_pt);
 178:simpleserial-base.c **** 	simpleserial_addcmd('k', 16, get_key);
 179:simpleserial-base.c **** 	simpleserial_addcmd('x', 0, reset);
 180:simpleserial-base.c **** #else
 181:simpleserial-base.c ****     simpleserial_addcmd(0x01, 16, aes);
 718              		.loc 1 181 5 view .LVU173
 719 0012 1021     		movs	r1, #16
 720 0014 0120     		movs	r0, #1
 721 0016 034A     		ldr	r2, .L41
 722 0018 FFF7FEFF 		bl	simpleserial_addcmd
 723              	.LVL77:
 724              	.L40:
 182:simpleserial-base.c **** #endif
 183:simpleserial-base.c **** 	while(1)
 725              		.loc 1 183 2 view .LVU174
 184:simpleserial-base.c **** 		simpleserial_get();
 726              		.loc 1 184 3 discriminator 1 view .LVU175
 727 001c FFF7FEFF 		bl	simpleserial_get
 728              	.LVL78:
 183:simpleserial-base.c **** 		simpleserial_get();
 729              		.loc 1 183 7 view .LVU176
 730 0020 FCE7     		b	.L40
 731              	.L42:
 732 0022 C046     		.align	2
 733              	.L41:
 734 0024 00000000 		.word	aes
 735              		.cfi_endproc
 736              	.LFE8:
 738              		.section	.text.Cat,"ax",%progbits
 739              		.align	1
 740              		.p2align 2,,3
 741              		.global	Cat
 742              		.syntax unified
 743              		.code	16
 744              		.thumb_func
 746              	Cat:
 747              	.LVL79:
 748              	.LFB9:
 185:simpleserial-base.c **** }
 186:simpleserial-base.c **** 
 187:simpleserial-base.c **** uint32_t Cat(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3){
 749              		.loc 1 187 61 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 188:simpleserial-base.c **** 	uint32_t word = 0;
 754              		.loc 1 188 2 view .LVU178
 189:simpleserial-base.c **** 	word += b0;
 755              		.loc 1 189 2 view .LVU179
 190:simpleserial-base.c **** 	word = (word << 8);
 756              		.loc 1 190 2 view .LVU180
 757              		.loc 1 190 7 is_stmt 0 view .LVU181
 758 0000 0002     		lsls	r0, r0, #8
 759              	.LVL80:
 191:simpleserial-base.c **** 	word += b1;
 760              		.loc 1 191 2 is_stmt 1 view .LVU182
 761              		.loc 1 191 7 is_stmt 0 view .LVU183
 762 0002 0918     		adds	r1, r1, r0
 763              	.LVL81:
 192:simpleserial-base.c **** 	word = (word << 8);
 764              		.loc 1 192 2 is_stmt 1 view .LVU184
 765              		.loc 1 192 7 is_stmt 0 view .LVU185
 766 0004 0902     		lsls	r1, r1, #8
 767              	.LVL82:
 193:simpleserial-base.c **** 	word += b2;
 768              		.loc 1 193 2 is_stmt 1 view .LVU186
 769              		.loc 1 193 7 is_stmt 0 view .LVU187
 770 0006 5218     		adds	r2, r2, r1
 771              	.LVL83:
 194:simpleserial-base.c **** 	word = (word << 8);
 772              		.loc 1 194 2 is_stmt 1 view .LVU188
 773              		.loc 1 194 7 is_stmt 0 view .LVU189
 774 0008 1202     		lsls	r2, r2, #8
 775              	.LVL84:
 195:simpleserial-base.c **** 	word += b3;
 776              		.loc 1 195 2 is_stmt 1 view .LVU190
 196:simpleserial-base.c **** 	return word;
 777              		.loc 1 196 2 view .LVU191
 195:simpleserial-base.c **** 	word += b3;
 778              		.loc 1 195 7 is_stmt 0 view .LVU192
 779 000a 9818     		adds	r0, r3, r2
 780              	.LVL85:
 197:simpleserial-base.c **** }
 781              		.loc 1 197 1 view .LVU193
 782              		@ sp needed
 783 000c 7047     		bx	lr
 784              		.cfi_endproc
 785              	.LFE9:
 787              		.global	PlainText
 788              		.global	Key
 789              		.global	key_entered
 790              		.global	S_Matrix
 791              		.global	Mask_Matrix
 792              		.global	ST_Matrix
 793              		.global	ExpandedKey
 794              		.global	StateArray
 795 000e C046     		.bss
 796              		.align	2
 797              		.set	.LANCHOR0,. + 0
 800              	Key:
 801 0000 00000000 		.space	16
 801      00000000 
 801      00000000 
 801      00000000 
 804              	Mask_Matrix:
 805 0010 00000000 		.space	16
 805      00000000 
 805      00000000 
 805      00000000 
 808              	ST_Matrix:
 809 0020 00000000 		.space	16
 809      00000000 
 809      00000000 
 809      00000000 
 812              	PlainText:
 813 0030 00000000 		.space	16
 813      00000000 
 813      00000000 
 813      00000000 
 816              	StateArray:
 817 0040 00000000 		.space	16
 817      00000000 
 817      00000000 
 817      00000000 
 820              	S_Matrix:
 821 0050 00000000 		.space	16
 821      00000000 
 821      00000000 
 821      00000000 
 824              	key_entered:
 825 0060 00       		.space	1
 826 0061 000000   		.space	3
 829              	ExpandedKey:
 830 0064 00000000 		.space	176
 830      00000000 
 830      00000000 
 830      00000000 
 830      00000000 
 831              		.text
 832              	.Letext0:
 833              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 834              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 835              		.file 4 "/usr/include/newlib/sys/_timeval.h"
 836              		.file 5 ".././simpleserial/simpleserial.h"
 837              		.file 6 ".././hal/stm32f0/stm32f0_hal.h"
 838              		.file 7 ".././hal/hal.h"
 839              		.file 8 "AES_128.h"
 840              		.file 9 "/usr/include/newlib/time.h"
 841              		.file 10 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 simpleserial-base.c
     /tmp/ccQtR3yg.s:19     .text.get_key:00000000 $t
     /tmp/ccQtR3yg.s:26     .text.get_key:00000000 get_key
     /tmp/ccQtR3yg.s:61     .text.get_key:00000014 $d
     /tmp/ccQtR3yg.s:66     .text.encrypt:00000000 $t
     /tmp/ccQtR3yg.s:73     .text.encrypt:00000000 encrypt
     /tmp/ccQtR3yg.s:319    .text.encrypt:00000120 $d
     /tmp/ccQtR3yg.s:829    .bss:00000064 ExpandedKey
     /tmp/ccQtR3yg.s:326    .text.aes:00000000 $t
     /tmp/ccQtR3yg.s:333    .text.aes:00000000 aes
     /tmp/ccQtR3yg.s:550    .text.aes:000000b0 $d
     /tmp/ccQtR3yg.s:555    .text.get_pt:00000000 $t
     /tmp/ccQtR3yg.s:562    .text.get_pt:00000000 get_pt
     /tmp/ccQtR3yg.s:652    .text.get_pt:00000054 $d
     /tmp/ccQtR3yg.s:659    .text.reset:00000000 $t
     /tmp/ccQtR3yg.s:666    .text.reset:00000000 reset
     /tmp/ccQtR3yg.s:685    .text.startup.main:00000000 $t
     /tmp/ccQtR3yg.s:692    .text.startup.main:00000000 main
     /tmp/ccQtR3yg.s:734    .text.startup.main:00000024 $d
     /tmp/ccQtR3yg.s:739    .text.Cat:00000000 $t
     /tmp/ccQtR3yg.s:746    .text.Cat:00000000 Cat
     /tmp/ccQtR3yg.s:812    .bss:00000030 PlainText
     /tmp/ccQtR3yg.s:800    .bss:00000000 Key
     /tmp/ccQtR3yg.s:824    .bss:00000060 key_entered
     /tmp/ccQtR3yg.s:820    .bss:00000050 S_Matrix
     /tmp/ccQtR3yg.s:804    .bss:00000010 Mask_Matrix
     /tmp/ccQtR3yg.s:808    .bss:00000020 ST_Matrix
     /tmp/ccQtR3yg.s:816    .bss:00000040 StateArray
     /tmp/ccQtR3yg.s:796    .bss:00000000 $d

UNDEFINED SYMBOLS
memcpy
time
srand
rand
AddMatrices
ExpandKey
AddRoundKey
SubBytes
ShiftRows
MixColumns
trigger_high
trigger_low
simpleserial_put
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get

   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"simpleserial-base.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.get_key,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	get_key
  19              		.arch armv6s-m
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  23              		.fpu softvfp
  25              	get_key:
  26              	.LVL0:
  27              	.LFB3:
  28              		.file 1 "simpleserial-base.c"
   1:simpleserial-base.c **** /*
   2:simpleserial-base.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-base.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:simpleserial-base.c **** 
   5:simpleserial-base.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-base.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-base.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-base.c ****     (at your option) any later version.
   9:simpleserial-base.c **** 
  10:simpleserial-base.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-base.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-base.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-base.c ****     GNU General Public License for more details.
  14:simpleserial-base.c **** 
  15:simpleserial-base.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-base.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-base.c **** */
  18:simpleserial-base.c **** 
  19:simpleserial-base.c **** #include "hal.h"
  20:simpleserial-base.c **** #include <stdint.h>
  21:simpleserial-base.c **** #include "simpleserial.h"
  22:simpleserial-base.c **** #include "AES_128.h"
  23:simpleserial-base.c **** #include <time.h>
  24:simpleserial-base.c **** 
  25:simpleserial-base.c **** //AES current state matrix
  26:simpleserial-base.c **** unsigned char StateArray [4][4];
  27:simpleserial-base.c **** //Expanded Key matrix
  28:simpleserial-base.c **** unsigned char ExpandedKey[11][4][4];
  29:simpleserial-base.c **** //Masked state array matrix
  30:simpleserial-base.c **** unsigned char ST_Matrix [4][4];
  31:simpleserial-base.c **** //Mask Matrix
  32:simpleserial-base.c **** unsigned char Mask_Matrix[4][4];
  33:simpleserial-base.c **** //State array
  34:simpleserial-base.c **** unsigned char S_Matrix[4][4];
  35:simpleserial-base.c **** //Flag for if the key was sent to the board
  36:simpleserial-base.c **** unsigned char key_entered = 0;
  37:simpleserial-base.c **** 
  38:simpleserial-base.c **** unsigned char Key[4][4]= {  {0x00, 0x00, 0x00, 0x00},
  39:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  40:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  41:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00} };
  42:simpleserial-base.c **** 
  43:simpleserial-base.c **** unsigned char PlainText[4][4]  = {  {0x00, 0x00, 0x00, 0x00},
  44:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  45:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  46:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00} };
  47:simpleserial-base.c **** 
  48:simpleserial-base.c **** void AESRound(unsigned int StateArray[4],unsigned int Key [4] );
  49:simpleserial-base.c **** 
  50:simpleserial-base.c **** void encrypt();
  51:simpleserial-base.c **** uint8_t get_key(uint8_t* k, uint8_t len)
  52:simpleserial-base.c **** {
  29              		.loc 1 52 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  53:simpleserial-base.c **** 	//Set the internal key
  54:simpleserial-base.c **** 	memcpy(Key, k, 16);
  33              		.loc 1 54 2 view .LVU1
  52:simpleserial-base.c **** 	//Set the internal key
  34              		.loc 1 52 1 is_stmt 0 view .LVU2
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  52:simpleserial-base.c **** 	//Set the internal key
  40              		.loc 1 52 1 view .LVU3
  41 0002 0100     		movs	r1, r0
  42              	.LVL1:
  55:simpleserial-base.c **** 	return 0x00;
  56:simpleserial-base.c **** }
  43              		.loc 1 56 1 view .LVU4
  44              		@ sp needed
  54:simpleserial-base.c **** 	return 0x00;
  45              		.loc 1 54 2 view .LVU5
  46 0004 1022     		movs	r2, #16
  47 0006 0248     		ldr	r0, .L3
  48              	.LVL2:
  54:simpleserial-base.c **** 	return 0x00;
  49              		.loc 1 54 2 view .LVU6
  50 0008 FFF7FEFF 		bl	memcpy
  51              	.LVL3:
  55:simpleserial-base.c **** 	return 0x00;
  52              		.loc 1 55 2 is_stmt 1 view .LVU7
  53              		.loc 1 56 1 is_stmt 0 view .LVU8
  54 000c 0020     		movs	r0, #0
  55 000e 10BD     		pop	{r4, pc}
  56              	.L4:
  57              		.align	2
  58              	.L3:
  59 0010 00000000 		.word	.LANCHOR0
  60              		.cfi_endproc
  61              	.LFE3:
  63              		.section	.text.encrypt,"ax",%progbits
  64              		.align	1
  65              		.p2align 2,,3
  66              		.global	encrypt
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  70              		.fpu softvfp
  72              	encrypt:
  73              	.LFB4:
  57:simpleserial-base.c **** 
  58:simpleserial-base.c **** void encrypt(){
  74              		.loc 1 58 15 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  59:simpleserial-base.c **** 	//generate 16 random values for the mask
  60:simpleserial-base.c **** 	srand(time(NULL));
  78              		.loc 1 60 2 view .LVU10
  58:simpleserial-base.c **** 	//generate 16 random values for the mask
  79              		.loc 1 58 15 is_stmt 0 view .LVU11
  80 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 20
  83              		.cfi_offset 4, -20
  84              		.cfi_offset 5, -16
  85              		.cfi_offset 6, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 D646     		mov	lr, r10
  89 0004 4646     		mov	r6, r8
  90 0006 4F46     		mov	r7, r9
  91              		.loc 1 60 2 view .LVU12
  92 0008 0020     		movs	r0, #0
  58:simpleserial-base.c **** 	//generate 16 random values for the mask
  93              		.loc 1 58 15 view .LVU13
  94 000a C0B5     		push	{r6, r7, lr}
  95              	.LCFI2:
  96              		.cfi_def_cfa_offset 32
  97              		.cfi_offset 8, -32
  98              		.cfi_offset 9, -28
  99              		.cfi_offset 10, -24
 100              		.loc 1 60 2 view .LVU14
 101 000c FFF7FEFF 		bl	time
 102              	.LVL4:
 103 0010 FFF7FEFF 		bl	srand
 104              	.LVL5:
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 105              		.loc 1 61 2 is_stmt 1 view .LVU15
 106              	.LBB4:
 107              		.loc 1 61 7 view .LVU16
 108              		.loc 1 61 18 view .LVU17
 109 0014 4D4B     		ldr	r3, .L12
 110              	.LBB5:
 111              	.LBB6:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
  63:simpleserial-base.c **** 			Mask_Matrix[i][j] = rand() % 256;
 112              		.loc 1 63 31 is_stmt 0 view .LVU18
 113 0016 FF27     		movs	r7, #255
 114 0018 1D00     		movs	r5, r3
 115 001a 1E00     		movs	r6, r3
 116 001c 9846     		mov	r8, r3
 117 001e 1035     		adds	r5, r5, #16
 118 0020 2036     		adds	r6, r6, #32
 119              	.LVL6:
 120              	.L6:
 121              		.loc 1 63 31 view .LVU19
 122              	.LBE6:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 123              		.loc 1 62 18 is_stmt 1 view .LVU20
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 124              		.loc 1 62 11 is_stmt 0 view .LVU21
 125 0022 0024     		movs	r4, #0
 126              	.LVL7:
 127              	.L7:
 128              	.LBB7:
 129              		.loc 1 63 4 is_stmt 1 discriminator 3 view .LVU22
 130              		.loc 1 63 24 is_stmt 0 discriminator 3 view .LVU23
 131 0024 FFF7FEFF 		bl	rand
 132              	.LVL8:
 133              		.loc 1 63 31 discriminator 3 view .LVU24
 134 0028 C317     		asrs	r3, r0, #31
 135 002a 1B0E     		lsrs	r3, r3, #24
 136 002c C018     		adds	r0, r0, r3
 137 002e 3840     		ands	r0, r7
 138 0030 C01A     		subs	r0, r0, r3
 139              		.loc 1 63 22 discriminator 3 view .LVU25
 140 0032 2855     		strb	r0, [r5, r4]
 141              	.LBE7:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 142              		.loc 1 62 23 is_stmt 1 discriminator 3 view .LVU26
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 143              		.loc 1 62 24 is_stmt 0 discriminator 3 view .LVU27
 144 0034 0134     		adds	r4, r4, #1
 145              	.LVL9:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 146              		.loc 1 62 18 is_stmt 1 discriminator 3 view .LVU28
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 147              		.loc 1 62 3 is_stmt 0 discriminator 3 view .LVU29
 148 0036 042C     		cmp	r4, #4
 149 0038 F4D1     		bne	.L7
 150              	.LBE5:
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 151              		.loc 1 61 25 is_stmt 1 discriminator 2 view .LVU30
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 152              		.loc 1 61 18 discriminator 2 view .LVU31
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 153              		.loc 1 61 2 is_stmt 0 discriminator 2 view .LVU32
 154 003a 0435     		adds	r5, r5, #4
 155 003c B542     		cmp	r5, r6
 156 003e F0D1     		bne	.L6
 157              	.LBE4:
  64:simpleserial-base.c **** 		}
  65:simpleserial-base.c **** 	}
  66:simpleserial-base.c **** 	//Mask the plaintext 
  67:simpleserial-base.c **** 	AddMatrices(Mask_Matrix, PlainText, ST_Matrix);
 158              		.loc 1 67 2 is_stmt 1 view .LVU33
 159 0040 4446     		mov	r4, r8
 160              	.LVL10:
 161              		.loc 1 67 2 is_stmt 0 view .LVU34
 162 0042 4746     		mov	r7, r8
 163 0044 4546     		mov	r5, r8
 164 0046 2034     		adds	r4, r4, #32
 165 0048 1035     		adds	r5, r5, #16
 166 004a 3037     		adds	r7, r7, #48
 167 004c 2200     		movs	r2, r4
 168 004e 3900     		movs	r1, r7
 169 0050 2800     		movs	r0, r5
 170 0052 FFF7FEFF 		bl	AddMatrices
 171              	.LVL11:
  68:simpleserial-base.c **** 
  69:simpleserial-base.c **** 	ExpandKey(Key, ExpandedKey);
 172              		.loc 1 69 2 is_stmt 1 view .LVU35
 173 0056 3E4E     		ldr	r6, .L12+4
 174 0058 4046     		mov	r0, r8
 175 005a 3100     		movs	r1, r6
 176 005c FFF7FEFF 		bl	ExpandKey
 177              	.LVL12:
  70:simpleserial-base.c **** 	//Set the state array
  71:simpleserial-base.c **** 	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 178              		.loc 1 71 2 view .LVU36
  72:simpleserial-base.c **** 
  73:simpleserial-base.c **** 	//Add the round key 
  74:simpleserial-base.c **** 	AddRoundKey(ExpandedKey[0], StateArray);
 179              		.loc 1 74 2 view .LVU37
  71:simpleserial-base.c **** 
 180              		.loc 1 71 2 is_stmt 0 view .LVU38
 181 0060 4346     		mov	r3, r8
 182 0062 4033     		adds	r3, r3, #64
 183 0064 07CF     		ldmia	r7!, {r0, r1, r2}
 184 0066 07C3     		stmia	r3!, {r0, r1, r2}
 185 0068 3A68     		ldr	r2, [r7]
 186              		.loc 1 74 2 view .LVU39
 187 006a 4746     		mov	r7, r8
 188 006c 4037     		adds	r7, r7, #64
  71:simpleserial-base.c **** 
 189              		.loc 1 71 2 view .LVU40
 190 006e 1A60     		str	r2, [r3]
 191              		.loc 1 74 2 view .LVU41
 192 0070 3000     		movs	r0, r6
 193 0072 3900     		movs	r1, r7
 194 0074 FFF7FEFF 		bl	AddRoundKey
 195              	.LVL13:
  75:simpleserial-base.c **** 
  76:simpleserial-base.c **** 	AddRoundKey(ExpandedKey[0], ST_Matrix);
 196              		.loc 1 76 2 is_stmt 1 view .LVU42
 197 0078 3000     		movs	r0, r6
 198 007a 2100     		movs	r1, r4
 199 007c FFF7FEFF 		bl	AddRoundKey
 200              	.LVL14:
  77:simpleserial-base.c **** 	int i;
 201              		.loc 1 77 2 view .LVU43
  78:simpleserial-base.c **** 	for(i=1; i<=10; i++){
 202              		.loc 1 78 2 view .LVU44
 203              		.loc 1 78 11 view .LVU45
  79:simpleserial-base.c **** 
  80:simpleserial-base.c **** 		//Unmask input
  81:simpleserial-base.c **** 		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 204              		.loc 1 81 3 view .LVU46
 205 0080 5023     		movs	r3, #80
 206 0082 4344     		add	r3, r3, r8
 207 0084 9946     		mov	r9, r3
 208 0086 1A00     		movs	r2, r3
 209 0088 2900     		movs	r1, r5
 210 008a 2000     		movs	r0, r4
 211 008c FFF7FEFF 		bl	AddMatrices
 212              	.LVL15:
  82:simpleserial-base.c **** 		//Apply Sbox
  83:simpleserial-base.c **** 		SubBytes(S_Matrix);
 213              		.loc 1 83 3 view .LVU47
 214 0090 4846     		mov	r0, r9
 215 0092 FFF7FEFF 		bl	SubBytes
 216              	.LVL16:
  84:simpleserial-base.c **** 		SubBytes(StateArray);
 217              		.loc 1 84 3 view .LVU48
 218 0096 3800     		movs	r0, r7
 219 0098 FFF7FEFF 		bl	SubBytes
 220              	.LVL17:
  85:simpleserial-base.c **** 		//Remask Output
  86:simpleserial-base.c **** 		AddMatrices(S_Matrix, Mask_Matrix, ST_Matrix);
 221              		.loc 1 86 3 view .LVU49
 222 009c 2200     		movs	r2, r4
 223 009e 2900     		movs	r1, r5
 224 00a0 4846     		mov	r0, r9
 225 00a2 FFF7FEFF 		bl	AddMatrices
 226              	.LVL18:
  87:simpleserial-base.c **** 		//ShiftRows 
  88:simpleserial-base.c **** 		ShiftRows(StateArray);
 227              		.loc 1 88 3 view .LVU50
 228 00a6 3800     		movs	r0, r7
 229 00a8 FFF7FEFF 		bl	ShiftRows
 230              	.LVL19:
  89:simpleserial-base.c **** 		ShiftRows(ST_Matrix);
 231              		.loc 1 89 3 view .LVU51
 232 00ac 2000     		movs	r0, r4
 233 00ae FFF7FEFF 		bl	ShiftRows
 234              	.LVL20:
  90:simpleserial-base.c **** 		ShiftRows(Mask_Matrix);
 235              		.loc 1 90 3 view .LVU52
 236 00b2 2800     		movs	r0, r5
 237 00b4 FFF7FEFF 		bl	ShiftRows
 238              	.LVL21:
  91:simpleserial-base.c **** 
  92:simpleserial-base.c **** 		if(i!=10){
 239              		.loc 1 92 3 view .LVU53
  78:simpleserial-base.c **** 
 240              		.loc 1 78 7 is_stmt 0 view .LVU54
 241 00b8 0123     		movs	r3, #1
 242 00ba 9A46     		mov	r10, r3
 243 00bc 1036     		adds	r6, r6, #16
 244              	.LVL22:
 245              	.L9:
  93:simpleserial-base.c **** 			//Mix Columns 9 times 
  94:simpleserial-base.c **** 			MixColumns(StateArray);
 246              		.loc 1 94 4 is_stmt 1 view .LVU55
 247 00be 3800     		movs	r0, r7
 248 00c0 FFF7FEFF 		bl	MixColumns
 249              	.LVL23:
  95:simpleserial-base.c **** 			MixColumns(ST_Matrix);
 250              		.loc 1 95 4 view .LVU56
 251 00c4 2000     		movs	r0, r4
 252 00c6 FFF7FEFF 		bl	MixColumns
 253              	.LVL24:
  96:simpleserial-base.c **** 			MixColumns(Mask_Matrix);
 254              		.loc 1 96 4 view .LVU57
 255 00ca 2800     		movs	r0, r5
 256 00cc FFF7FEFF 		bl	MixColumns
 257              	.LVL25:
  97:simpleserial-base.c **** 		}
  98:simpleserial-base.c **** 		//Add the round key
  99:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], StateArray);
 258              		.loc 1 99 3 view .LVU58
 259 00d0 3000     		movs	r0, r6
 260 00d2 3900     		movs	r1, r7
 261 00d4 FFF7FEFF 		bl	AddRoundKey
 262              	.LVL26:
 100:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 263              		.loc 1 100 3 view .LVU59
 264 00d8 3000     		movs	r0, r6
 265 00da 2100     		movs	r1, r4
 266 00dc FFF7FEFF 		bl	AddRoundKey
 267              	.LVL27:
  78:simpleserial-base.c **** 
 268              		.loc 1 78 18 view .LVU60
  78:simpleserial-base.c **** 
 269              		.loc 1 78 19 is_stmt 0 view .LVU61
 270 00e0 0123     		movs	r3, #1
 271 00e2 9C46     		mov	ip, r3
  81:simpleserial-base.c **** 		//Apply Sbox
 272              		.loc 1 81 3 view .LVU62
 273 00e4 4F33     		adds	r3, r3, #79
 274 00e6 4344     		add	r3, r3, r8
 275 00e8 9946     		mov	r9, r3
 276 00ea 1A00     		movs	r2, r3
 277 00ec 2900     		movs	r1, r5
 278 00ee 2000     		movs	r0, r4
  78:simpleserial-base.c **** 
 279              		.loc 1 78 19 view .LVU63
 280 00f0 E244     		add	r10, r10, ip
 281              	.LVL28:
  78:simpleserial-base.c **** 
 282              		.loc 1 78 11 is_stmt 1 view .LVU64
  81:simpleserial-base.c **** 		//Apply Sbox
 283              		.loc 1 81 3 view .LVU65
 284 00f2 FFF7FEFF 		bl	AddMatrices
 285              	.LVL29:
  83:simpleserial-base.c **** 		SubBytes(StateArray);
 286              		.loc 1 83 3 view .LVU66
 287 00f6 4846     		mov	r0, r9
 288 00f8 FFF7FEFF 		bl	SubBytes
 289              	.LVL30:
  84:simpleserial-base.c **** 		//Remask Output
 290              		.loc 1 84 3 view .LVU67
 291 00fc 3800     		movs	r0, r7
 292 00fe FFF7FEFF 		bl	SubBytes
 293              	.LVL31:
  86:simpleserial-base.c **** 		//ShiftRows 
 294              		.loc 1 86 3 view .LVU68
 295 0102 2200     		movs	r2, r4
 296 0104 2900     		movs	r1, r5
 297 0106 4846     		mov	r0, r9
 298 0108 FFF7FEFF 		bl	AddMatrices
 299              	.LVL32:
  88:simpleserial-base.c **** 		ShiftRows(ST_Matrix);
 300              		.loc 1 88 3 view .LVU69
 301 010c 3800     		movs	r0, r7
 302 010e FFF7FEFF 		bl	ShiftRows
 303              	.LVL33:
  89:simpleserial-base.c **** 		ShiftRows(Mask_Matrix);
 304              		.loc 1 89 3 view .LVU70
 305 0112 2000     		movs	r0, r4
 306 0114 FFF7FEFF 		bl	ShiftRows
 307              	.LVL34:
  90:simpleserial-base.c **** 
 308              		.loc 1 90 3 view .LVU71
 309 0118 2800     		movs	r0, r5
 310 011a FFF7FEFF 		bl	ShiftRows
 311              	.LVL35:
  92:simpleserial-base.c **** 			//Mix Columns 9 times 
 312              		.loc 1 92 3 view .LVU72
  92:simpleserial-base.c **** 			//Mix Columns 9 times 
 313              		.loc 1 92 5 is_stmt 0 view .LVU73
 314 011e 5346     		mov	r3, r10
 315 0120 1036     		adds	r6, r6, #16
 316 0122 0A2B     		cmp	r3, #10
 317 0124 CBD1     		bne	.L9
  99:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 318              		.loc 1 99 3 is_stmt 1 view .LVU74
 101:simpleserial-base.c **** 	}
 102:simpleserial-base.c **** 	//Do unmasking stuff
 103:simpleserial-base.c **** 	AddMatrices(ST_Matrix, Mask_Matrix, StateArray);
 104:simpleserial-base.c **** }	
 319              		.loc 1 104 1 is_stmt 0 view .LVU75
 320              		@ sp needed
  99:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 321              		.loc 1 99 3 view .LVU76
 322 0126 0B4E     		ldr	r6, .L12+8
 323 0128 3900     		movs	r1, r7
 324 012a 3000     		movs	r0, r6
 325 012c FFF7FEFF 		bl	AddRoundKey
 326              	.LVL36:
 100:simpleserial-base.c **** 	}
 327              		.loc 1 100 3 is_stmt 1 view .LVU77
 328 0130 3000     		movs	r0, r6
 329 0132 2100     		movs	r1, r4
 330 0134 FFF7FEFF 		bl	AddRoundKey
 331              	.LVL37:
  78:simpleserial-base.c **** 
 332              		.loc 1 78 18 view .LVU78
  78:simpleserial-base.c **** 
 333              		.loc 1 78 11 view .LVU79
 103:simpleserial-base.c **** }	
 334              		.loc 1 103 2 view .LVU80
 335 0138 3A00     		movs	r2, r7
 336 013a 2900     		movs	r1, r5
 337 013c 2000     		movs	r0, r4
 338 013e FFF7FEFF 		bl	AddMatrices
 339              	.LVL38:
 340              		.loc 1 104 1 is_stmt 0 view .LVU81
 341 0142 E0BC     		pop	{r5, r6, r7}
 342 0144 BA46     		mov	r10, r7
 343 0146 B146     		mov	r9, r6
 344 0148 A846     		mov	r8, r5
 345 014a F0BD     		pop	{r4, r5, r6, r7, pc}
 346              	.L13:
 347              		.align	2
 348              	.L12:
 349 014c 00000000 		.word	.LANCHOR0
 350 0150 00000000 		.word	ExpandedKey
 351 0154 A0000000 		.word	ExpandedKey+160
 352              		.cfi_endproc
 353              	.LFE4:
 355              		.section	.text.aes,"ax",%progbits
 356              		.align	1
 357              		.p2align 2,,3
 358              		.global	aes
 359              		.syntax unified
 360              		.code	16
 361              		.thumb_func
 362              		.fpu softvfp
 364              	aes:
 365              	.LVL39:
 366              	.LFB7:
 105:simpleserial-base.c **** 
 106:simpleserial-base.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
 107:simpleserial-base.c **** {
 108:simpleserial-base.c **** 	/**********************************
 109:simpleserial-base.c **** 	* Start user-specific code here. */
 110:simpleserial-base.c **** 	
 111:simpleserial-base.c **** 
 112:simpleserial-base.c **** 	if ( key_entered == 1 ){
 113:simpleserial-base.c **** 
 114:simpleserial-base.c **** 	memcpy(PlainText, pt, 16);
 115:simpleserial-base.c **** 
 116:simpleserial-base.c **** 	trigger_high();
 117:simpleserial-base.c **** 
 118:simpleserial-base.c **** 	encrypt();
 119:simpleserial-base.c **** 
 120:simpleserial-base.c **** 	trigger_low();
 121:simpleserial-base.c **** 
 122:simpleserial-base.c **** 	pt = (uint8_t*)StateArray;
 123:simpleserial-base.c **** 
 124:simpleserial-base.c **** 	
 125:simpleserial-base.c **** 
 126:simpleserial-base.c **** 	simpleserial_put('r', 16, pt);
 127:simpleserial-base.c **** 
 128:simpleserial-base.c **** 	return 0x00;
 129:simpleserial-base.c **** 
 130:simpleserial-base.c **** 	}
 131:simpleserial-base.c **** 	else{
 132:simpleserial-base.c **** 		memcpy(Key, pt, 16);
 133:simpleserial-base.c **** 		key_entered = 1;
 134:simpleserial-base.c **** 
 135:simpleserial-base.c **** 		trigger_low();
 136:simpleserial-base.c **** 
 137:simpleserial-base.c **** 		simpleserial_put('r', 16, pt);
 138:simpleserial-base.c **** 		return 0x00;
 139:simpleserial-base.c **** 	}
 140:simpleserial-base.c **** 
 141:simpleserial-base.c **** }
 142:simpleserial-base.c **** 
 143:simpleserial-base.c **** uint8_t reset(uint8_t* x, uint8_t len)
 144:simpleserial-base.c **** {
 145:simpleserial-base.c **** 	// Reset key here if needed
 146:simpleserial-base.c **** 	return 0x00;
 147:simpleserial-base.c **** }
 148:simpleserial-base.c **** 
 149:simpleserial-base.c **** #if SS_VER == SS_VER_2_1
 150:simpleserial-base.c **** uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
 151:simpleserial-base.c **** {
 367              		.loc 1 151 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 152:simpleserial-base.c ****     uint8_t req_len = 0;
 371              		.loc 1 152 5 view .LVU83
 153:simpleserial-base.c ****     uint8_t err = 0;
 372              		.loc 1 153 5 view .LVU84
 154:simpleserial-base.c **** 
 155:simpleserial-base.c ****     if (scmd & 0x02) {
 373              		.loc 1 155 5 view .LVU85
 151:simpleserial-base.c ****     uint8_t req_len = 0;
 374              		.loc 1 151 1 is_stmt 0 view .LVU86
 375 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 376              	.LCFI3:
 377              		.cfi_def_cfa_offset 24
 378              		.cfi_offset 3, -24
 379              		.cfi_offset 4, -20
 380              		.cfi_offset 5, -16
 381              		.cfi_offset 6, -12
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 1E00     		movs	r6, r3
 385 0004 0223     		movs	r3, #2
 386              	.LVL40:
 151:simpleserial-base.c ****     uint8_t req_len = 0;
 387              		.loc 1 151 1 view .LVU87
 388 0006 CE46     		mov	lr, r9
 389 0008 4746     		mov	r7, r8
 390 000a 1500     		movs	r5, r2
 391 000c 1A00     		movs	r2, r3
 392              	.LVL41:
 151:simpleserial-base.c ****     uint8_t req_len = 0;
 393              		.loc 1 151 1 view .LVU88
 394 000e 0C00     		movs	r4, r1
 395 0010 80B5     		push	{r7, lr}
 396              	.LCFI4:
 397              		.cfi_def_cfa_offset 32
 398              		.cfi_offset 8, -32
 399              		.cfi_offset 9, -28
 400 0012 0A40     		ands	r2, r1
 401              		.loc 1 155 8 view .LVU89
 402 0014 0B42     		tst	r3, r1
 403 0016 2CD0     		beq	.L21
 156:simpleserial-base.c ****         req_len += 16;
 404              		.loc 1 156 9 is_stmt 1 view .LVU90
 405              	.LVL42:
 157:simpleserial-base.c ****         if (req_len > len) {
 406              		.loc 1 157 9 view .LVU91
 407              		.loc 1 157 12 is_stmt 0 view .LVU92
 408 0018 0F2D     		cmp	r5, #15
 409 001a 32D9     		bls	.L19
 158:simpleserial-base.c ****             return SS_ERR_LEN;
 159:simpleserial-base.c ****         }
 160:simpleserial-base.c ****         err = get_key(buf + req_len - 16, 16);
 410              		.loc 1 160 9 is_stmt 1 view .LVU93
 411              	.LVL43:
 412              	.LBB14:
 413              	.LBI14:
  51:simpleserial-base.c **** {
 414              		.loc 1 51 9 view .LVU94
 415              	.LBB15:
  54:simpleserial-base.c **** 	return 0x00;
 416              		.loc 1 54 2 view .LVU95
 417 001c 1022     		movs	r2, #16
 418 001e 3100     		movs	r1, r6
 419              	.LVL44:
  54:simpleserial-base.c **** 	return 0x00;
 420              		.loc 1 54 2 is_stmt 0 view .LVU96
 421 0020 2348     		ldr	r0, .L27
 422              	.LVL45:
  54:simpleserial-base.c **** 	return 0x00;
 423              		.loc 1 54 2 view .LVU97
 424 0022 FFF7FEFF 		bl	memcpy
 425              	.LVL46:
  55:simpleserial-base.c **** }
 426              		.loc 1 55 2 is_stmt 1 view .LVU98
  55:simpleserial-base.c **** }
 427              		.loc 1 55 2 is_stmt 0 view .LVU99
 428              	.LBE15:
 429              	.LBE14:
 161:simpleserial-base.c ****         if (err)
 430              		.loc 1 161 9 is_stmt 1 view .LVU100
 162:simpleserial-base.c ****             return err;
 163:simpleserial-base.c ****     }
 164:simpleserial-base.c ****     if (scmd & 0x01) {
 431              		.loc 1 164 8 is_stmt 0 view .LVU101
 432 0026 0127     		movs	r7, #1
 433 0028 2023     		movs	r3, #32
 156:simpleserial-base.c ****         if (req_len > len) {
 434              		.loc 1 156 17 view .LVU102
 435 002a 1022     		movs	r2, #16
 436 002c 9846     		mov	r8, r3
 437 002e 103B     		subs	r3, r3, #16
 438              		.loc 1 164 5 is_stmt 1 view .LVU103
 439              		.loc 1 164 8 is_stmt 0 view .LVU104
 440 0030 2742     		tst	r7, r4
 441 0032 17D0     		beq	.L18
 165:simpleserial-base.c ****         req_len += 16;
 442              		.loc 1 165 9 is_stmt 1 view .LVU105
 443              	.LVL47:
 166:simpleserial-base.c ****         if (req_len > len) {
 444              		.loc 1 166 9 view .LVU106
 445              		.loc 1 166 12 is_stmt 0 view .LVU107
 446 0034 4545     		cmp	r5, r8
 447 0036 24D3     		bcc	.L19
 448              	.LVL48:
 449              	.L26:
 167:simpleserial-base.c ****             return SS_ERR_LEN;
 168:simpleserial-base.c ****         }
 169:simpleserial-base.c ****         err = get_pt(buf + req_len - 16, 16);
 450              		.loc 1 169 9 is_stmt 1 view .LVU108
 451              		.loc 1 169 15 is_stmt 0 view .LVU109
 452 0038 F618     		adds	r6, r6, r3
 453              	.LVL49:
 454              	.LBB16:
 455              	.LBI16:
 106:simpleserial-base.c **** {
 456              		.loc 1 106 9 is_stmt 1 view .LVU110
 457              	.LBB17:
 112:simpleserial-base.c **** 
 458              		.loc 1 112 2 view .LVU111
 112:simpleserial-base.c **** 
 459              		.loc 1 112 19 is_stmt 0 view .LVU112
 460 003a 6023     		movs	r3, #96
 461 003c 1C4C     		ldr	r4, .L27
 462 003e 9946     		mov	r9, r3
 112:simpleserial-base.c **** 
 463              		.loc 1 112 5 view .LVU113
 464 0040 E35C     		ldrb	r3, [r4, r3]
 465 0042 012B     		cmp	r3, #1
 466 0044 1FD0     		beq	.L25
 132:simpleserial-base.c **** 		key_entered = 1;
 467              		.loc 1 132 3 is_stmt 1 view .LVU114
 468 0046 1022     		movs	r2, #16
 469 0048 3100     		movs	r1, r6
 470 004a 2000     		movs	r0, r4
 471 004c FFF7FEFF 		bl	memcpy
 472              	.LVL50:
 133:simpleserial-base.c **** 
 473              		.loc 1 133 3 view .LVU115
 133:simpleserial-base.c **** 
 474              		.loc 1 133 15 is_stmt 0 view .LVU116
 475 0050 4B46     		mov	r3, r9
 476 0052 E754     		strb	r7, [r4, r3]
 135:simpleserial-base.c **** 
 477              		.loc 1 135 3 is_stmt 1 view .LVU117
 478 0054 FFF7FEFF 		bl	trigger_low
 479              	.LVL51:
 137:simpleserial-base.c **** 		return 0x00;
 480              		.loc 1 137 3 view .LVU118
 481 0058 3200     		movs	r2, r6
 482 005a 1021     		movs	r1, #16
 483 005c 7220     		movs	r0, #114
 484 005e FFF7FEFF 		bl	simpleserial_put
 485              	.LVL52:
 138:simpleserial-base.c **** 	}
 486              		.loc 1 138 3 view .LVU119
 138:simpleserial-base.c **** 	}
 487              		.loc 1 138 10 is_stmt 0 view .LVU120
 488 0062 4246     		mov	r2, r8
 489              	.LVL53:
 490              	.L18:
 138:simpleserial-base.c **** 	}
 491              		.loc 1 138 10 view .LVU121
 492              	.LBE17:
 493              	.LBE16:
 170:simpleserial-base.c ****         if (err)
 171:simpleserial-base.c ****             return err;
 172:simpleserial-base.c ****     }
 173:simpleserial-base.c **** 
 174:simpleserial-base.c ****     if (len != req_len) {
 494              		.loc 1 174 5 is_stmt 1 view .LVU122
 495              		.loc 1 174 8 is_stmt 0 view .LVU123
 496 0064 AA42     		cmp	r2, r5
 497 0066 0CD1     		bne	.L19
 175:simpleserial-base.c ****         return SS_ERR_LEN;
 176:simpleserial-base.c ****     }
 177:simpleserial-base.c **** 
 178:simpleserial-base.c ****     return 0x00;
 498              		.loc 1 178 12 view .LVU124
 499 0068 0020     		movs	r0, #0
 500              	.L17:
 179:simpleserial-base.c **** 
 180:simpleserial-base.c **** }
 501              		.loc 1 180 1 view .LVU125
 502              		@ sp needed
 503 006a C0BC     		pop	{r6, r7}
 504 006c B946     		mov	r9, r7
 505 006e B046     		mov	r8, r6
 506 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 507              	.LVL54:
 508              	.L21:
 509              		.loc 1 180 1 view .LVU126
 510 0072 1023     		movs	r3, #16
 164:simpleserial-base.c ****         req_len += 16;
 511              		.loc 1 164 8 view .LVU127
 512 0074 0127     		movs	r7, #1
 513 0076 9846     		mov	r8, r3
 514 0078 0023     		movs	r3, #0
 515              	.LVL55:
 164:simpleserial-base.c ****         req_len += 16;
 516              		.loc 1 164 5 is_stmt 1 view .LVU128
 164:simpleserial-base.c ****         req_len += 16;
 517              		.loc 1 164 8 is_stmt 0 view .LVU129
 518 007a 2742     		tst	r7, r4
 519 007c F2D0     		beq	.L18
 165:simpleserial-base.c ****         if (req_len > len) {
 520              		.loc 1 165 9 is_stmt 1 view .LVU130
 521              	.LVL56:
 166:simpleserial-base.c ****             return SS_ERR_LEN;
 522              		.loc 1 166 9 view .LVU131
 166:simpleserial-base.c ****             return SS_ERR_LEN;
 523              		.loc 1 166 12 is_stmt 0 view .LVU132
 524 007e 4545     		cmp	r5, r8
 525 0080 DAD2     		bcs	.L26
 526              	.LVL57:
 527              	.L19:
 158:simpleserial-base.c ****         }
 528              		.loc 1 158 20 view .LVU133
 529 0082 0420     		movs	r0, #4
 530 0084 F1E7     		b	.L17
 531              	.LVL58:
 532              	.L25:
 533              	.LBB21:
 534              	.LBB20:
 535              	.LBB18:
 536              	.LBI18:
 106:simpleserial-base.c **** {
 537              		.loc 1 106 9 is_stmt 1 view .LVU134
 538              	.LBB19:
 114:simpleserial-base.c **** 
 539              		.loc 1 114 2 view .LVU135
 540 0086 2000     		movs	r0, r4
 541 0088 1022     		movs	r2, #16
 542 008a 3100     		movs	r1, r6
 543 008c 3030     		adds	r0, r0, #48
 544 008e FFF7FEFF 		bl	memcpy
 545              	.LVL59:
 116:simpleserial-base.c **** 
 546              		.loc 1 116 2 view .LVU136
 547 0092 FFF7FEFF 		bl	trigger_high
 548              	.LVL60:
 118:simpleserial-base.c **** 
 549              		.loc 1 118 2 view .LVU137
 550 0096 FFF7FEFF 		bl	encrypt
 551              	.LVL61:
 120:simpleserial-base.c **** 
 552              		.loc 1 120 2 view .LVU138
 553 009a FFF7FEFF 		bl	trigger_low
 554              	.LVL62:
 122:simpleserial-base.c **** 
 555              		.loc 1 122 2 view .LVU139
 126:simpleserial-base.c **** 
 556              		.loc 1 126 2 view .LVU140
 557 009e 2200     		movs	r2, r4
 558 00a0 1021     		movs	r1, #16
 559 00a2 4032     		adds	r2, r2, #64
 560 00a4 7220     		movs	r0, #114
 561 00a6 FFF7FEFF 		bl	simpleserial_put
 562              	.LVL63:
 128:simpleserial-base.c **** 
 563              		.loc 1 128 2 view .LVU141
 126:simpleserial-base.c **** 
 564              		.loc 1 126 2 is_stmt 0 view .LVU142
 565 00aa 4246     		mov	r2, r8
 566 00ac DAE7     		b	.L18
 567              	.L28:
 568 00ae C046     		.align	2
 569              	.L27:
 570 00b0 00000000 		.word	.LANCHOR0
 571              	.LBE19:
 572              	.LBE18:
 573              	.LBE20:
 574              	.LBE21:
 575              		.cfi_endproc
 576              	.LFE7:
 578              		.section	.text.get_pt,"ax",%progbits
 579              		.align	1
 580              		.p2align 2,,3
 581              		.global	get_pt
 582              		.syntax unified
 583              		.code	16
 584              		.thumb_func
 585              		.fpu softvfp
 587              	get_pt:
 588              	.LVL64:
 589              	.LFB5:
 107:simpleserial-base.c **** 	/**********************************
 590              		.loc 1 107 1 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 112:simpleserial-base.c **** 
 594              		.loc 1 112 2 view .LVU144
 107:simpleserial-base.c **** 	/**********************************
 595              		.loc 1 107 1 is_stmt 0 view .LVU145
 596 0000 70B5     		push	{r4, r5, r6, lr}
 597              	.LCFI5:
 598              		.cfi_def_cfa_offset 16
 599              		.cfi_offset 4, -16
 600              		.cfi_offset 5, -12
 601              		.cfi_offset 6, -8
 602              		.cfi_offset 14, -4
 112:simpleserial-base.c **** 
 603              		.loc 1 112 19 view .LVU146
 604 0002 6026     		movs	r6, #96
 605 0004 134C     		ldr	r4, .L33
 107:simpleserial-base.c **** 	/**********************************
 606              		.loc 1 107 1 view .LVU147
 607 0006 0500     		movs	r5, r0
 112:simpleserial-base.c **** 
 608              		.loc 1 112 5 view .LVU148
 609 0008 A35D     		ldrb	r3, [r4, r6]
 610 000a 012B     		cmp	r3, #1
 611 000c 0FD0     		beq	.L32
 132:simpleserial-base.c **** 		key_entered = 1;
 612              		.loc 1 132 3 is_stmt 1 view .LVU149
 613 000e 0100     		movs	r1, r0
 614              	.LVL65:
 132:simpleserial-base.c **** 		key_entered = 1;
 615              		.loc 1 132 3 is_stmt 0 view .LVU150
 616 0010 1022     		movs	r2, #16
 617 0012 2000     		movs	r0, r4
 618              	.LVL66:
 132:simpleserial-base.c **** 		key_entered = 1;
 619              		.loc 1 132 3 view .LVU151
 620 0014 FFF7FEFF 		bl	memcpy
 621              	.LVL67:
 133:simpleserial-base.c **** 
 622              		.loc 1 133 3 is_stmt 1 view .LVU152
 133:simpleserial-base.c **** 
 623              		.loc 1 133 15 is_stmt 0 view .LVU153
 624 0018 0123     		movs	r3, #1
 625 001a A355     		strb	r3, [r4, r6]
 135:simpleserial-base.c **** 
 626              		.loc 1 135 3 is_stmt 1 view .LVU154
 627 001c FFF7FEFF 		bl	trigger_low
 628              	.LVL68:
 137:simpleserial-base.c **** 		return 0x00;
 629              		.loc 1 137 3 view .LVU155
 630 0020 2A00     		movs	r2, r5
 631 0022 1021     		movs	r1, #16
 632 0024 7220     		movs	r0, #114
 633 0026 FFF7FEFF 		bl	simpleserial_put
 634              	.LVL69:
 138:simpleserial-base.c **** 	}
 635              		.loc 1 138 3 view .LVU156
 636              	.L31:
 141:simpleserial-base.c **** 
 637              		.loc 1 141 1 is_stmt 0 view .LVU157
 638              		@ sp needed
 639 002a 0020     		movs	r0, #0
 640              	.LVL70:
 141:simpleserial-base.c **** 
 641              		.loc 1 141 1 view .LVU158
 642 002c 70BD     		pop	{r4, r5, r6, pc}
 643              	.LVL71:
 644              	.L32:
 645              	.LBB24:
 646              	.LBI24:
 106:simpleserial-base.c **** {
 647              		.loc 1 106 9 is_stmt 1 view .LVU159
 648              	.LBB25:
 114:simpleserial-base.c **** 
 649              		.loc 1 114 2 view .LVU160
 650 002e 2000     		movs	r0, r4
 651              	.LVL72:
 114:simpleserial-base.c **** 
 652              		.loc 1 114 2 is_stmt 0 view .LVU161
 653 0030 2900     		movs	r1, r5
 654              	.LVL73:
 114:simpleserial-base.c **** 
 655              		.loc 1 114 2 view .LVU162
 656 0032 1022     		movs	r2, #16
 657 0034 3030     		adds	r0, r0, #48
 658 0036 FFF7FEFF 		bl	memcpy
 659              	.LVL74:
 116:simpleserial-base.c **** 
 660              		.loc 1 116 2 is_stmt 1 view .LVU163
 661 003a FFF7FEFF 		bl	trigger_high
 662              	.LVL75:
 118:simpleserial-base.c **** 
 663              		.loc 1 118 2 view .LVU164
 664 003e FFF7FEFF 		bl	encrypt
 665              	.LVL76:
 120:simpleserial-base.c **** 
 666              		.loc 1 120 2 view .LVU165
 667 0042 FFF7FEFF 		bl	trigger_low
 668              	.LVL77:
 122:simpleserial-base.c **** 
 669              		.loc 1 122 2 view .LVU166
 126:simpleserial-base.c **** 
 670              		.loc 1 126 2 view .LVU167
 671 0046 2200     		movs	r2, r4
 672 0048 1021     		movs	r1, #16
 673 004a 7220     		movs	r0, #114
 674 004c 4032     		adds	r2, r2, #64
 675 004e FFF7FEFF 		bl	simpleserial_put
 676              	.LVL78:
 128:simpleserial-base.c **** 
 677              		.loc 1 128 2 view .LVU168
 678 0052 EAE7     		b	.L31
 679              	.L34:
 680              		.align	2
 681              	.L33:
 682 0054 00000000 		.word	.LANCHOR0
 683              	.LBE25:
 684              	.LBE24:
 685              		.cfi_endproc
 686              	.LFE5:
 688              		.section	.text.reset,"ax",%progbits
 689              		.align	1
 690              		.p2align 2,,3
 691              		.global	reset
 692              		.syntax unified
 693              		.code	16
 694              		.thumb_func
 695              		.fpu softvfp
 697              	reset:
 698              	.LVL79:
 699              	.LFB6:
 144:simpleserial-base.c **** 	// Reset key here if needed
 700              		.loc 1 144 1 view -0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              		@ link register save eliminated.
 146:simpleserial-base.c **** }
 705              		.loc 1 146 2 view .LVU170
 147:simpleserial-base.c **** 
 706              		.loc 1 147 1 is_stmt 0 view .LVU171
 707 0000 0020     		movs	r0, #0
 708              	.LVL80:
 147:simpleserial-base.c **** 
 709              		.loc 1 147 1 view .LVU172
 710              		@ sp needed
 711 0002 7047     		bx	lr
 712              		.cfi_endproc
 713              	.LFE6:
 715              		.section	.text.startup.main,"ax",%progbits
 716              		.align	1
 717              		.p2align 2,,3
 718              		.global	main
 719              		.syntax unified
 720              		.code	16
 721              		.thumb_func
 722              		.fpu softvfp
 724              	main:
 725              	.LFB8:
 181:simpleserial-base.c **** #endif
 182:simpleserial-base.c **** 
 183:simpleserial-base.c **** int main(void)
 184:simpleserial-base.c **** {
 726              		.loc 1 184 1 is_stmt 1 view -0
 727              		.cfi_startproc
 728              		@ Volatile: function does not return.
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 185:simpleserial-base.c ****     platform_init();
 731              		.loc 1 185 5 view .LVU174
 184:simpleserial-base.c ****     platform_init();
 732              		.loc 1 184 1 is_stmt 0 view .LVU175
 733 0000 10B5     		push	{r4, lr}
 734              	.LCFI6:
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 4, -8
 737              		.cfi_offset 14, -4
 738              		.loc 1 185 5 view .LVU176
 739 0002 FFF7FEFF 		bl	platform_init
 740              	.LVL81:
 186:simpleserial-base.c **** 	init_uart();
 741              		.loc 1 186 2 is_stmt 1 view .LVU177
 742 0006 FFF7FEFF 		bl	init_uart
 743              	.LVL82:
 187:simpleserial-base.c **** 	trigger_setup();
 744              		.loc 1 187 2 view .LVU178
 745 000a FFF7FEFF 		bl	trigger_setup
 746              	.LVL83:
 188:simpleserial-base.c **** 
 189:simpleserial-base.c **** 	simpleserial_init();
 747              		.loc 1 189 2 view .LVU179
 748 000e FFF7FEFF 		bl	simpleserial_init
 749              	.LVL84:
 190:simpleserial-base.c **** #if SS_VER != SS_VER_2_1
 191:simpleserial-base.c **** 	simpleserial_addcmd('p', 16, get_pt);
 192:simpleserial-base.c **** 	simpleserial_addcmd('k', 16, get_key);
 193:simpleserial-base.c **** 	simpleserial_addcmd('x', 0, reset);
 194:simpleserial-base.c **** #else
 195:simpleserial-base.c ****     simpleserial_addcmd(0x01, 16, aes);
 750              		.loc 1 195 5 view .LVU180
 751 0012 1021     		movs	r1, #16
 752 0014 0120     		movs	r0, #1
 753 0016 034A     		ldr	r2, .L38
 754 0018 FFF7FEFF 		bl	simpleserial_addcmd
 755              	.LVL85:
 756              	.L37:
 196:simpleserial-base.c **** #endif
 197:simpleserial-base.c **** 	while(1)
 757              		.loc 1 197 2 discriminator 1 view .LVU181
 198:simpleserial-base.c **** 		simpleserial_get();
 758              		.loc 1 198 3 discriminator 1 view .LVU182
 759 001c FFF7FEFF 		bl	simpleserial_get
 760              	.LVL86:
 197:simpleserial-base.c **** 		simpleserial_get();
 761              		.loc 1 197 7 discriminator 1 view .LVU183
 762 0020 FCE7     		b	.L37
 763              	.L39:
 764 0022 C046     		.align	2
 765              	.L38:
 766 0024 00000000 		.word	aes
 767              		.cfi_endproc
 768              	.LFE8:
 770              		.section	.text.Cat,"ax",%progbits
 771              		.align	1
 772              		.p2align 2,,3
 773              		.global	Cat
 774              		.syntax unified
 775              		.code	16
 776              		.thumb_func
 777              		.fpu softvfp
 779              	Cat:
 780              	.LVL87:
 781              	.LFB9:
 199:simpleserial-base.c **** }
 200:simpleserial-base.c **** 
 201:simpleserial-base.c **** uint32_t Cat(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3){
 782              		.loc 1 201 61 view -0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 202:simpleserial-base.c **** 	uint32_t word = 0;
 787              		.loc 1 202 2 view .LVU185
 203:simpleserial-base.c **** 	word += b0;
 788              		.loc 1 203 2 view .LVU186
 204:simpleserial-base.c **** 	word = (word << 8);
 789              		.loc 1 204 2 view .LVU187
 790              		.loc 1 204 7 is_stmt 0 view .LVU188
 791 0000 0002     		lsls	r0, r0, #8
 792              	.LVL88:
 205:simpleserial-base.c **** 	word += b1;
 793              		.loc 1 205 2 is_stmt 1 view .LVU189
 794              		.loc 1 205 7 is_stmt 0 view .LVU190
 795 0002 0818     		adds	r0, r1, r0
 796              	.LVL89:
 206:simpleserial-base.c **** 	word = (word << 8);
 797              		.loc 1 206 2 is_stmt 1 view .LVU191
 798              		.loc 1 206 7 is_stmt 0 view .LVU192
 799 0004 0002     		lsls	r0, r0, #8
 800              	.LVL90:
 207:simpleserial-base.c **** 	word += b2;
 801              		.loc 1 207 2 is_stmt 1 view .LVU193
 802              		.loc 1 207 7 is_stmt 0 view .LVU194
 803 0006 1018     		adds	r0, r2, r0
 804              	.LVL91:
 208:simpleserial-base.c **** 	word = (word << 8);
 805              		.loc 1 208 2 is_stmt 1 view .LVU195
 806              		.loc 1 208 7 is_stmt 0 view .LVU196
 807 0008 0002     		lsls	r0, r0, #8
 808              	.LVL92:
 209:simpleserial-base.c **** 	word += b3;
 809              		.loc 1 209 2 is_stmt 1 view .LVU197
 210:simpleserial-base.c **** 	return word;
 810              		.loc 1 210 2 view .LVU198
 209:simpleserial-base.c **** 	word += b3;
 811              		.loc 1 209 7 is_stmt 0 view .LVU199
 812 000a 1818     		adds	r0, r3, r0
 813              	.LVL93:
 211:simpleserial-base.c **** }
 814              		.loc 1 211 1 view .LVU200
 815              		@ sp needed
 816 000c 7047     		bx	lr
 817              		.cfi_endproc
 818              	.LFE9:
 820              		.global	PlainText
 821              		.global	Key
 822              		.global	key_entered
 823              		.global	S_Matrix
 824              		.global	Mask_Matrix
 825              		.global	ST_Matrix
 826              		.global	ExpandedKey
 827              		.global	StateArray
 828 000e C046     		.bss
 829              		.align	2
 830              		.set	.LANCHOR0,. + 0
 833              	Key:
 834 0000 00000000 		.space	16
 834      00000000 
 834      00000000 
 834      00000000 
 837              	Mask_Matrix:
 838 0010 00000000 		.space	16
 838      00000000 
 838      00000000 
 838      00000000 
 841              	ST_Matrix:
 842 0020 00000000 		.space	16
 842      00000000 
 842      00000000 
 842      00000000 
 845              	PlainText:
 846 0030 00000000 		.space	16
 846      00000000 
 846      00000000 
 846      00000000 
 849              	StateArray:
 850 0040 00000000 		.space	16
 850      00000000 
 850      00000000 
 850      00000000 
 853              	S_Matrix:
 854 0050 00000000 		.space	16
 854      00000000 
 854      00000000 
 854      00000000 
 857              	key_entered:
 858 0060 00       		.space	1
 859 0061 000000   		.space	3
 862              	ExpandedKey:
 863 0064 00000000 		.space	176
 863      00000000 
 863      00000000 
 863      00000000 
 863      00000000 
 864              		.text
 865              	.Letext0:
 866              		.file 2 "c:\\users\\alexb\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\
 867              		.file 3 "c:\\users\\alexb\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_std
 868              		.file 4 ".././hal/hal.h"
 869              		.file 5 ".././hal/stm32f0/stm32f0_hal.h"
 870              		.file 6 ".././simpleserial/simpleserial.h"
 871              		.file 7 "c:\\users\\alexb\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\time.h"
 872              		.file 8 "AES_128.h"
 873              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 simpleserial-base.c
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:16     .text.get_key:00000000 $t
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:25     .text.get_key:00000000 get_key
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:59     .text.get_key:00000010 $d
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:64     .text.encrypt:00000000 $t
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:72     .text.encrypt:00000000 encrypt
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:349    .text.encrypt:0000014c $d
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:862    .bss:00000064 ExpandedKey
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:356    .text.aes:00000000 $t
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:364    .text.aes:00000000 aes
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:570    .text.aes:000000b0 $d
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:579    .text.get_pt:00000000 $t
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:587    .text.get_pt:00000000 get_pt
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:682    .text.get_pt:00000054 $d
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:689    .text.reset:00000000 $t
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:697    .text.reset:00000000 reset
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:716    .text.startup.main:00000000 $t
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:724    .text.startup.main:00000000 main
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:766    .text.startup.main:00000024 $d
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:771    .text.Cat:00000000 $t
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:779    .text.Cat:00000000 Cat
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:845    .bss:00000030 PlainText
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:833    .bss:00000000 Key
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:857    .bss:00000060 key_entered
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:853    .bss:00000050 S_Matrix
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:837    .bss:00000010 Mask_Matrix
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:841    .bss:00000020 ST_Matrix
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:849    .bss:00000040 StateArray
C:\Users\alexb\AppData\Local\Temp\cco8mOG9.s:829    .bss:00000000 $d

UNDEFINED SYMBOLS
memcpy
time
srand
rand
AddMatrices
ExpandKey
AddRoundKey
SubBytes
ShiftRows
MixColumns
trigger_low
simpleserial_put
trigger_high
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get

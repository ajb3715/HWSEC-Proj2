   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"simpleserial-base.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.get_key,"ax",%progbits
  16              		.align	1
  17              		.p2align 2,,3
  18              		.global	get_key
  19              		.arch armv6s-m
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  23              		.fpu softvfp
  25              	get_key:
  26              	.LVL0:
  27              	.LFB3:
  28              		.file 1 "simpleserial-base.c"
   1:simpleserial-base.c **** /*
   2:simpleserial-base.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-base.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:simpleserial-base.c **** 
   5:simpleserial-base.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-base.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-base.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-base.c ****     (at your option) any later version.
   9:simpleserial-base.c **** 
  10:simpleserial-base.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-base.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-base.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-base.c ****     GNU General Public License for more details.
  14:simpleserial-base.c **** 
  15:simpleserial-base.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-base.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-base.c **** */
  18:simpleserial-base.c **** 
  19:simpleserial-base.c **** #include "hal.h"
  20:simpleserial-base.c **** #include <stdint.h>
  21:simpleserial-base.c **** #include "simpleserial.h"
  22:simpleserial-base.c **** #include "AES_128.h"
  23:simpleserial-base.c **** #include <time.h>
  24:simpleserial-base.c **** 
  25:simpleserial-base.c **** //AES current state matrix
  26:simpleserial-base.c **** unsigned char StateArray [4][4];
  27:simpleserial-base.c **** //Expanded Key matrix
  28:simpleserial-base.c **** unsigned char ExpandedKey[11][4][4];
  29:simpleserial-base.c **** //Masked state array matrix
  30:simpleserial-base.c **** unsigned char ST_Matrix [4][4];
  31:simpleserial-base.c **** //Mask Matrix
  32:simpleserial-base.c **** unsigned char Mask_Matrix[4][4];
  33:simpleserial-base.c **** //State array
  34:simpleserial-base.c **** unsigned char S_Matrix[4][4];
  35:simpleserial-base.c **** //Flag for if the key was sent to the board
  36:simpleserial-base.c **** unsigned char key_entered = 0;
  37:simpleserial-base.c **** 
  38:simpleserial-base.c **** unsigned char Key[4][4]= {  {0x00, 0x00, 0x00, 0x00},
  39:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  40:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  41:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00} };
  42:simpleserial-base.c **** 
  43:simpleserial-base.c **** unsigned char PlainText[4][4]  = {  {0x00, 0x00, 0x00, 0x00},
  44:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  45:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00},
  46:simpleserial-base.c **** 		{0x00, 0x00, 0x00, 0x00} };
  47:simpleserial-base.c **** 
  48:simpleserial-base.c **** void AESRound(unsigned int StateArray[4],unsigned int Key [4] );
  49:simpleserial-base.c **** 
  50:simpleserial-base.c **** void encrypt();
  51:simpleserial-base.c **** uint8_t get_key(uint8_t* k, uint8_t len)
  52:simpleserial-base.c **** {
  29              		.loc 1 52 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  53:simpleserial-base.c **** 	//Set the internal key
  54:simpleserial-base.c **** 	memcpy(Key, k, 16);
  33              		.loc 1 54 2 view .LVU1
  52:simpleserial-base.c **** 	//Set the internal key
  34              		.loc 1 52 1 is_stmt 0 view .LVU2
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
  52:simpleserial-base.c **** 	//Set the internal key
  40              		.loc 1 52 1 view .LVU3
  41 0002 0100     		movs	r1, r0
  42              	.LVL1:
  55:simpleserial-base.c **** 	return 0x00;
  56:simpleserial-base.c **** }
  43              		.loc 1 56 1 view .LVU4
  44              		@ sp needed
  54:simpleserial-base.c **** 	return 0x00;
  45              		.loc 1 54 2 view .LVU5
  46 0004 1022     		movs	r2, #16
  47 0006 0248     		ldr	r0, .L3
  48              	.LVL2:
  54:simpleserial-base.c **** 	return 0x00;
  49              		.loc 1 54 2 view .LVU6
  50 0008 FFF7FEFF 		bl	memcpy
  51              	.LVL3:
  55:simpleserial-base.c **** 	return 0x00;
  52              		.loc 1 55 2 is_stmt 1 view .LVU7
  53              		.loc 1 56 1 is_stmt 0 view .LVU8
  54 000c 0020     		movs	r0, #0
  55 000e 10BD     		pop	{r4, pc}
  56              	.L4:
  57              		.align	2
  58              	.L3:
  59 0010 00000000 		.word	.LANCHOR0
  60              		.cfi_endproc
  61              	.LFE3:
  63              		.section	.text.encrypt,"ax",%progbits
  64              		.align	1
  65              		.p2align 2,,3
  66              		.global	encrypt
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  70              		.fpu softvfp
  72              	encrypt:
  73              	.LFB4:
  57:simpleserial-base.c **** 
  58:simpleserial-base.c **** void encrypt(){
  74              		.loc 1 58 15 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  59:simpleserial-base.c **** 	//generate 16 random values for the mask
  60:simpleserial-base.c **** 	srand(time(NULL));
  78              		.loc 1 60 2 view .LVU10
  58:simpleserial-base.c **** 	//generate 16 random values for the mask
  79              		.loc 1 58 15 is_stmt 0 view .LVU11
  80 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 20
  83              		.cfi_offset 4, -20
  84              		.cfi_offset 5, -16
  85              		.cfi_offset 6, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 D646     		mov	lr, r10
  89 0004 4646     		mov	r6, r8
  90 0006 4F46     		mov	r7, r9
  91              		.loc 1 60 2 view .LVU12
  92 0008 0020     		movs	r0, #0
  58:simpleserial-base.c **** 	//generate 16 random values for the mask
  93              		.loc 1 58 15 view .LVU13
  94 000a C0B5     		push	{r6, r7, lr}
  95              	.LCFI2:
  96              		.cfi_def_cfa_offset 32
  97              		.cfi_offset 8, -32
  98              		.cfi_offset 9, -28
  99              		.cfi_offset 10, -24
 100              		.loc 1 60 2 view .LVU14
 101 000c FFF7FEFF 		bl	time
 102              	.LVL4:
 103 0010 FFF7FEFF 		bl	srand
 104              	.LVL5:
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 105              		.loc 1 61 2 is_stmt 1 view .LVU15
 106              	.LBB4:
 107              		.loc 1 61 7 view .LVU16
 108              		.loc 1 61 18 view .LVU17
 109 0014 4D4B     		ldr	r3, .L12
 110              	.LBB5:
 111              	.LBB6:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
  63:simpleserial-base.c **** 			Mask_Matrix[i][j] = rand() % 256;
 112              		.loc 1 63 31 is_stmt 0 view .LVU18
 113 0016 FF27     		movs	r7, #255
 114 0018 1D00     		movs	r5, r3
 115 001a 1E00     		movs	r6, r3
 116 001c 9846     		mov	r8, r3
 117 001e 1035     		adds	r5, r5, #16
 118 0020 2036     		adds	r6, r6, #32
 119              	.LVL6:
 120              	.L6:
 121              		.loc 1 63 31 view .LVU19
 122              	.LBE6:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 123              		.loc 1 62 18 is_stmt 1 view .LVU20
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 124              		.loc 1 62 11 is_stmt 0 view .LVU21
 125 0022 0024     		movs	r4, #0
 126              	.LVL7:
 127              	.L7:
 128              	.LBB7:
 129              		.loc 1 63 4 is_stmt 1 discriminator 3 view .LVU22
 130              		.loc 1 63 24 is_stmt 0 discriminator 3 view .LVU23
 131 0024 FFF7FEFF 		bl	rand
 132              	.LVL8:
 133              		.loc 1 63 31 discriminator 3 view .LVU24
 134 0028 C317     		asrs	r3, r0, #31
 135 002a 1B0E     		lsrs	r3, r3, #24
 136 002c C018     		adds	r0, r0, r3
 137 002e 3840     		ands	r0, r7
 138 0030 C01A     		subs	r0, r0, r3
 139              		.loc 1 63 22 discriminator 3 view .LVU25
 140 0032 2855     		strb	r0, [r5, r4]
 141              	.LBE7:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 142              		.loc 1 62 23 is_stmt 1 discriminator 3 view .LVU26
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 143              		.loc 1 62 24 is_stmt 0 discriminator 3 view .LVU27
 144 0034 0134     		adds	r4, r4, #1
 145              	.LVL9:
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 146              		.loc 1 62 18 is_stmt 1 discriminator 3 view .LVU28
  62:simpleserial-base.c **** 		for(int j = 0; j<4; j++){
 147              		.loc 1 62 3 is_stmt 0 discriminator 3 view .LVU29
 148 0036 042C     		cmp	r4, #4
 149 0038 F4D1     		bne	.L7
 150              	.LBE5:
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 151              		.loc 1 61 25 is_stmt 1 discriminator 2 view .LVU30
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 152              		.loc 1 61 18 discriminator 2 view .LVU31
  61:simpleserial-base.c **** 	for (int i = 0; i < 4; i ++){
 153              		.loc 1 61 2 is_stmt 0 discriminator 2 view .LVU32
 154 003a 0435     		adds	r5, r5, #4
 155 003c B542     		cmp	r5, r6
 156 003e F0D1     		bne	.L6
 157              	.LBE4:
  64:simpleserial-base.c **** 		}
  65:simpleserial-base.c **** 	}
  66:simpleserial-base.c **** 	//Mask the plaintext 
  67:simpleserial-base.c **** 	AddMatrices(Mask_Matrix, PlainText, ST_Matrix);
 158              		.loc 1 67 2 is_stmt 1 view .LVU33
 159 0040 4446     		mov	r4, r8
 160              	.LVL10:
 161              		.loc 1 67 2 is_stmt 0 view .LVU34
 162 0042 4746     		mov	r7, r8
 163 0044 4546     		mov	r5, r8
 164 0046 2034     		adds	r4, r4, #32
 165 0048 1035     		adds	r5, r5, #16
 166 004a 3037     		adds	r7, r7, #48
 167 004c 2200     		movs	r2, r4
 168 004e 3900     		movs	r1, r7
 169 0050 2800     		movs	r0, r5
 170 0052 FFF7FEFF 		bl	AddMatrices
 171              	.LVL11:
  68:simpleserial-base.c **** 
  69:simpleserial-base.c **** 	ExpandKey(Key, ExpandedKey);
 172              		.loc 1 69 2 is_stmt 1 view .LVU35
 173 0056 3E4E     		ldr	r6, .L12+4
 174 0058 4046     		mov	r0, r8
 175 005a 3100     		movs	r1, r6
 176 005c FFF7FEFF 		bl	ExpandKey
 177              	.LVL12:
  70:simpleserial-base.c **** 	//Set the state array
  71:simpleserial-base.c **** 	memcpy(StateArray, PlainText, 4 * 4 * sizeof(unsigned char));
 178              		.loc 1 71 2 view .LVU36
  72:simpleserial-base.c **** 
  73:simpleserial-base.c **** 	//Add the round key 
  74:simpleserial-base.c **** 	AddRoundKey(ExpandedKey[0], StateArray);
 179              		.loc 1 74 2 view .LVU37
  71:simpleserial-base.c **** 
 180              		.loc 1 71 2 is_stmt 0 view .LVU38
 181 0060 4346     		mov	r3, r8
 182 0062 4033     		adds	r3, r3, #64
 183 0064 07CF     		ldmia	r7!, {r0, r1, r2}
 184 0066 07C3     		stmia	r3!, {r0, r1, r2}
 185 0068 3A68     		ldr	r2, [r7]
 186              		.loc 1 74 2 view .LVU39
 187 006a 4746     		mov	r7, r8
 188 006c 4037     		adds	r7, r7, #64
  71:simpleserial-base.c **** 
 189              		.loc 1 71 2 view .LVU40
 190 006e 1A60     		str	r2, [r3]
 191              		.loc 1 74 2 view .LVU41
 192 0070 3000     		movs	r0, r6
 193 0072 3900     		movs	r1, r7
 194 0074 FFF7FEFF 		bl	AddRoundKey
 195              	.LVL13:
  75:simpleserial-base.c **** 
  76:simpleserial-base.c **** 	AddRoundKey(ExpandedKey[0], ST_Matrix);
 196              		.loc 1 76 2 is_stmt 1 view .LVU42
 197 0078 3000     		movs	r0, r6
 198 007a 2100     		movs	r1, r4
 199 007c FFF7FEFF 		bl	AddRoundKey
 200              	.LVL14:
  77:simpleserial-base.c **** 	int i;
 201              		.loc 1 77 2 view .LVU43
  78:simpleserial-base.c **** 	for(i=1; i<=10; i++){
 202              		.loc 1 78 2 view .LVU44
 203              		.loc 1 78 11 view .LVU45
  79:simpleserial-base.c **** 
  80:simpleserial-base.c **** 		//Unmask input
  81:simpleserial-base.c **** 		AddMatrices(ST_Matrix, Mask_Matrix, S_Matrix);
 204              		.loc 1 81 3 view .LVU46
 205 0080 5023     		movs	r3, #80
 206 0082 4344     		add	r3, r3, r8
 207 0084 9946     		mov	r9, r3
 208 0086 1A00     		movs	r2, r3
 209 0088 2900     		movs	r1, r5
 210 008a 2000     		movs	r0, r4
 211 008c FFF7FEFF 		bl	AddMatrices
 212              	.LVL15:
  82:simpleserial-base.c **** 		//Apply Sbox
  83:simpleserial-base.c **** 		SubBytes(S_Matrix);
 213              		.loc 1 83 3 view .LVU47
 214 0090 4846     		mov	r0, r9
 215 0092 FFF7FEFF 		bl	SubBytes
 216              	.LVL16:
  84:simpleserial-base.c **** 		SubBytes(StateArray);
 217              		.loc 1 84 3 view .LVU48
 218 0096 3800     		movs	r0, r7
 219 0098 FFF7FEFF 		bl	SubBytes
 220              	.LVL17:
  85:simpleserial-base.c **** 		//Remask Output
  86:simpleserial-base.c **** 		AddMatrices(S_Matrix, Mask_Matrix, ST_Matrix);
 221              		.loc 1 86 3 view .LVU49
 222 009c 2200     		movs	r2, r4
 223 009e 2900     		movs	r1, r5
 224 00a0 4846     		mov	r0, r9
 225 00a2 FFF7FEFF 		bl	AddMatrices
 226              	.LVL18:
  87:simpleserial-base.c **** 		//ShiftRows 
  88:simpleserial-base.c **** 		ShiftRows(StateArray);
 227              		.loc 1 88 3 view .LVU50
 228 00a6 3800     		movs	r0, r7
 229 00a8 FFF7FEFF 		bl	ShiftRows
 230              	.LVL19:
  89:simpleserial-base.c **** 		ShiftRows(ST_Matrix);
 231              		.loc 1 89 3 view .LVU51
 232 00ac 2000     		movs	r0, r4
 233 00ae FFF7FEFF 		bl	ShiftRows
 234              	.LVL20:
  90:simpleserial-base.c **** 		ShiftRows(Mask_Matrix);
 235              		.loc 1 90 3 view .LVU52
 236 00b2 2800     		movs	r0, r5
 237 00b4 FFF7FEFF 		bl	ShiftRows
 238              	.LVL21:
  91:simpleserial-base.c **** 
  92:simpleserial-base.c **** 		if(i!=10){
 239              		.loc 1 92 3 view .LVU53
  78:simpleserial-base.c **** 
 240              		.loc 1 78 7 is_stmt 0 view .LVU54
 241 00b8 0123     		movs	r3, #1
 242 00ba 9A46     		mov	r10, r3
 243 00bc 1036     		adds	r6, r6, #16
 244              	.LVL22:
 245              	.L9:
  93:simpleserial-base.c **** 			//Mix Columns 9 times 
  94:simpleserial-base.c **** 			MixColumns(StateArray);
 246              		.loc 1 94 4 is_stmt 1 view .LVU55
 247 00be 3800     		movs	r0, r7
 248 00c0 FFF7FEFF 		bl	MixColumns
 249              	.LVL23:
  95:simpleserial-base.c **** 			MixColumns(ST_Matrix);
 250              		.loc 1 95 4 view .LVU56
 251 00c4 2000     		movs	r0, r4
 252 00c6 FFF7FEFF 		bl	MixColumns
 253              	.LVL24:
  96:simpleserial-base.c **** 			MixColumns(Mask_Matrix);
 254              		.loc 1 96 4 view .LVU57
 255 00ca 2800     		movs	r0, r5
 256 00cc FFF7FEFF 		bl	MixColumns
 257              	.LVL25:
  97:simpleserial-base.c **** 		}
  98:simpleserial-base.c **** 		//Add the round key
  99:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], StateArray);
 258              		.loc 1 99 3 view .LVU58
 259 00d0 3000     		movs	r0, r6
 260 00d2 3900     		movs	r1, r7
 261 00d4 FFF7FEFF 		bl	AddRoundKey
 262              	.LVL26:
 100:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 263              		.loc 1 100 3 view .LVU59
 264 00d8 3000     		movs	r0, r6
 265 00da 2100     		movs	r1, r4
 266 00dc FFF7FEFF 		bl	AddRoundKey
 267              	.LVL27:
  78:simpleserial-base.c **** 
 268              		.loc 1 78 18 view .LVU60
  78:simpleserial-base.c **** 
 269              		.loc 1 78 19 is_stmt 0 view .LVU61
 270 00e0 0123     		movs	r3, #1
 271 00e2 9C46     		mov	ip, r3
  81:simpleserial-base.c **** 		//Apply Sbox
 272              		.loc 1 81 3 view .LVU62
 273 00e4 4F33     		adds	r3, r3, #79
 274 00e6 4344     		add	r3, r3, r8
 275 00e8 9946     		mov	r9, r3
 276 00ea 1A00     		movs	r2, r3
 277 00ec 2900     		movs	r1, r5
 278 00ee 2000     		movs	r0, r4
  78:simpleserial-base.c **** 
 279              		.loc 1 78 19 view .LVU63
 280 00f0 E244     		add	r10, r10, ip
 281              	.LVL28:
  78:simpleserial-base.c **** 
 282              		.loc 1 78 11 is_stmt 1 view .LVU64
  81:simpleserial-base.c **** 		//Apply Sbox
 283              		.loc 1 81 3 view .LVU65
 284 00f2 FFF7FEFF 		bl	AddMatrices
 285              	.LVL29:
  83:simpleserial-base.c **** 		SubBytes(StateArray);
 286              		.loc 1 83 3 view .LVU66
 287 00f6 4846     		mov	r0, r9
 288 00f8 FFF7FEFF 		bl	SubBytes
 289              	.LVL30:
  84:simpleserial-base.c **** 		//Remask Output
 290              		.loc 1 84 3 view .LVU67
 291 00fc 3800     		movs	r0, r7
 292 00fe FFF7FEFF 		bl	SubBytes
 293              	.LVL31:
  86:simpleserial-base.c **** 		//ShiftRows 
 294              		.loc 1 86 3 view .LVU68
 295 0102 2200     		movs	r2, r4
 296 0104 2900     		movs	r1, r5
 297 0106 4846     		mov	r0, r9
 298 0108 FFF7FEFF 		bl	AddMatrices
 299              	.LVL32:
  88:simpleserial-base.c **** 		ShiftRows(ST_Matrix);
 300              		.loc 1 88 3 view .LVU69
 301 010c 3800     		movs	r0, r7
 302 010e FFF7FEFF 		bl	ShiftRows
 303              	.LVL33:
  89:simpleserial-base.c **** 		ShiftRows(Mask_Matrix);
 304              		.loc 1 89 3 view .LVU70
 305 0112 2000     		movs	r0, r4
 306 0114 FFF7FEFF 		bl	ShiftRows
 307              	.LVL34:
  90:simpleserial-base.c **** 
 308              		.loc 1 90 3 view .LVU71
 309 0118 2800     		movs	r0, r5
 310 011a FFF7FEFF 		bl	ShiftRows
 311              	.LVL35:
  92:simpleserial-base.c **** 			//Mix Columns 9 times 
 312              		.loc 1 92 3 view .LVU72
  92:simpleserial-base.c **** 			//Mix Columns 9 times 
 313              		.loc 1 92 5 is_stmt 0 view .LVU73
 314 011e 5346     		mov	r3, r10
 315 0120 1036     		adds	r6, r6, #16
 316 0122 0A2B     		cmp	r3, #10
 317 0124 CBD1     		bne	.L9
  99:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 318              		.loc 1 99 3 is_stmt 1 view .LVU74
 101:simpleserial-base.c **** 	}
 102:simpleserial-base.c **** 	//Do unmasking stuff
 103:simpleserial-base.c **** 	AddMatrices(ST_Matrix, Mask_Matrix, StateArray);
 104:simpleserial-base.c **** }	
 319              		.loc 1 104 1 is_stmt 0 view .LVU75
 320              		@ sp needed
  99:simpleserial-base.c **** 		AddRoundKey(ExpandedKey[i], ST_Matrix);
 321              		.loc 1 99 3 view .LVU76
 322 0126 0B4E     		ldr	r6, .L12+8
 323 0128 3900     		movs	r1, r7
 324 012a 3000     		movs	r0, r6
 325 012c FFF7FEFF 		bl	AddRoundKey
 326              	.LVL36:
 100:simpleserial-base.c **** 	}
 327              		.loc 1 100 3 is_stmt 1 view .LVU77
 328 0130 3000     		movs	r0, r6
 329 0132 2100     		movs	r1, r4
 330 0134 FFF7FEFF 		bl	AddRoundKey
 331              	.LVL37:
  78:simpleserial-base.c **** 
 332              		.loc 1 78 18 view .LVU78
  78:simpleserial-base.c **** 
 333              		.loc 1 78 11 view .LVU79
 103:simpleserial-base.c **** }	
 334              		.loc 1 103 2 view .LVU80
 335 0138 3A00     		movs	r2, r7
 336 013a 2900     		movs	r1, r5
 337 013c 2000     		movs	r0, r4
 338 013e FFF7FEFF 		bl	AddMatrices
 339              	.LVL38:
 340              		.loc 1 104 1 is_stmt 0 view .LVU81
 341 0142 E0BC     		pop	{r5, r6, r7}
 342 0144 BA46     		mov	r10, r7
 343 0146 B146     		mov	r9, r6
 344 0148 A846     		mov	r8, r5
 345 014a F0BD     		pop	{r4, r5, r6, r7, pc}
 346              	.L13:
 347              		.align	2
 348              	.L12:
 349 014c 00000000 		.word	.LANCHOR0
 350 0150 00000000 		.word	ExpandedKey
 351 0154 A0000000 		.word	ExpandedKey+160
 352              		.cfi_endproc
 353              	.LFE4:
 355              		.section	.text.aes,"ax",%progbits
 356              		.align	1
 357              		.p2align 2,,3
 358              		.global	aes
 359              		.syntax unified
 360              		.code	16
 361              		.thumb_func
 362              		.fpu softvfp
 364              	aes:
 365              	.LVL39:
 366              	.LFB7:
 105:simpleserial-base.c **** 
 106:simpleserial-base.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
 107:simpleserial-base.c **** {
 108:simpleserial-base.c **** 	/**********************************
 109:simpleserial-base.c **** 	* Start user-specific code here. */
 110:simpleserial-base.c **** 	trigger_high();
 111:simpleserial-base.c **** 
 112:simpleserial-base.c **** 	if ( key_entered == 1 ){
 113:simpleserial-base.c **** 
 114:simpleserial-base.c **** 	memcpy(PlainText, pt, 16);
 115:simpleserial-base.c **** 
 116:simpleserial-base.c **** 	encrypt();
 117:simpleserial-base.c **** 
 118:simpleserial-base.c **** 	pt = (uint8_t*)StateArray;
 119:simpleserial-base.c **** 
 120:simpleserial-base.c **** 	trigger_low();
 121:simpleserial-base.c **** 
 122:simpleserial-base.c **** 	simpleserial_put('r', 16, pt);
 123:simpleserial-base.c **** 
 124:simpleserial-base.c **** 	return 0x00;
 125:simpleserial-base.c **** 
 126:simpleserial-base.c **** 	}
 127:simpleserial-base.c **** 	else{
 128:simpleserial-base.c **** 		memcpy(Key, pt, 16);
 129:simpleserial-base.c **** 		key_entered = 1;
 130:simpleserial-base.c **** 
 131:simpleserial-base.c **** 		trigger_low();
 132:simpleserial-base.c **** 
 133:simpleserial-base.c **** 		simpleserial_put('r', 16, pt);
 134:simpleserial-base.c **** 		return 0x00;
 135:simpleserial-base.c **** 	}
 136:simpleserial-base.c **** 
 137:simpleserial-base.c **** }
 138:simpleserial-base.c **** 
 139:simpleserial-base.c **** uint8_t reset(uint8_t* x, uint8_t len)
 140:simpleserial-base.c **** {
 141:simpleserial-base.c **** 	// Reset key here if needed
 142:simpleserial-base.c **** 	return 0x00;
 143:simpleserial-base.c **** }
 144:simpleserial-base.c **** 
 145:simpleserial-base.c **** #if SS_VER == SS_VER_2_1
 146:simpleserial-base.c **** uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
 147:simpleserial-base.c **** {
 367              		.loc 1 147 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 148:simpleserial-base.c ****     uint8_t req_len = 0;
 371              		.loc 1 148 5 view .LVU83
 149:simpleserial-base.c ****     uint8_t err = 0;
 372              		.loc 1 149 5 view .LVU84
 150:simpleserial-base.c **** 
 151:simpleserial-base.c ****     if (scmd & 0x02) {
 373              		.loc 1 151 5 view .LVU85
 147:simpleserial-base.c ****     uint8_t req_len = 0;
 374              		.loc 1 147 1 is_stmt 0 view .LVU86
 375 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 376              	.LCFI3:
 377              		.cfi_def_cfa_offset 24
 378              		.cfi_offset 3, -24
 379              		.cfi_offset 4, -20
 380              		.cfi_offset 5, -16
 381              		.cfi_offset 6, -12
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 1E00     		movs	r6, r3
 385 0004 0223     		movs	r3, #2
 386              	.LVL40:
 147:simpleserial-base.c ****     uint8_t req_len = 0;
 387              		.loc 1 147 1 view .LVU87
 388 0006 CE46     		mov	lr, r9
 389 0008 4746     		mov	r7, r8
 390 000a 1500     		movs	r5, r2
 391 000c 1A00     		movs	r2, r3
 392              	.LVL41:
 147:simpleserial-base.c ****     uint8_t req_len = 0;
 393              		.loc 1 147 1 view .LVU88
 394 000e 0C00     		movs	r4, r1
 395 0010 80B5     		push	{r7, lr}
 396              	.LCFI4:
 397              		.cfi_def_cfa_offset 32
 398              		.cfi_offset 8, -32
 399              		.cfi_offset 9, -28
 400 0012 0A40     		ands	r2, r1
 401              		.loc 1 151 8 view .LVU89
 402 0014 0B42     		tst	r3, r1
 403 0016 2ED0     		beq	.L21
 152:simpleserial-base.c ****         req_len += 16;
 404              		.loc 1 152 9 is_stmt 1 view .LVU90
 405              	.LVL42:
 153:simpleserial-base.c ****         if (req_len > len) {
 406              		.loc 1 153 9 view .LVU91
 407              		.loc 1 153 12 is_stmt 0 view .LVU92
 408 0018 0F2D     		cmp	r5, #15
 409 001a 34D9     		bls	.L19
 154:simpleserial-base.c ****             return SS_ERR_LEN;
 155:simpleserial-base.c ****         }
 156:simpleserial-base.c ****         err = get_key(buf + req_len - 16, 16);
 410              		.loc 1 156 9 is_stmt 1 view .LVU93
 411              	.LVL43:
 412              	.LBB14:
 413              	.LBI14:
  51:simpleserial-base.c **** {
 414              		.loc 1 51 9 view .LVU94
 415              	.LBB15:
  54:simpleserial-base.c **** 	return 0x00;
 416              		.loc 1 54 2 view .LVU95
 417 001c 1022     		movs	r2, #16
 418 001e 3100     		movs	r1, r6
 419              	.LVL44:
  54:simpleserial-base.c **** 	return 0x00;
 420              		.loc 1 54 2 is_stmt 0 view .LVU96
 421 0020 2348     		ldr	r0, .L27
 422              	.LVL45:
  54:simpleserial-base.c **** 	return 0x00;
 423              		.loc 1 54 2 view .LVU97
 424 0022 FFF7FEFF 		bl	memcpy
 425              	.LVL46:
  55:simpleserial-base.c **** }
 426              		.loc 1 55 2 is_stmt 1 view .LVU98
  55:simpleserial-base.c **** }
 427              		.loc 1 55 2 is_stmt 0 view .LVU99
 428              	.LBE15:
 429              	.LBE14:
 157:simpleserial-base.c ****         if (err)
 430              		.loc 1 157 9 is_stmt 1 view .LVU100
 158:simpleserial-base.c ****             return err;
 159:simpleserial-base.c ****     }
 160:simpleserial-base.c ****     if (scmd & 0x01) {
 431              		.loc 1 160 8 is_stmt 0 view .LVU101
 432 0026 0127     		movs	r7, #1
 433 0028 2023     		movs	r3, #32
 152:simpleserial-base.c ****         if (req_len > len) {
 434              		.loc 1 152 17 view .LVU102
 435 002a 1022     		movs	r2, #16
 436 002c 9846     		mov	r8, r3
 437 002e 103B     		subs	r3, r3, #16
 438              		.loc 1 160 5 is_stmt 1 view .LVU103
 439              		.loc 1 160 8 is_stmt 0 view .LVU104
 440 0030 2742     		tst	r7, r4
 441 0032 19D0     		beq	.L18
 161:simpleserial-base.c ****         req_len += 16;
 442              		.loc 1 161 9 is_stmt 1 view .LVU105
 443              	.LVL47:
 162:simpleserial-base.c ****         if (req_len > len) {
 444              		.loc 1 162 9 view .LVU106
 445              		.loc 1 162 12 is_stmt 0 view .LVU107
 446 0034 4545     		cmp	r5, r8
 447 0036 26D3     		bcc	.L19
 448              	.LVL48:
 449              	.L26:
 163:simpleserial-base.c ****             return SS_ERR_LEN;
 164:simpleserial-base.c ****         }
 165:simpleserial-base.c ****         err = get_pt(buf + req_len - 16, 16);
 450              		.loc 1 165 9 is_stmt 1 view .LVU108
 451              		.loc 1 165 15 is_stmt 0 view .LVU109
 452 0038 F618     		adds	r6, r6, r3
 453              	.LVL49:
 454              	.LBB16:
 455              	.LBI16:
 106:simpleserial-base.c **** {
 456              		.loc 1 106 9 is_stmt 1 view .LVU110
 457              	.LBB17:
 110:simpleserial-base.c **** 
 458              		.loc 1 110 2 view .LVU111
 459 003a FFF7FEFF 		bl	trigger_high
 460              	.LVL50:
 112:simpleserial-base.c **** 
 461              		.loc 1 112 2 view .LVU112
 112:simpleserial-base.c **** 
 462              		.loc 1 112 19 is_stmt 0 view .LVU113
 463 003e 6023     		movs	r3, #96
 464 0040 1B4C     		ldr	r4, .L27
 465 0042 9946     		mov	r9, r3
 112:simpleserial-base.c **** 
 466              		.loc 1 112 5 view .LVU114
 467 0044 E35C     		ldrb	r3, [r4, r3]
 468 0046 012B     		cmp	r3, #1
 469 0048 1FD0     		beq	.L25
 128:simpleserial-base.c **** 		key_entered = 1;
 470              		.loc 1 128 3 is_stmt 1 view .LVU115
 471 004a 1022     		movs	r2, #16
 472 004c 3100     		movs	r1, r6
 473 004e 2000     		movs	r0, r4
 474 0050 FFF7FEFF 		bl	memcpy
 475              	.LVL51:
 129:simpleserial-base.c **** 
 476              		.loc 1 129 3 view .LVU116
 129:simpleserial-base.c **** 
 477              		.loc 1 129 15 is_stmt 0 view .LVU117
 478 0054 4B46     		mov	r3, r9
 479 0056 E754     		strb	r7, [r4, r3]
 131:simpleserial-base.c **** 
 480              		.loc 1 131 3 is_stmt 1 view .LVU118
 481 0058 FFF7FEFF 		bl	trigger_low
 482              	.LVL52:
 133:simpleserial-base.c **** 		return 0x00;
 483              		.loc 1 133 3 view .LVU119
 484 005c 3200     		movs	r2, r6
 485 005e 1021     		movs	r1, #16
 486 0060 7220     		movs	r0, #114
 487 0062 FFF7FEFF 		bl	simpleserial_put
 488              	.LVL53:
 134:simpleserial-base.c **** 	}
 489              		.loc 1 134 3 view .LVU120
 134:simpleserial-base.c **** 	}
 490              		.loc 1 134 10 is_stmt 0 view .LVU121
 491 0066 4246     		mov	r2, r8
 492              	.LVL54:
 493              	.L18:
 134:simpleserial-base.c **** 	}
 494              		.loc 1 134 10 view .LVU122
 495              	.LBE17:
 496              	.LBE16:
 166:simpleserial-base.c ****         if (err)
 167:simpleserial-base.c ****             return err;
 168:simpleserial-base.c ****     }
 169:simpleserial-base.c **** 
 170:simpleserial-base.c ****     if (len != req_len) {
 497              		.loc 1 170 5 is_stmt 1 view .LVU123
 498              		.loc 1 170 8 is_stmt 0 view .LVU124
 499 0068 AA42     		cmp	r2, r5
 500 006a 0CD1     		bne	.L19
 171:simpleserial-base.c ****         return SS_ERR_LEN;
 172:simpleserial-base.c ****     }
 173:simpleserial-base.c **** 
 174:simpleserial-base.c ****     return 0x00;
 501              		.loc 1 174 12 view .LVU125
 502 006c 0020     		movs	r0, #0
 503              	.L17:
 175:simpleserial-base.c **** 
 176:simpleserial-base.c **** }
 504              		.loc 1 176 1 view .LVU126
 505              		@ sp needed
 506 006e C0BC     		pop	{r6, r7}
 507 0070 B946     		mov	r9, r7
 508 0072 B046     		mov	r8, r6
 509 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 510              	.LVL55:
 511              	.L21:
 512              		.loc 1 176 1 view .LVU127
 513 0076 1023     		movs	r3, #16
 160:simpleserial-base.c ****         req_len += 16;
 514              		.loc 1 160 8 view .LVU128
 515 0078 0127     		movs	r7, #1
 516 007a 9846     		mov	r8, r3
 517 007c 0023     		movs	r3, #0
 518              	.LVL56:
 160:simpleserial-base.c ****         req_len += 16;
 519              		.loc 1 160 5 is_stmt 1 view .LVU129
 160:simpleserial-base.c ****         req_len += 16;
 520              		.loc 1 160 8 is_stmt 0 view .LVU130
 521 007e 2742     		tst	r7, r4
 522 0080 F2D0     		beq	.L18
 161:simpleserial-base.c ****         if (req_len > len) {
 523              		.loc 1 161 9 is_stmt 1 view .LVU131
 524              	.LVL57:
 162:simpleserial-base.c ****             return SS_ERR_LEN;
 525              		.loc 1 162 9 view .LVU132
 162:simpleserial-base.c ****             return SS_ERR_LEN;
 526              		.loc 1 162 12 is_stmt 0 view .LVU133
 527 0082 4545     		cmp	r5, r8
 528 0084 D8D2     		bcs	.L26
 529              	.LVL58:
 530              	.L19:
 154:simpleserial-base.c ****         }
 531              		.loc 1 154 20 view .LVU134
 532 0086 0420     		movs	r0, #4
 533 0088 F1E7     		b	.L17
 534              	.LVL59:
 535              	.L25:
 536              	.LBB21:
 537              	.LBB20:
 538              	.LBB18:
 539              	.LBI18:
 106:simpleserial-base.c **** {
 540              		.loc 1 106 9 is_stmt 1 view .LVU135
 541              	.LBB19:
 114:simpleserial-base.c **** 
 542              		.loc 1 114 2 view .LVU136
 543 008a 2000     		movs	r0, r4
 544 008c 1022     		movs	r2, #16
 545 008e 3100     		movs	r1, r6
 546 0090 3030     		adds	r0, r0, #48
 547 0092 FFF7FEFF 		bl	memcpy
 548              	.LVL60:
 116:simpleserial-base.c **** 
 549              		.loc 1 116 2 view .LVU137
 550 0096 FFF7FEFF 		bl	encrypt
 551              	.LVL61:
 118:simpleserial-base.c **** 
 552              		.loc 1 118 2 view .LVU138
 120:simpleserial-base.c **** 
 553              		.loc 1 120 2 view .LVU139
 554 009a FFF7FEFF 		bl	trigger_low
 555              	.LVL62:
 122:simpleserial-base.c **** 
 556              		.loc 1 122 2 view .LVU140
 557 009e 2200     		movs	r2, r4
 558 00a0 1021     		movs	r1, #16
 559 00a2 4032     		adds	r2, r2, #64
 560 00a4 7220     		movs	r0, #114
 561 00a6 FFF7FEFF 		bl	simpleserial_put
 562              	.LVL63:
 124:simpleserial-base.c **** 
 563              		.loc 1 124 2 view .LVU141
 122:simpleserial-base.c **** 
 564              		.loc 1 122 2 is_stmt 0 view .LVU142
 565 00aa 4246     		mov	r2, r8
 566 00ac DCE7     		b	.L18
 567              	.L28:
 568 00ae C046     		.align	2
 569              	.L27:
 570 00b0 00000000 		.word	.LANCHOR0
 571              	.LBE19:
 572              	.LBE18:
 573              	.LBE20:
 574              	.LBE21:
 575              		.cfi_endproc
 576              	.LFE7:
 578              		.section	.text.get_pt,"ax",%progbits
 579              		.align	1
 580              		.p2align 2,,3
 581              		.global	get_pt
 582              		.syntax unified
 583              		.code	16
 584              		.thumb_func
 585              		.fpu softvfp
 587              	get_pt:
 588              	.LVL64:
 589              	.LFB5:
 107:simpleserial-base.c **** 	/**********************************
 590              		.loc 1 107 1 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 110:simpleserial-base.c **** 
 594              		.loc 1 110 2 view .LVU144
 107:simpleserial-base.c **** 	/**********************************
 595              		.loc 1 107 1 is_stmt 0 view .LVU145
 596 0000 70B5     		push	{r4, r5, r6, lr}
 597              	.LCFI5:
 598              		.cfi_def_cfa_offset 16
 599              		.cfi_offset 4, -16
 600              		.cfi_offset 5, -12
 601              		.cfi_offset 6, -8
 602              		.cfi_offset 14, -4
 112:simpleserial-base.c **** 
 603              		.loc 1 112 19 view .LVU146
 604 0002 6026     		movs	r6, #96
 107:simpleserial-base.c **** 	/**********************************
 605              		.loc 1 107 1 view .LVU147
 606 0004 0500     		movs	r5, r0
 110:simpleserial-base.c **** 
 607              		.loc 1 110 2 view .LVU148
 608 0006 FFF7FEFF 		bl	trigger_high
 609              	.LVL65:
 112:simpleserial-base.c **** 
 610              		.loc 1 112 2 is_stmt 1 view .LVU149
 112:simpleserial-base.c **** 
 611              		.loc 1 112 19 is_stmt 0 view .LVU150
 612 000a 124C     		ldr	r4, .L33
 112:simpleserial-base.c **** 
 613              		.loc 1 112 5 view .LVU151
 614 000c A35D     		ldrb	r3, [r4, r6]
 615 000e 012B     		cmp	r3, #1
 616 0010 0FD0     		beq	.L32
 128:simpleserial-base.c **** 		key_entered = 1;
 617              		.loc 1 128 3 is_stmt 1 view .LVU152
 618 0012 1022     		movs	r2, #16
 619 0014 2900     		movs	r1, r5
 620 0016 2000     		movs	r0, r4
 621 0018 FFF7FEFF 		bl	memcpy
 622              	.LVL66:
 129:simpleserial-base.c **** 
 623              		.loc 1 129 3 view .LVU153
 129:simpleserial-base.c **** 
 624              		.loc 1 129 15 is_stmt 0 view .LVU154
 625 001c 0123     		movs	r3, #1
 626 001e A355     		strb	r3, [r4, r6]
 131:simpleserial-base.c **** 
 627              		.loc 1 131 3 is_stmt 1 view .LVU155
 628 0020 FFF7FEFF 		bl	trigger_low
 629              	.LVL67:
 133:simpleserial-base.c **** 		return 0x00;
 630              		.loc 1 133 3 view .LVU156
 631 0024 2A00     		movs	r2, r5
 632 0026 1021     		movs	r1, #16
 633 0028 7220     		movs	r0, #114
 634 002a FFF7FEFF 		bl	simpleserial_put
 635              	.LVL68:
 134:simpleserial-base.c **** 	}
 636              		.loc 1 134 3 view .LVU157
 637              	.L31:
 137:simpleserial-base.c **** 
 638              		.loc 1 137 1 is_stmt 0 view .LVU158
 639              		@ sp needed
 640 002e 0020     		movs	r0, #0
 641              	.LVL69:
 137:simpleserial-base.c **** 
 642              		.loc 1 137 1 view .LVU159
 643 0030 70BD     		pop	{r4, r5, r6, pc}
 644              	.LVL70:
 645              	.L32:
 646              	.LBB24:
 647              	.LBI24:
 106:simpleserial-base.c **** {
 648              		.loc 1 106 9 is_stmt 1 view .LVU160
 649              	.LBB25:
 114:simpleserial-base.c **** 
 650              		.loc 1 114 2 view .LVU161
 651 0032 2000     		movs	r0, r4
 652 0034 2900     		movs	r1, r5
 653 0036 1022     		movs	r2, #16
 654 0038 3030     		adds	r0, r0, #48
 655 003a FFF7FEFF 		bl	memcpy
 656              	.LVL71:
 116:simpleserial-base.c **** 
 657              		.loc 1 116 2 view .LVU162
 658 003e FFF7FEFF 		bl	encrypt
 659              	.LVL72:
 118:simpleserial-base.c **** 
 660              		.loc 1 118 2 view .LVU163
 120:simpleserial-base.c **** 
 661              		.loc 1 120 2 view .LVU164
 662 0042 FFF7FEFF 		bl	trigger_low
 663              	.LVL73:
 122:simpleserial-base.c **** 
 664              		.loc 1 122 2 view .LVU165
 665 0046 2200     		movs	r2, r4
 666 0048 1021     		movs	r1, #16
 667 004a 7220     		movs	r0, #114
 668 004c 4032     		adds	r2, r2, #64
 669 004e FFF7FEFF 		bl	simpleserial_put
 670              	.LVL74:
 124:simpleserial-base.c **** 
 671              		.loc 1 124 2 view .LVU166
 672 0052 ECE7     		b	.L31
 673              	.L34:
 674              		.align	2
 675              	.L33:
 676 0054 00000000 		.word	.LANCHOR0
 677              	.LBE25:
 678              	.LBE24:
 679              		.cfi_endproc
 680              	.LFE5:
 682              		.section	.text.reset,"ax",%progbits
 683              		.align	1
 684              		.p2align 2,,3
 685              		.global	reset
 686              		.syntax unified
 687              		.code	16
 688              		.thumb_func
 689              		.fpu softvfp
 691              	reset:
 692              	.LVL75:
 693              	.LFB6:
 140:simpleserial-base.c **** 	// Reset key here if needed
 694              		.loc 1 140 1 view -0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 0
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 142:simpleserial-base.c **** }
 699              		.loc 1 142 2 view .LVU168
 143:simpleserial-base.c **** 
 700              		.loc 1 143 1 is_stmt 0 view .LVU169
 701 0000 0020     		movs	r0, #0
 702              	.LVL76:
 143:simpleserial-base.c **** 
 703              		.loc 1 143 1 view .LVU170
 704              		@ sp needed
 705 0002 7047     		bx	lr
 706              		.cfi_endproc
 707              	.LFE6:
 709              		.section	.text.startup.main,"ax",%progbits
 710              		.align	1
 711              		.p2align 2,,3
 712              		.global	main
 713              		.syntax unified
 714              		.code	16
 715              		.thumb_func
 716              		.fpu softvfp
 718              	main:
 719              	.LFB8:
 177:simpleserial-base.c **** #endif
 178:simpleserial-base.c **** 
 179:simpleserial-base.c **** int main(void)
 180:simpleserial-base.c **** {
 720              		.loc 1 180 1 is_stmt 1 view -0
 721              		.cfi_startproc
 722              		@ Volatile: function does not return.
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 181:simpleserial-base.c ****     platform_init();
 725              		.loc 1 181 5 view .LVU172
 180:simpleserial-base.c ****     platform_init();
 726              		.loc 1 180 1 is_stmt 0 view .LVU173
 727 0000 10B5     		push	{r4, lr}
 728              	.LCFI6:
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 4, -8
 731              		.cfi_offset 14, -4
 732              		.loc 1 181 5 view .LVU174
 733 0002 FFF7FEFF 		bl	platform_init
 734              	.LVL77:
 182:simpleserial-base.c **** 	init_uart();
 735              		.loc 1 182 2 is_stmt 1 view .LVU175
 736 0006 FFF7FEFF 		bl	init_uart
 737              	.LVL78:
 183:simpleserial-base.c **** 	trigger_setup();
 738              		.loc 1 183 2 view .LVU176
 739 000a FFF7FEFF 		bl	trigger_setup
 740              	.LVL79:
 184:simpleserial-base.c **** 
 185:simpleserial-base.c **** 	simpleserial_init();
 741              		.loc 1 185 2 view .LVU177
 742 000e FFF7FEFF 		bl	simpleserial_init
 743              	.LVL80:
 186:simpleserial-base.c **** #if SS_VER != SS_VER_2_1
 187:simpleserial-base.c **** 	simpleserial_addcmd('p', 16, get_pt);
 188:simpleserial-base.c **** 	simpleserial_addcmd('k', 16, get_key);
 189:simpleserial-base.c **** 	simpleserial_addcmd('x', 0, reset);
 190:simpleserial-base.c **** #else
 191:simpleserial-base.c ****     simpleserial_addcmd(0x01, 16, aes);
 744              		.loc 1 191 5 view .LVU178
 745 0012 1021     		movs	r1, #16
 746 0014 0120     		movs	r0, #1
 747 0016 034A     		ldr	r2, .L38
 748 0018 FFF7FEFF 		bl	simpleserial_addcmd
 749              	.LVL81:
 750              	.L37:
 192:simpleserial-base.c **** #endif
 193:simpleserial-base.c **** 	while(1)
 751              		.loc 1 193 2 discriminator 1 view .LVU179
 194:simpleserial-base.c **** 		simpleserial_get();
 752              		.loc 1 194 3 discriminator 1 view .LVU180
 753 001c FFF7FEFF 		bl	simpleserial_get
 754              	.LVL82:
 193:simpleserial-base.c **** 		simpleserial_get();
 755              		.loc 1 193 7 discriminator 1 view .LVU181
 756 0020 FCE7     		b	.L37
 757              	.L39:
 758 0022 C046     		.align	2
 759              	.L38:
 760 0024 00000000 		.word	aes
 761              		.cfi_endproc
 762              	.LFE8:
 764              		.section	.text.Cat,"ax",%progbits
 765              		.align	1
 766              		.p2align 2,,3
 767              		.global	Cat
 768              		.syntax unified
 769              		.code	16
 770              		.thumb_func
 771              		.fpu softvfp
 773              	Cat:
 774              	.LVL83:
 775              	.LFB9:
 195:simpleserial-base.c **** }
 196:simpleserial-base.c **** 
 197:simpleserial-base.c **** uint32_t Cat(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3){
 776              		.loc 1 197 61 view -0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 198:simpleserial-base.c **** 	uint32_t word = 0;
 781              		.loc 1 198 2 view .LVU183
 199:simpleserial-base.c **** 	word += b0;
 782              		.loc 1 199 2 view .LVU184
 200:simpleserial-base.c **** 	word = (word << 8);
 783              		.loc 1 200 2 view .LVU185
 784              		.loc 1 200 7 is_stmt 0 view .LVU186
 785 0000 0002     		lsls	r0, r0, #8
 786              	.LVL84:
 201:simpleserial-base.c **** 	word += b1;
 787              		.loc 1 201 2 is_stmt 1 view .LVU187
 788              		.loc 1 201 7 is_stmt 0 view .LVU188
 789 0002 0818     		adds	r0, r1, r0
 790              	.LVL85:
 202:simpleserial-base.c **** 	word = (word << 8);
 791              		.loc 1 202 2 is_stmt 1 view .LVU189
 792              		.loc 1 202 7 is_stmt 0 view .LVU190
 793 0004 0002     		lsls	r0, r0, #8
 794              	.LVL86:
 203:simpleserial-base.c **** 	word += b2;
 795              		.loc 1 203 2 is_stmt 1 view .LVU191
 796              		.loc 1 203 7 is_stmt 0 view .LVU192
 797 0006 1018     		adds	r0, r2, r0
 798              	.LVL87:
 204:simpleserial-base.c **** 	word = (word << 8);
 799              		.loc 1 204 2 is_stmt 1 view .LVU193
 800              		.loc 1 204 7 is_stmt 0 view .LVU194
 801 0008 0002     		lsls	r0, r0, #8
 802              	.LVL88:
 205:simpleserial-base.c **** 	word += b3;
 803              		.loc 1 205 2 is_stmt 1 view .LVU195
 206:simpleserial-base.c **** 	return word;
 804              		.loc 1 206 2 view .LVU196
 205:simpleserial-base.c **** 	word += b3;
 805              		.loc 1 205 7 is_stmt 0 view .LVU197
 806 000a 1818     		adds	r0, r3, r0
 807              	.LVL89:
 207:simpleserial-base.c **** }
 808              		.loc 1 207 1 view .LVU198
 809              		@ sp needed
 810 000c 7047     		bx	lr
 811              		.cfi_endproc
 812              	.LFE9:
 814              		.global	PlainText
 815              		.global	Key
 816              		.global	key_entered
 817              		.global	S_Matrix
 818              		.global	Mask_Matrix
 819              		.global	ST_Matrix
 820              		.global	ExpandedKey
 821              		.global	StateArray
 822 000e C046     		.bss
 823              		.align	2
 824              		.set	.LANCHOR0,. + 0
 827              	Key:
 828 0000 00000000 		.space	16
 828      00000000 
 828      00000000 
 828      00000000 
 831              	Mask_Matrix:
 832 0010 00000000 		.space	16
 832      00000000 
 832      00000000 
 832      00000000 
 835              	ST_Matrix:
 836 0020 00000000 		.space	16
 836      00000000 
 836      00000000 
 836      00000000 
 839              	PlainText:
 840 0030 00000000 		.space	16
 840      00000000 
 840      00000000 
 840      00000000 
 843              	StateArray:
 844 0040 00000000 		.space	16
 844      00000000 
 844      00000000 
 844      00000000 
 847              	S_Matrix:
 848 0050 00000000 		.space	16
 848      00000000 
 848      00000000 
 848      00000000 
 851              	key_entered:
 852 0060 00       		.space	1
 853 0061 000000   		.space	3
 856              	ExpandedKey:
 857 0064 00000000 		.space	176
 857      00000000 
 857      00000000 
 857      00000000 
 857      00000000 
 858              		.text
 859              	.Letext0:
 860              		.file 2 "c:\\users\\alexb\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\
 861              		.file 3 "c:\\users\\alexb\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_std
 862              		.file 4 ".././hal/hal.h"
 863              		.file 5 ".././hal/stm32f0/stm32f0_hal.h"
 864              		.file 6 ".././simpleserial/simpleserial.h"
 865              		.file 7 "c:\\users\\alexb\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\time.h"
 866              		.file 8 "AES_128.h"
 867              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 simpleserial-base.c
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:16     .text.get_key:00000000 $t
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:25     .text.get_key:00000000 get_key
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:59     .text.get_key:00000010 $d
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:64     .text.encrypt:00000000 $t
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:72     .text.encrypt:00000000 encrypt
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:349    .text.encrypt:0000014c $d
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:856    .bss:00000064 ExpandedKey
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:356    .text.aes:00000000 $t
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:364    .text.aes:00000000 aes
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:570    .text.aes:000000b0 $d
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:579    .text.get_pt:00000000 $t
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:587    .text.get_pt:00000000 get_pt
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:676    .text.get_pt:00000054 $d
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:683    .text.reset:00000000 $t
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:691    .text.reset:00000000 reset
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:710    .text.startup.main:00000000 $t
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:718    .text.startup.main:00000000 main
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:760    .text.startup.main:00000024 $d
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:765    .text.Cat:00000000 $t
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:773    .text.Cat:00000000 Cat
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:839    .bss:00000030 PlainText
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:827    .bss:00000000 Key
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:851    .bss:00000060 key_entered
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:847    .bss:00000050 S_Matrix
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:831    .bss:00000010 Mask_Matrix
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:835    .bss:00000020 ST_Matrix
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:843    .bss:00000040 StateArray
C:\Users\alexb\AppData\Local\Temp\ccqf88Wh.s:823    .bss:00000000 $d

UNDEFINED SYMBOLS
memcpy
time
srand
rand
AddMatrices
ExpandKey
AddRoundKey
SubBytes
ShiftRows
MixColumns
trigger_high
trigger_low
simpleserial_put
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get

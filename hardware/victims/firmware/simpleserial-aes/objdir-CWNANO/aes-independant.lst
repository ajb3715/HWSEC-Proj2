   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"aes-independant.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.aes_indep_init,"ax",%progbits
  16              		.align	1
  17              		.global	aes_indep_init
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	aes_indep_init:
  25              	.LFB0:
  26              		.file 1 ".././crypto/aes-independant.c"
   1:.././crypto/aes-independant.c **** /*
   2:.././crypto/aes-independant.c ****     This file is part of the AESExplorer Example Targets
   3:.././crypto/aes-independant.c ****     Copyright (C) 2012 Colin O'Flynn <coflynn@newae.com>
   4:.././crypto/aes-independant.c **** 
   5:.././crypto/aes-independant.c ****     This program is free software: you can redistribute it and/or modify
   6:.././crypto/aes-independant.c ****     it under the terms of the GNU General Public License as published by
   7:.././crypto/aes-independant.c ****     the Free Software Foundation, either version 3 of the License, or
   8:.././crypto/aes-independant.c ****     (at your option) any later version.
   9:.././crypto/aes-independant.c **** 
  10:.././crypto/aes-independant.c ****     This program is distributed in the hope that it will be useful,
  11:.././crypto/aes-independant.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././crypto/aes-independant.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././crypto/aes-independant.c ****     GNU General Public License for more details.
  14:.././crypto/aes-independant.c **** 
  15:.././crypto/aes-independant.c ****     You should have received a copy of the GNU General Public License
  16:.././crypto/aes-independant.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././crypto/aes-independant.c **** */
  18:.././crypto/aes-independant.c **** 
  19:.././crypto/aes-independant.c **** #include "aes-independant.h"
  20:.././crypto/aes-independant.c **** #include "hal.h"
  21:.././crypto/aes-independant.c **** 
  22:.././crypto/aes-independant.c **** #if HWCRYPTO
  23:.././crypto/aes-independant.c **** 
  24:.././crypto/aes-independant.c **** void aes_indep_init(void)
  25:.././crypto/aes-independant.c **** {
  26:.././crypto/aes-independant.c ****     HW_AES128_Init();
  27:.././crypto/aes-independant.c **** }
  28:.././crypto/aes-independant.c **** 
  29:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  30:.././crypto/aes-independant.c **** {
  31:.././crypto/aes-independant.c ****     HW_AES128_LoadKey(key);
  32:.././crypto/aes-independant.c **** }
  33:.././crypto/aes-independant.c **** 
  34:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  35:.././crypto/aes-independant.c **** {
  36:.././crypto/aes-independant.c ****     HW_AES128_Enc_pretrigger(pt);
  37:.././crypto/aes-independant.c **** }
  38:.././crypto/aes-independant.c **** 
  39:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  40:.././crypto/aes-independant.c **** {
  41:.././crypto/aes-independant.c ****     HW_AES128_Enc_posttrigger(pt);
  42:.././crypto/aes-independant.c **** }
  43:.././crypto/aes-independant.c **** 
  44:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  45:.././crypto/aes-independant.c **** {
  46:.././crypto/aes-independant.c ****     HW_AES128_Enc(pt);
  47:.././crypto/aes-independant.c **** }
  48:.././crypto/aes-independant.c **** 
  49:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  50:.././crypto/aes-independant.c **** {
  51:.././crypto/aes-independant.c **** }
  52:.././crypto/aes-independant.c **** 
  53:.././crypto/aes-independant.c **** #elif defined(AVRCRYPTOLIB)
  54:.././crypto/aes-independant.c **** #include "aes128_enc.h"
  55:.././crypto/aes-independant.c **** #include "aes_keyschedule.h"
  56:.././crypto/aes-independant.c **** 
  57:.././crypto/aes-independant.c **** aes128_ctx_t ctx;
  58:.././crypto/aes-independant.c **** 
  59:.././crypto/aes-independant.c **** void aes_indep_init(void)
  60:.././crypto/aes-independant.c **** {
  61:.././crypto/aes-independant.c **** 	;
  62:.././crypto/aes-independant.c **** }
  63:.././crypto/aes-independant.c **** 
  64:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  65:.././crypto/aes-independant.c **** {
  66:.././crypto/aes-independant.c **** 	aes128_init(key, &ctx);
  67:.././crypto/aes-independant.c **** }
  68:.././crypto/aes-independant.c **** 
  69:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  70:.././crypto/aes-independant.c **** {
  71:.././crypto/aes-independant.c **** 	aes128_enc(pt, &ctx); /* encrypting the data block */
  72:.././crypto/aes-independant.c **** }
  73:.././crypto/aes-independant.c **** 
  74:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  75:.././crypto/aes-independant.c **** {
  76:.././crypto/aes-independant.c ****     ;
  77:.././crypto/aes-independant.c **** }
  78:.././crypto/aes-independant.c **** 
  79:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  80:.././crypto/aes-independant.c **** {
  81:.././crypto/aes-independant.c ****     ;
  82:.././crypto/aes-independant.c **** }
  83:.././crypto/aes-independant.c **** 
  84:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  85:.././crypto/aes-independant.c **** {
  86:.././crypto/aes-independant.c **** }
  87:.././crypto/aes-independant.c **** 
  88:.././crypto/aes-independant.c **** #elif defined(SIMPLEAES)
  89:.././crypto/aes-independant.c **** 
  90:.././crypto/aes-independant.c **** uint8_t enckey[16];
  91:.././crypto/aes-independant.c **** 
  92:.././crypto/aes-independant.c **** void aes_indep_init(void)
  93:.././crypto/aes-independant.c **** {
  94:.././crypto/aes-independant.c **** 	;
  95:.././crypto/aes-independant.c **** }
  96:.././crypto/aes-independant.c **** 
  97:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  98:.././crypto/aes-independant.c **** {
  99:.././crypto/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 100:.././crypto/aes-independant.c **** 		enckey[i] = key[i];
 101:.././crypto/aes-independant.c **** 	}
 102:.././crypto/aes-independant.c **** }
 103:.././crypto/aes-independant.c **** 
 104:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 105:.././crypto/aes-independant.c **** {
 106:.././crypto/aes-independant.c **** 	uint8_t * result = aes(pt, enckey);
 107:.././crypto/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 108:.././crypto/aes-independant.c **** 		pt[i] = result[i];
 109:.././crypto/aes-independant.c **** 	}
 110:.././crypto/aes-independant.c **** }
 111:.././crypto/aes-independant.c **** 
 112:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 113:.././crypto/aes-independant.c **** {
 114:.././crypto/aes-independant.c ****     ;
 115:.././crypto/aes-independant.c **** }
 116:.././crypto/aes-independant.c **** 
 117:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 118:.././crypto/aes-independant.c **** {
 119:.././crypto/aes-independant.c ****     ;
 120:.././crypto/aes-independant.c **** }
 121:.././crypto/aes-independant.c **** 
 122:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 123:.././crypto/aes-independant.c **** {
 124:.././crypto/aes-independant.c **** }
 125:.././crypto/aes-independant.c **** 
 126:.././crypto/aes-independant.c **** #elif defined(DPAV4)
 127:.././crypto/aes-independant.c **** 
 128:.././crypto/aes-independant.c **** #include "aes.h"
 129:.././crypto/aes-independant.c **** #include "aes_enc.h"
 130:.././crypto/aes-independant.c **** 
 131:.././crypto/aes-independant.c **** /*  This is the AES RSM 256 encryption function that call the generic AES RSM encryption core*/
 132:.././crypto/aes-independant.c **** void aes256_enc(uint8_t* j, void* buffer, aes256_ctx_t* ctx,uint8_t rng){
 133:.././crypto/aes-independant.c **** 	aes_encrypt_core(j,buffer, (aes_genctx_t*)ctx, 14,(uint8_t)rng);
 134:.././crypto/aes-independant.c **** }
 135:.././crypto/aes-independant.c **** 
 136:.././crypto/aes-independant.c **** aes256_ctx_t ctx;
 137:.././crypto/aes-independant.c **** 
 138:.././crypto/aes-independant.c **** void aes_indep_init(void)
 139:.././crypto/aes-independant.c **** {
 140:.././crypto/aes-independant.c ****     ;
 141:.././crypto/aes-independant.c **** }
 142:.././crypto/aes-independant.c **** 
 143:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
 144:.././crypto/aes-independant.c **** {
 145:.././crypto/aes-independant.c **** 	aes256_init(key, &ctx);
 146:.././crypto/aes-independant.c **** }
 147:.././crypto/aes-independant.c **** 
 148:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 149:.././crypto/aes-independant.c **** {
 150:.././crypto/aes-independant.c **** 	static uint8_t j[0];
 151:.././crypto/aes-independant.c **** 
 152:.././crypto/aes-independant.c **** 	//Encryption with trigger enabled
 153:.././crypto/aes-independant.c **** 	aes256_enc(j, pt, &ctx, 1);
 154:.././crypto/aes-independant.c **** }
 155:.././crypto/aes-independant.c **** 
 156:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 157:.././crypto/aes-independant.c **** {
 158:.././crypto/aes-independant.c ****     ;
 159:.././crypto/aes-independant.c **** }
 160:.././crypto/aes-independant.c **** 
 161:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 162:.././crypto/aes-independant.c **** {
 163:.././crypto/aes-independant.c ****     ;
 164:.././crypto/aes-independant.c **** }
 165:.././crypto/aes-independant.c **** 
 166:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 167:.././crypto/aes-independant.c **** {
 168:.././crypto/aes-independant.c **** }
 169:.././crypto/aes-independant.c **** 
 170:.././crypto/aes-independant.c **** #elif defined(TINYAES128C)
 171:.././crypto/aes-independant.c **** 
 172:.././crypto/aes-independant.c **** #include "aes.h"
 173:.././crypto/aes-independant.c **** 
 174:.././crypto/aes-independant.c **** uint8_t enckey[16];
 175:.././crypto/aes-independant.c **** 
 176:.././crypto/aes-independant.c **** void aes_indep_init(void)
 177:.././crypto/aes-independant.c **** {
  27              		.loc 1 177 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 178:.././crypto/aes-independant.c **** 	;
  32              		.loc 1 178 2 view .LVU1
 179:.././crypto/aes-independant.c **** }
  33              		.loc 1 179 1 is_stmt 0 view .LVU2
  34              		@ sp needed
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE0:
  39              		.section	.text.aes_indep_key,"ax",%progbits
  40              		.align	1
  41              		.global	aes_indep_key
  42              		.syntax unified
  43              		.code	16
  44              		.thumb_func
  45              		.fpu softvfp
  47              	aes_indep_key:
  48              	.LVL0:
  49              	.LFB1:
 180:.././crypto/aes-independant.c **** 
 181:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
 182:.././crypto/aes-independant.c **** {
  50              		.loc 1 182 1 is_stmt 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
 183:.././crypto/aes-independant.c ****     AES128_ECB_indp_setkey(key);
  54              		.loc 1 183 5 view .LVU4
 182:.././crypto/aes-independant.c ****     AES128_ECB_indp_setkey(key);
  55              		.loc 1 182 1 is_stmt 0 view .LVU5
  56 0000 10B5     		push	{r4, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 4, -8
  60              		.cfi_offset 14, -4
  61              		.loc 1 183 5 view .LVU6
  62 0002 FFF7FEFF 		bl	AES128_ECB_indp_setkey
  63              	.LVL1:
 184:.././crypto/aes-independant.c **** }
  64              		.loc 1 184 1 view .LVU7
  65              		@ sp needed
  66 0006 10BD     		pop	{r4, pc}
  67              		.cfi_endproc
  68              	.LFE1:
  70              		.section	.text.aes_indep_enc,"ax",%progbits
  71              		.align	1
  72              		.global	aes_indep_enc
  73              		.syntax unified
  74              		.code	16
  75              		.thumb_func
  76              		.fpu softvfp
  78              	aes_indep_enc:
  79              	.LVL2:
  80              	.LFB2:
 185:.././crypto/aes-independant.c **** 
 186:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 187:.././crypto/aes-independant.c **** {
  81              		.loc 1 187 1 is_stmt 1 view -0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
 188:.././crypto/aes-independant.c **** 	AES128_ECB_indp_crypto(pt);
  85              		.loc 1 188 2 view .LVU9
 187:.././crypto/aes-independant.c **** 	AES128_ECB_indp_crypto(pt);
  86              		.loc 1 187 1 is_stmt 0 view .LVU10
  87 0000 10B5     		push	{r4, lr}
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 4, -8
  91              		.cfi_offset 14, -4
  92              		.loc 1 188 2 view .LVU11
  93 0002 FFF7FEFF 		bl	AES128_ECB_indp_crypto
  94              	.LVL3:
 189:.././crypto/aes-independant.c **** }
  95              		.loc 1 189 1 view .LVU12
  96              		@ sp needed
  97 0006 10BD     		pop	{r4, pc}
  98              		.cfi_endproc
  99              	.LFE2:
 101              		.section	.text.aes_indep_enc_pretrigger,"ax",%progbits
 102              		.align	1
 103              		.global	aes_indep_enc_pretrigger
 104              		.syntax unified
 105              		.code	16
 106              		.thumb_func
 107              		.fpu softvfp
 109              	aes_indep_enc_pretrigger:
 110              	.LVL4:
 111              	.LFB3:
 190:.././crypto/aes-independant.c **** 
 191:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 192:.././crypto/aes-independant.c **** {
 112              		.loc 1 192 1 is_stmt 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 193:.././crypto/aes-independant.c ****     ;
 117              		.loc 1 193 5 view .LVU14
 194:.././crypto/aes-independant.c **** }
 118              		.loc 1 194 1 is_stmt 0 view .LVU15
 119              		@ sp needed
 120 0000 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE3:
 124              		.section	.text.aes_indep_enc_posttrigger,"ax",%progbits
 125              		.align	1
 126              		.global	aes_indep_enc_posttrigger
 127              		.syntax unified
 128              		.code	16
 129              		.thumb_func
 130              		.fpu softvfp
 132              	aes_indep_enc_posttrigger:
 133              	.LFB7:
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              		@ sp needed
 139 0000 7047     		bx	lr
 140              		.cfi_endproc
 141              	.LFE7:
 143              		.section	.text.aes_indep_mask,"ax",%progbits
 144              		.align	1
 145              		.global	aes_indep_mask
 146              		.syntax unified
 147              		.code	16
 148              		.thumb_func
 149              		.fpu softvfp
 151              	aes_indep_mask:
 152              	.LVL5:
 153              	.LFB5:
 195:.././crypto/aes-independant.c **** 
 196:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 197:.././crypto/aes-independant.c **** {
 198:.././crypto/aes-independant.c ****     ;
 199:.././crypto/aes-independant.c **** }
 200:.././crypto/aes-independant.c **** 
 201:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 202:.././crypto/aes-independant.c **** {
 154              		.loc 1 202 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 203:.././crypto/aes-independant.c **** }
 159              		.loc 1 203 1 view .LVU17
 160              		@ sp needed
 161 0000 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE5:
 165              		.global	enckey
 166              		.bss
 169              	enckey:
 170 0000 00000000 		.space	16
 170      00000000 
 170      00000000 
 170      00000000 
 171              		.text
 172              	.Letext0:
 173              		.file 2 "c:\\progra~1\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\_def
 174              		.file 3 "c:\\progra~1\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_stdint.
 175              		.file 4 ".././crypto/tiny-AES128-C/aes.h"
DEFINED SYMBOLS
                            *ABS*:00000000 aes-independant.c
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:16     .text.aes_indep_init:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:24     .text.aes_indep_init:00000000 aes_indep_init
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:40     .text.aes_indep_key:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:47     .text.aes_indep_key:00000000 aes_indep_key
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:71     .text.aes_indep_enc:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:78     .text.aes_indep_enc:00000000 aes_indep_enc
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:102    .text.aes_indep_enc_pretrigger:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:109    .text.aes_indep_enc_pretrigger:00000000 aes_indep_enc_pretrigger
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:125    .text.aes_indep_enc_posttrigger:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:132    .text.aes_indep_enc_posttrigger:00000000 aes_indep_enc_posttrigger
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:144    .text.aes_indep_mask:00000000 $t
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:151    .text.aes_indep_mask:00000000 aes_indep_mask
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:169    .bss:00000000 enckey
C:\Users\mjzeec\AppData\Local\Temp\ccGucuOm.s:170    .bss:00000000 $d

UNDEFINED SYMBOLS
AES128_ECB_indp_setkey
AES128_ECB_indp_crypto
